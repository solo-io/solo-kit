syntax = "proto3";
package core.solo.io;
option go_package = "github.com/solo-io/solo-kit/pkg/api/v1/resources/core";

import "extproto/ext.proto";
option (extproto.hash_all) = true;
option (extproto.equal_all) = true;
option (extproto.clone_all) = true;

import "google/protobuf/struct.proto";

/**
 * NamespacedStatuses indicates the Status of a resource according to each controller.
 * NamespacedStatuses are meant to be read-only by users
 */
message NamespacedStatuses {
    // Mapping from namespace to the Status written by the controller running in that namespace.
    map<string, Status> statuses = 1;
}

/**
 * Status indicates whether a resource has been (in)validated by a reporter in the system.
 * Statuses are meant to be read-only by users
 */
message Status {
    enum State {
        // Pending status indicates the resource has not yet been validated
        Pending = 0;
        // Accepted indicates the resource has been validated
        Accepted = 1;
        // Rejected indicates an invalid configuration by the user
        // Rejected resources may be propagated to the xDS server depending on their severity
        Rejected = 2;
        // Warning indicates a partially invalid configuration by the user
        // Resources with Warnings may be partially accepted by a controller, depending on the implementation
        Warning = 3;
    }
    // State is the enum indicating the state of the resource
    State state = 1;
    // Reason is a description of the error for Rejected resources. If the resource is pending or accepted, this field will be empty
    string reason = 2;
    // Reference to the reporter who wrote this status
    string reported_by = 3;
    // Reference to statuses (by resource-ref string: "Kind.Namespace.Name") of subresources of the parent resource
    map<string, Status> subresource_statuses = 4;

    // Opaque details about status results
    google.protobuf.Struct details = 5;

    // Additional information about the current state of the resource.
    repeated string Messages = 6;
}

message ParentReference {
    string group = 1;
    string kind = 2;
    string namespace = 3;
    string name = 4;
    string section_name = 5;
}

message KubeCondition {
    string type = 1;

    string status = 2;

    int64 observedGeneration = 3;

    // punt for later
    // Time lastTransitionTime = 4;

    string reason = 5;

    string message = 6;
} 

message PolicyAncestorStatus {
    ParentReference ancestor_ref = 1; 
    string controller_name = 2;
    repeated KubeCondition conditions = 3;
}

message PolicyStatus {
    repeated PolicyAncestorStatus ancestors = 1;
}
