syntax = "proto3";

package solo.io.envoy.service.discovery.v2;

import "github.com/solo-io/solo-kit/api/external/envoy/api/v2/discovery.proto";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

import "github.com/solo-io/solo-kit/api/external/envoy/annotations/resource.proto";
import "validate/validate.proto";

import "extproto/ext.proto";
option (extproto.hash_all) = true;
option (extproto.equal_all) = true;

option go_package = "github.com/solo-io/solo-kit/pkg/api/external/envoy/service/discovery/v2";

// [#protodoc-title: Runtime Discovery Service (RTDS)]
// RTDS :ref:`configuration overview <config_runtime_rtds>`

// Discovery service for Runtime resources.
service RuntimeDiscoveryService {
  option (solo.io.envoy.annotations.resource).type = "solo.io.envoy.service.discovery.v2.Runtime";

  rpc StreamRuntime(stream solo.io.envoy.api.v2.DiscoveryRequest) returns (stream solo.io.envoy.api.v2.DiscoveryResponse) {
  }

  rpc DeltaRuntime(stream solo.io.envoy.api.v2.DeltaDiscoveryRequest)
      returns (stream solo.io.envoy.api.v2.DeltaDiscoveryResponse) {
  }

  rpc FetchRuntime(solo.io.envoy.api.v2.DiscoveryRequest) returns (solo.io.envoy.api.v2.DiscoveryResponse) {
    option (google.api.http).post = "/v2/discovery:runtime";
    option (google.api.http).body = "*";
  }
}

// [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue with importing
// services: https://github.com/google/protobuf/issues/4221
message RtdsDummy {
}

// RTDS resource type. This describes a layer in the runtime virtual filesystem.
message Runtime {
  // Runtime resource name. This makes the Runtime a self-describing xDS
  // resource.
  string name = 1 [(validate.rules).string = {min_bytes: 1}];

  google.protobuf.Struct layer = 2;
}
