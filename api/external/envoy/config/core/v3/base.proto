syntax = "proto3";

package solo.io.envoy.config.core.v3;

option java_outer_classname = "BaseProto";
option java_multiple_files = true;
option java_package = "io.envoyproxy.solo.io.envoy.config.core.v3";
option go_package = "github.com/solo-io/solo-kit/pkg/api/external/envoy/config/core/v3";

import "github.com/solo-io/solo-kit/api/external/envoy/config/core/v3/address.proto";
import "github.com/solo-io/solo-kit/api/external/envoy/type/v3/semantic_version.proto";

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

import "udpa/annotations/migrate.proto";
import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

import "extproto/ext.proto";
option (extproto.hash_all) = true;
option (extproto.equal_all) = true;

option (solo.io.udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Common types]


// Identifies location of where either Envoy runs or where upstream hosts run.
message Locality {
  option (solo.io.udpa.annotations.versioning).previous_message_type = "envoy.api.v2.core.Locality";

  // Region this :ref:`zone <envoy_api_field_config.core.v3.Locality.zone>` belongs to.
  string region = 1;

  // Defines the local service zone where Envoy is running. Though optional, it
  // should be set if discovery service routing is used and the discovery
  // service exposes :ref:`zone data <envoy_api_field_config.endpoint.v3.LocalityLbEndpoints.locality>`,
  // either in this message or via :option:`--service-zone`. The meaning of zone
  // is context dependent, e.g. `Availability Zone (AZ)
  // <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_
  // on AWS, `Zone <https://cloud.google.com/compute/docs/regions-zones/>`_ on
  // GCP, etc.
  string zone = 2;

  // When used for locality of upstream hosts, this field further splits zone
  // into smaller chunks of sub-zones so they can be load balanced
  // independently.
  string sub_zone = 3;
}

// BuildVersion combines SemVer version of extension with free-form build information
// (i.e. 'alpha', 'private-build') as a set of strings.
message BuildVersion {
  option (solo.io.udpa.annotations.versioning).previous_message_type = "envoy.api.v2.core.BuildVersion";

  // SemVer version of extension.
  solo.io.envoy.type.v3.SemanticVersion version = 1;

  // Free-form build information.
  // Envoy defines several well known keys in the source/common/version/version.h file
  google.protobuf.Struct metadata = 2;
}

// Version and identification for an Envoy extension.
// [#next-free-field: 6]
message Extension {
  option (solo.io.udpa.annotations.versioning).previous_message_type = "envoy.api.v2.core.Extension";

  // This is the name of the Envoy filter as specified in the Envoy
  // configuration, e.g. envoy.filters.http.router, com.acme.widget.
  string name = 1;

  // Category of the extension.
  // Extension category names use reverse DNS notation. For instance "envoy.filters.listener"
  // for Envoy's built-in listener filters or "com.acme.filters.http" for HTTP filters from
  // acme.com vendor.
  // [#comment:TODO(yanavlasov): Link to the doc with existing envoy category names.]
  string category = 2;

  // [#not-implemented-hide:] Type descriptor of extension configuration proto.
  // [#comment:TODO(yanavlasov): Link to the doc with existing configuration protos.]
  // [#comment:TODO(yanavlasov): Add tests when PR #9391 lands.]
  string type_descriptor = 3;

  // The version is a property of the extension and maintained independently
  // of other extensions and the Envoy API.
  // This field is not set when extension did not provide version information.
  BuildVersion version = 4;

  // Indicates that the extension is present but was disabled via dynamic configuration.
  bool disabled = 5;
}

// Identifies a specific Envoy instance. The node identifier is presented to the
// management server, which may use this identifier to distinguish per Envoy
// configuration for serving.
// [#next-free-field: 12]
message Node {
  option (solo.io.udpa.annotations.versioning).previous_message_type = "envoy.api.v2.core.Node";

  reserved 5;

  reserved "build_version";

  // An opaque node identifier for the Envoy node. This also provides the local
  // service node name. It should be set if any of the following features are
  // used: :ref:`statsd <arch_overview_statistics>`, :ref:`CDS
  // <config_cluster_manager_cds>`, and :ref:`HTTP tracing
  // <arch_overview_tracing>`, either in this message or via
  // :option:`--service-node`.
  string id = 1;

  // Defines the local service cluster name where Envoy is running. Though
  // optional, it should be set if any of the following features are used:
  // :ref:`statsd <arch_overview_statistics>`, :ref:`health check cluster
  // verification
  // <envoy_api_field_config.core.v3.HealthCheck.HttpHealthCheck.service_name_matcher>`,
  // :ref:`runtime override directory <envoy_api_msg_config.bootstrap.v3.Runtime>`,
  // :ref:`user agent addition
  // <envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.add_user_agent>`,
  // :ref:`HTTP global rate limiting <config_http_filters_rate_limit>`,
  // :ref:`CDS <config_cluster_manager_cds>`, and :ref:`HTTP tracing
  // <arch_overview_tracing>`, either in this message or via
  // :option:`--service-cluster`.
  string cluster = 2;

  // Opaque metadata extending the node identifier. Envoy will pass this
  // directly to the management server.
  google.protobuf.Struct metadata = 3;

  // Locality specifying where the Envoy instance is running.
  Locality locality = 4;

  // Free-form string that identifies the entity requesting config.
  // E.g. "envoy" or "grpc"
  string user_agent_name = 6;

  oneof user_agent_version_type {
    // Free-form string that identifies the version of the entity requesting config.
    // E.g. "1.12.2" or "abcd1234", or "SpecialEnvoyBuild"
    string user_agent_version = 7;

    // Structured version of the entity requesting config.
    BuildVersion user_agent_build_version = 8;
  }

  // List of extensions and their versions supported by the node.
  repeated Extension extensions = 9;

  // Client feature support list. These are well known features described
  // in the Envoy API repository for a given major version of an API. Client features
  // use reverse DNS naming scheme, for example `com.acme.feature`.
  // See :ref:`the list of features <client_features>` that xDS client may
  // support.
  repeated string client_features = 10;

  // Known listening ports on the node as a generic hint to the management server
  // for filtering :ref:`listeners <config_listeners>` to be returned. For example,
  // if there is a listener bound to port 80, the list can optionally contain the
  // SocketAddress `(0.0.0.0,80)`. The field is optional and just a hint.
  repeated solo.io.envoy.config.core.v3.Address listening_addresses = 11 [deprecated = true];
}


// Runtime derived uint32 with a default when not specified.
message RuntimeUInt32 {
  option (solo.io.udpa.annotations.versioning).previous_message_type = "envoy.api.v2.core.RuntimeUInt32";

  // Default value if runtime value is not available.
  uint32 default_value = 2;

  // Runtime key to get value for comparison. This value is used if defined.
  string runtime_key = 3 [(validate.rules).string = {min_len: 1}];
}


// Identifies a specific ControlPlane instance that Envoy is connected to.
message ControlPlane {
  option (solo.io.udpa.annotations.versioning).previous_message_type = "envoy.api.v2.core.ControlPlane";

  // An opaque control plane identifier that uniquely identifies an instance
  // of control plane. This can be used to identify which control plane instance,
  // the Envoy is connected to.
  string identifier = 1;
}