// Code generated by MockGen. DO NOT EDIT.
// Source: open_api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/solo-io/solo-kit/pkg/code-generator/model"
	schemagen "github.com/solo-io/solo-kit/pkg/code-generator/schemagen"
)

// MockOpenApiSchemaGenerator is a mock of OpenApiSchemaGenerator interface
type MockOpenApiSchemaGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockOpenApiSchemaGeneratorMockRecorder
}

// MockOpenApiSchemaGeneratorMockRecorder is the mock recorder for MockOpenApiSchemaGenerator
type MockOpenApiSchemaGeneratorMockRecorder struct {
	mock *MockOpenApiSchemaGenerator
}

// NewMockOpenApiSchemaGenerator creates a new mock instance
func NewMockOpenApiSchemaGenerator(ctrl *gomock.Controller) *MockOpenApiSchemaGenerator {
	mock := &MockOpenApiSchemaGenerator{ctrl: ctrl}
	mock.recorder = &MockOpenApiSchemaGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenApiSchemaGenerator) EXPECT() *MockOpenApiSchemaGeneratorMockRecorder {
	return m.recorder
}

// GetOpenApiSchemas mocks base method
func (m *MockOpenApiSchemaGenerator) GetOpenApiSchemas(project model.Project, protoDir string) (schemagen.OpenApiSchemas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenApiSchemas", project, protoDir)
	ret0, _ := ret[0].(schemagen.OpenApiSchemas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenApiSchemas indicates an expected call of GetOpenApiSchemas
func (mr *MockOpenApiSchemaGeneratorMockRecorder) GetOpenApiSchemas(project, protoDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenApiSchemas", reflect.TypeOf((*MockOpenApiSchemaGenerator)(nil).GetOpenApiSchemas), project, protoDir)
}
