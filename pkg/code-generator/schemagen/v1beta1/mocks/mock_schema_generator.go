// Code generated by MockGen. DO NOT EDIT.
// Source: generator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/solo-io/solo-kit/pkg/code-generator/model"
	v1beta1 "github.com/solo-io/solo-kit/pkg/code-generator/schemagen/v1beta1"
	v1beta10 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
)

// MockSchemaGenerator is a mock of ValidationSchemaGenerator interface
type MockSchemaGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaGeneratorMockRecorder
}

// MockSchemaGeneratorMockRecorder is the mock recorder for MockSchemaGenerator
type MockSchemaGeneratorMockRecorder struct {
	mock *MockSchemaGenerator
}

// NewMockSchemaGenerator creates a new mock instance
func NewMockSchemaGenerator(ctrl *gomock.Controller) *MockSchemaGenerator {
	mock := &MockSchemaGenerator{ctrl: ctrl}
	mock.recorder = &MockSchemaGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchemaGenerator) EXPECT() *MockSchemaGeneratorMockRecorder {
	return m.recorder
}

// ApplyValidationSchema mocks base method
func (m *MockSchemaGenerator) ApplyValidationSchema(resource *model.Resource, options *v1beta1.SchemaOptions) (v1beta10.CustomResourceDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyValidationSchema", resource, options)
	ret0, _ := ret[0].(v1beta10.CustomResourceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyValidationSchema indicates an expected call of ApplyValidationSchema
func (mr *MockSchemaGeneratorMockRecorder) ApplyValidationSchema(resource, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyValidationSchema", reflect.TypeOf((*MockSchemaGenerator)(nil).ApplyValidationSchema), resource, options)
}
