// Code generated by MockGen. DO NOT EDIT.
// Source: generator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	openapi "cuelang.org/go/encoding/openapi"
	gomock "github.com/golang/mock/gomock"
	model "github.com/solo-io/solo-kit/pkg/code-generator/model"
	v1beta1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
)

// MockValidationSchemaGenerator is a mock of ValidationSchemaGenerator interface
type MockValidationSchemaGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockValidationSchemaGeneratorMockRecorder
}

// MockValidationSchemaGeneratorMockRecorder is the mock recorder for MockValidationSchemaGenerator
type MockValidationSchemaGeneratorMockRecorder struct {
	mock *MockValidationSchemaGenerator
}

// NewMockValidationSchemaGenerator creates a new mock instance
func NewMockValidationSchemaGenerator(ctrl *gomock.Controller) *MockValidationSchemaGenerator {
	mock := &MockValidationSchemaGenerator{ctrl: ctrl}
	mock.recorder = &MockValidationSchemaGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidationSchemaGenerator) EXPECT() *MockValidationSchemaGeneratorMockRecorder {
	return m.recorder
}

// GetValidationSchema mocks base method
func (m *MockValidationSchemaGenerator) GetValidationSchema(resource model.Resource, specSchema *openapi.OrderedMap) (*v1beta1.CustomResourceValidation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidationSchema", resource, specSchema)
	ret0, _ := ret[0].(*v1beta1.CustomResourceValidation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidationSchema indicates an expected call of GetValidationSchema
func (mr *MockValidationSchemaGeneratorMockRecorder) GetValidationSchema(resource, specSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidationSchema", reflect.TypeOf((*MockValidationSchemaGenerator)(nil).GetValidationSchema), resource, specSchema)
}
