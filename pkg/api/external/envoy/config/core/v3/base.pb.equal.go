// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/config/core/v3/base.proto

package v3

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *Locality) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Locality)
	if !ok {
		that2, ok := that.(Locality)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetRegion(), target.GetRegion()) != 0 {
		return false
	}

	if strings.Compare(m.GetZone(), target.GetZone()) != 0 {
		return false
	}

	if strings.Compare(m.GetSubZone(), target.GetSubZone()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *BuildVersion) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*BuildVersion)
	if !ok {
		that2, ok := that.(BuildVersion)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetVersion()).(equality.Equalizer); ok {
		if !h.Equal(target.GetVersion()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetVersion(), target.GetVersion()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Extension) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Extension)
	if !ok {
		that2, ok := that.(Extension)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetCategory(), target.GetCategory()) != 0 {
		return false
	}

	if strings.Compare(m.GetTypeDescriptor(), target.GetTypeDescriptor()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetVersion()).(equality.Equalizer); ok {
		if !h.Equal(target.GetVersion()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetVersion(), target.GetVersion()) {
			return false
		}
	}

	if m.GetDisabled() != target.GetDisabled() {
		return false
	}

	return true
}

// Equal function
func (m *Node) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Node)
	if !ok {
		that2, ok := that.(Node)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetId(), target.GetId()) != 0 {
		return false
	}

	if strings.Compare(m.GetCluster(), target.GetCluster()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetLocality()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLocality()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLocality(), target.GetLocality()) {
			return false
		}
	}

	if strings.Compare(m.GetUserAgentName(), target.GetUserAgentName()) != 0 {
		return false
	}

	if len(m.GetExtensions()) != len(target.GetExtensions()) {
		return false
	}
	for idx, v := range m.GetExtensions() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetExtensions()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetExtensions()[idx]) {
				return false
			}
		}

	}

	if len(m.GetClientFeatures()) != len(target.GetClientFeatures()) {
		return false
	}
	for idx, v := range m.GetClientFeatures() {

		if strings.Compare(v, target.GetClientFeatures()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetListeningAddresses()) != len(target.GetListeningAddresses()) {
		return false
	}
	for idx, v := range m.GetListeningAddresses() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetListeningAddresses()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetListeningAddresses()[idx]) {
				return false
			}
		}

	}

	switch m.UserAgentVersionType.(type) {

	case *Node_UserAgentVersion:

		if strings.Compare(m.GetUserAgentVersion(), target.GetUserAgentVersion()) != 0 {
			return false
		}

	case *Node_UserAgentBuildVersion:

		if h, ok := interface{}(m.GetUserAgentBuildVersion()).(equality.Equalizer); ok {
			if !h.Equal(target.GetUserAgentBuildVersion()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetUserAgentBuildVersion(), target.GetUserAgentBuildVersion()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *RuntimeUInt32) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RuntimeUInt32)
	if !ok {
		that2, ok := that.(RuntimeUInt32)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetDefaultValue() != target.GetDefaultValue() {
		return false
	}

	if strings.Compare(m.GetRuntimeKey(), target.GetRuntimeKey()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ControlPlane) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ControlPlane)
	if !ok {
		that2, ok := that.(ControlPlane)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetIdentifier(), target.GetIdentifier()) != 0 {
		return false
	}

	return true
}
