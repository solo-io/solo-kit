// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/config/core/v3/address.proto

package v3

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *Pipe) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Pipe)
	if !ok {
		that2, ok := that.(Pipe)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetPath(), target.GetPath()) != 0 {
		return false
	}

	if m.GetMode() != target.GetMode() {
		return false
	}

	return true
}

// Equal function
func (m *EnvoyInternalAddress) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*EnvoyInternalAddress)
	if !ok {
		that2, ok := that.(EnvoyInternalAddress)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.AddressNameSpecifier.(type) {

	case *EnvoyInternalAddress_ServerListenerName:

		if strings.Compare(m.GetServerListenerName(), target.GetServerListenerName()) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *SocketAddress) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SocketAddress)
	if !ok {
		that2, ok := that.(SocketAddress)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetProtocol() != target.GetProtocol() {
		return false
	}

	if strings.Compare(m.GetAddress(), target.GetAddress()) != 0 {
		return false
	}

	if strings.Compare(m.GetResolverName(), target.GetResolverName()) != 0 {
		return false
	}

	if m.GetIpv4Compat() != target.GetIpv4Compat() {
		return false
	}

	switch m.PortSpecifier.(type) {

	case *SocketAddress_PortValue:

		if m.GetPortValue() != target.GetPortValue() {
			return false
		}

	case *SocketAddress_NamedPort:

		if strings.Compare(m.GetNamedPort(), target.GetNamedPort()) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *Address) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Address)
	if !ok {
		that2, ok := that.(Address)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Address.(type) {

	case *Address_SocketAddress:

		if h, ok := interface{}(m.GetSocketAddress()).(equality.Equalizer); ok {
			if !h.Equal(target.GetSocketAddress()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetSocketAddress(), target.GetSocketAddress()) {
				return false
			}
		}

	case *Address_Pipe:

		if h, ok := interface{}(m.GetPipe()).(equality.Equalizer); ok {
			if !h.Equal(target.GetPipe()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetPipe(), target.GetPipe()) {
				return false
			}
		}

	case *Address_EnvoyInternalAddress:

		if h, ok := interface{}(m.GetEnvoyInternalAddress()).(equality.Equalizer); ok {
			if !h.Equal(target.GetEnvoyInternalAddress()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetEnvoyInternalAddress(), target.GetEnvoyInternalAddress()) {
				return false
			}
		}

	}

	return true
}
