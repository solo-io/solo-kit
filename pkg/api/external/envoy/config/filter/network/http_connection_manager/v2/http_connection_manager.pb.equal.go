// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *HttpConnectionManager) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HttpConnectionManager)
	if !ok {
		that2, ok := that.(HttpConnectionManager)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetCodecType() != target.GetCodecType() {
		return false
	}

	if strings.Compare(m.GetStatPrefix(), target.GetStatPrefix()) != 0 {
		return false
	}

	if len(m.GetHttpFilters()) != len(target.GetHttpFilters()) {
		return false
	}
	for idx, v := range m.GetHttpFilters() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHttpFilters()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHttpFilters()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetAddUserAgent()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAddUserAgent()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAddUserAgent(), target.GetAddUserAgent()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTracing()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTracing()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTracing(), target.GetTracing()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCommonHttpProtocolOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommonHttpProtocolOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommonHttpProtocolOptions(), target.GetCommonHttpProtocolOptions()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetHttpProtocolOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHttpProtocolOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHttpProtocolOptions(), target.GetHttpProtocolOptions()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetHttp2ProtocolOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHttp2ProtocolOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHttp2ProtocolOptions(), target.GetHttp2ProtocolOptions()) {
			return false
		}
	}

	if strings.Compare(m.GetServerName(), target.GetServerName()) != 0 {
		return false
	}

	if m.GetServerHeaderTransformation() != target.GetServerHeaderTransformation() {
		return false
	}

	if h, ok := interface{}(m.GetMaxRequestHeadersKb()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxRequestHeadersKb()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxRequestHeadersKb(), target.GetMaxRequestHeadersKb()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetIdleTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetIdleTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetIdleTimeout(), target.GetIdleTimeout()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetStreamIdleTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetStreamIdleTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetStreamIdleTimeout(), target.GetStreamIdleTimeout()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRequestTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequestTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequestTimeout(), target.GetRequestTimeout()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDrainTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDrainTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDrainTimeout(), target.GetDrainTimeout()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDelayedCloseTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDelayedCloseTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDelayedCloseTimeout(), target.GetDelayedCloseTimeout()) {
			return false
		}
	}

	if len(m.GetAccessLog()) != len(target.GetAccessLog()) {
		return false
	}
	for idx, v := range m.GetAccessLog() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetAccessLog()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetAccessLog()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetUseRemoteAddress()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUseRemoteAddress()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUseRemoteAddress(), target.GetUseRemoteAddress()) {
			return false
		}
	}

	if m.GetXffNumTrustedHops() != target.GetXffNumTrustedHops() {
		return false
	}

	if h, ok := interface{}(m.GetInternalAddressConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetInternalAddressConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetInternalAddressConfig(), target.GetInternalAddressConfig()) {
			return false
		}
	}

	if m.GetSkipXffAppend() != target.GetSkipXffAppend() {
		return false
	}

	if strings.Compare(m.GetVia(), target.GetVia()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetGenerateRequestId()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGenerateRequestId()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGenerateRequestId(), target.GetGenerateRequestId()) {
			return false
		}
	}

	if m.GetPreserveExternalRequestId() != target.GetPreserveExternalRequestId() {
		return false
	}

	if m.GetForwardClientCertDetails() != target.GetForwardClientCertDetails() {
		return false
	}

	if h, ok := interface{}(m.GetSetCurrentClientCertDetails()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSetCurrentClientCertDetails()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSetCurrentClientCertDetails(), target.GetSetCurrentClientCertDetails()) {
			return false
		}
	}

	if m.GetProxy_100Continue() != target.GetProxy_100Continue() {
		return false
	}

	if m.GetRepresentIpv4RemoteAddressAsIpv4MappedIpv6() != target.GetRepresentIpv4RemoteAddressAsIpv4MappedIpv6() {
		return false
	}

	if len(m.GetUpgradeConfigs()) != len(target.GetUpgradeConfigs()) {
		return false
	}
	for idx, v := range m.GetUpgradeConfigs() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetUpgradeConfigs()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetUpgradeConfigs()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetNormalizePath()).(equality.Equalizer); ok {
		if !h.Equal(target.GetNormalizePath()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetNormalizePath(), target.GetNormalizePath()) {
			return false
		}
	}

	if m.GetMergeSlashes() != target.GetMergeSlashes() {
		return false
	}

	if h, ok := interface{}(m.GetRequestIdExtension()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequestIdExtension()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequestIdExtension(), target.GetRequestIdExtension()) {
			return false
		}
	}

	switch m.RouteSpecifier.(type) {

	case *HttpConnectionManager_Rds:

		if h, ok := interface{}(m.GetRds()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRds()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRds(), target.GetRds()) {
				return false
			}
		}

	case *HttpConnectionManager_RouteConfig:

		if h, ok := interface{}(m.GetRouteConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRouteConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRouteConfig(), target.GetRouteConfig()) {
				return false
			}
		}

	case *HttpConnectionManager_ScopedRoutes:

		if h, ok := interface{}(m.GetScopedRoutes()).(equality.Equalizer); ok {
			if !h.Equal(target.GetScopedRoutes()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetScopedRoutes(), target.GetScopedRoutes()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *Rds) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Rds)
	if !ok {
		that2, ok := that.(Rds)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetConfigSource()).(equality.Equalizer); ok {
		if !h.Equal(target.GetConfigSource()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetConfigSource(), target.GetConfigSource()) {
			return false
		}
	}

	if strings.Compare(m.GetRouteConfigName(), target.GetRouteConfigName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ScopedRouteConfigurationsList) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ScopedRouteConfigurationsList)
	if !ok {
		that2, ok := that.(ScopedRouteConfigurationsList)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetScopedRouteConfigurations()) != len(target.GetScopedRouteConfigurations()) {
		return false
	}
	for idx, v := range m.GetScopedRouteConfigurations() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetScopedRouteConfigurations()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetScopedRouteConfigurations()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ScopedRoutes) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ScopedRoutes)
	if !ok {
		that2, ok := that.(ScopedRoutes)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetScopeKeyBuilder()).(equality.Equalizer); ok {
		if !h.Equal(target.GetScopeKeyBuilder()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetScopeKeyBuilder(), target.GetScopeKeyBuilder()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRdsConfigSource()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRdsConfigSource()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRdsConfigSource(), target.GetRdsConfigSource()) {
			return false
		}
	}

	switch m.ConfigSpecifier.(type) {

	case *ScopedRoutes_ScopedRouteConfigurationsList:

		if h, ok := interface{}(m.GetScopedRouteConfigurationsList()).(equality.Equalizer); ok {
			if !h.Equal(target.GetScopedRouteConfigurationsList()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetScopedRouteConfigurationsList(), target.GetScopedRouteConfigurationsList()) {
				return false
			}
		}

	case *ScopedRoutes_ScopedRds:

		if h, ok := interface{}(m.GetScopedRds()).(equality.Equalizer); ok {
			if !h.Equal(target.GetScopedRds()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetScopedRds(), target.GetScopedRds()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ScopedRds) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ScopedRds)
	if !ok {
		that2, ok := that.(ScopedRds)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetScopedRdsConfigSource()).(equality.Equalizer); ok {
		if !h.Equal(target.GetScopedRdsConfigSource()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetScopedRdsConfigSource(), target.GetScopedRdsConfigSource()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *HttpFilter) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HttpFilter)
	if !ok {
		that2, ok := that.(HttpFilter)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	switch m.ConfigType.(type) {

	case *HttpFilter_Config:

		if h, ok := interface{}(m.GetConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetConfig(), target.GetConfig()) {
				return false
			}
		}

	case *HttpFilter_TypedConfig:

		if h, ok := interface{}(m.GetTypedConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetTypedConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetTypedConfig(), target.GetTypedConfig()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *RequestIDExtension) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RequestIDExtension)
	if !ok {
		that2, ok := that.(RequestIDExtension)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetTypedConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTypedConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTypedConfig(), target.GetTypedConfig()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *HttpConnectionManager_Tracing) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HttpConnectionManager_Tracing)
	if !ok {
		that2, ok := that.(HttpConnectionManager_Tracing)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetOperationName() != target.GetOperationName() {
		return false
	}

	if len(m.GetRequestHeadersForTags()) != len(target.GetRequestHeadersForTags()) {
		return false
	}
	for idx, v := range m.GetRequestHeadersForTags() {

		if strings.Compare(v, target.GetRequestHeadersForTags()[idx]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetClientSampling()).(equality.Equalizer); ok {
		if !h.Equal(target.GetClientSampling()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetClientSampling(), target.GetClientSampling()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRandomSampling()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRandomSampling()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRandomSampling(), target.GetRandomSampling()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetOverallSampling()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOverallSampling()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOverallSampling(), target.GetOverallSampling()) {
			return false
		}
	}

	if m.GetVerbose() != target.GetVerbose() {
		return false
	}

	if h, ok := interface{}(m.GetMaxPathTagLength()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxPathTagLength()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxPathTagLength(), target.GetMaxPathTagLength()) {
			return false
		}
	}

	if len(m.GetCustomTags()) != len(target.GetCustomTags()) {
		return false
	}
	for idx, v := range m.GetCustomTags() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetCustomTags()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetCustomTags()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetProvider()).(equality.Equalizer); ok {
		if !h.Equal(target.GetProvider()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetProvider(), target.GetProvider()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *HttpConnectionManager_InternalAddressConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HttpConnectionManager_InternalAddressConfig)
	if !ok {
		that2, ok := that.(HttpConnectionManager_InternalAddressConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetUnixSockets() != target.GetUnixSockets() {
		return false
	}

	return true
}

// Equal function
func (m *HttpConnectionManager_SetCurrentClientCertDetails) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HttpConnectionManager_SetCurrentClientCertDetails)
	if !ok {
		that2, ok := that.(HttpConnectionManager_SetCurrentClientCertDetails)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSubject()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSubject()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSubject(), target.GetSubject()) {
			return false
		}
	}

	if m.GetCert() != target.GetCert() {
		return false
	}

	if m.GetChain() != target.GetChain() {
		return false
	}

	if m.GetDns() != target.GetDns() {
		return false
	}

	if m.GetUri() != target.GetUri() {
		return false
	}

	return true
}

// Equal function
func (m *HttpConnectionManager_UpgradeConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HttpConnectionManager_UpgradeConfig)
	if !ok {
		that2, ok := that.(HttpConnectionManager_UpgradeConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetUpgradeType(), target.GetUpgradeType()) != 0 {
		return false
	}

	if len(m.GetFilters()) != len(target.GetFilters()) {
		return false
	}
	for idx, v := range m.GetFilters() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetFilters()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetFilters()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetEnabled()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnabled()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnabled(), target.GetEnabled()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ScopedRoutes_ScopeKeyBuilder) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ScopedRoutes_ScopeKeyBuilder)
	if !ok {
		that2, ok := that.(ScopedRoutes_ScopeKeyBuilder)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetFragments()) != len(target.GetFragments()) {
		return false
	}
	for idx, v := range m.GetFragments() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetFragments()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetFragments()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ScopedRoutes_ScopeKeyBuilder_FragmentBuilder) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ScopedRoutes_ScopeKeyBuilder_FragmentBuilder)
	if !ok {
		that2, ok := that.(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Type.(type) {

	case *ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_:

		if h, ok := interface{}(m.GetHeaderValueExtractor()).(equality.Equalizer); ok {
			if !h.Equal(target.GetHeaderValueExtractor()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetHeaderValueExtractor(), target.GetHeaderValueExtractor()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor)
	if !ok {
		that2, ok := that.(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetElementSeparator(), target.GetElementSeparator()) != 0 {
		return false
	}

	switch m.ExtractType.(type) {

	case *ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_Index:

		if m.GetIndex() != target.GetIndex() {
			return false
		}

	case *ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_Element:

		if h, ok := interface{}(m.GetElement()).(equality.Equalizer); ok {
			if !h.Equal(target.GetElement()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetElement(), target.GetElement()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement)
	if !ok {
		that2, ok := that.(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetSeparator(), target.GetSeparator()) != 0 {
		return false
	}

	if strings.Compare(m.GetKey(), target.GetKey()) != 0 {
		return false
	}

	return true
}
