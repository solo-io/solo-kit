// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/service/discovery/v2/hds.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"

	core "github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/core"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)

	_ = core.HealthStatus(0)
)

// Equal function
func (m *Capability) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Capability)
	if !ok {
		that2, ok := that.(Capability)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetHealthCheckProtocols()) != len(target.GetHealthCheckProtocols()) {
		return false
	}
	for idx, v := range m.GetHealthCheckProtocols() {

		if v != target.GetHealthCheckProtocols()[idx] {
			return false
		}

	}

	return true
}

// Equal function
func (m *HealthCheckRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HealthCheckRequest)
	if !ok {
		that2, ok := that.(HealthCheckRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetNode()).(equality.Equalizer); ok {
		if !h.Equal(target.GetNode()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetNode(), target.GetNode()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCapability()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCapability()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCapability(), target.GetCapability()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *EndpointHealth) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*EndpointHealth)
	if !ok {
		that2, ok := that.(EndpointHealth)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetEndpoint()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEndpoint()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEndpoint(), target.GetEndpoint()) {
			return false
		}
	}

	if m.GetHealthStatus() != target.GetHealthStatus() {
		return false
	}

	return true
}

// Equal function
func (m *EndpointHealthResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*EndpointHealthResponse)
	if !ok {
		that2, ok := that.(EndpointHealthResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetEndpointsHealth()) != len(target.GetEndpointsHealth()) {
		return false
	}
	for idx, v := range m.GetEndpointsHealth() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetEndpointsHealth()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetEndpointsHealth()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *HealthCheckRequestOrEndpointHealthResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HealthCheckRequestOrEndpointHealthResponse)
	if !ok {
		that2, ok := that.(HealthCheckRequestOrEndpointHealthResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.RequestType.(type) {

	case *HealthCheckRequestOrEndpointHealthResponse_HealthCheckRequest:

		if h, ok := interface{}(m.GetHealthCheckRequest()).(equality.Equalizer); ok {
			if !h.Equal(target.GetHealthCheckRequest()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetHealthCheckRequest(), target.GetHealthCheckRequest()) {
				return false
			}
		}

	case *HealthCheckRequestOrEndpointHealthResponse_EndpointHealthResponse:

		if h, ok := interface{}(m.GetEndpointHealthResponse()).(equality.Equalizer); ok {
			if !h.Equal(target.GetEndpointHealthResponse()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetEndpointHealthResponse(), target.GetEndpointHealthResponse()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *LocalityEndpoints) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LocalityEndpoints)
	if !ok {
		that2, ok := that.(LocalityEndpoints)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetLocality()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLocality()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLocality(), target.GetLocality()) {
			return false
		}
	}

	if len(m.GetEndpoints()) != len(target.GetEndpoints()) {
		return false
	}
	for idx, v := range m.GetEndpoints() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetEndpoints()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetEndpoints()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ClusterHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ClusterHealthCheck)
	if !ok {
		that2, ok := that.(ClusterHealthCheck)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetClusterName(), target.GetClusterName()) != 0 {
		return false
	}

	if len(m.GetHealthChecks()) != len(target.GetHealthChecks()) {
		return false
	}
	for idx, v := range m.GetHealthChecks() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHealthChecks()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHealthChecks()[idx]) {
				return false
			}
		}

	}

	if len(m.GetLocalityEndpoints()) != len(target.GetLocalityEndpoints()) {
		return false
	}
	for idx, v := range m.GetLocalityEndpoints() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetLocalityEndpoints()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetLocalityEndpoints()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *HealthCheckSpecifier) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HealthCheckSpecifier)
	if !ok {
		that2, ok := that.(HealthCheckSpecifier)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetClusterHealthChecks()) != len(target.GetClusterHealthChecks()) {
		return false
	}
	for idx, v := range m.GetClusterHealthChecks() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetClusterHealthChecks()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetClusterHealthChecks()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetInterval(), target.GetInterval()) {
			return false
		}
	}

	return true
}
