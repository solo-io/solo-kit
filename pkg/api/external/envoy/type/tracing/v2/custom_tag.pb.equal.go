// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/type/tracing/v2/custom_tag.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *CustomTag) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CustomTag)
	if !ok {
		that2, ok := that.(CustomTag)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetTag(), target.GetTag()) != 0 {
		return false
	}

	switch m.Type.(type) {

	case *CustomTag_Literal_:
		if _, ok := target.Type.(*CustomTag_Literal_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetLiteral()).(equality.Equalizer); ok {
			if !h.Equal(target.GetLiteral()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetLiteral(), target.GetLiteral()) {
				return false
			}
		}

	case *CustomTag_Environment_:
		if _, ok := target.Type.(*CustomTag_Environment_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetEnvironment()).(equality.Equalizer); ok {
			if !h.Equal(target.GetEnvironment()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetEnvironment(), target.GetEnvironment()) {
				return false
			}
		}

	case *CustomTag_RequestHeader:
		if _, ok := target.Type.(*CustomTag_RequestHeader); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRequestHeader()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRequestHeader()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRequestHeader(), target.GetRequestHeader()) {
				return false
			}
		}

	case *CustomTag_Metadata_:
		if _, ok := target.Type.(*CustomTag_Metadata_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
			if !h.Equal(target.GetMetadata()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Type != target.Type {
			return false
		}
	}

	return true
}

// Equal function
func (m *CustomTag_Literal) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CustomTag_Literal)
	if !ok {
		that2, ok := that.(CustomTag_Literal)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetValue(), target.GetValue()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *CustomTag_Environment) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CustomTag_Environment)
	if !ok {
		that2, ok := that.(CustomTag_Environment)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetDefaultValue(), target.GetDefaultValue()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *CustomTag_Header) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CustomTag_Header)
	if !ok {
		that2, ok := that.(CustomTag_Header)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetDefaultValue(), target.GetDefaultValue()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *CustomTag_Metadata) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CustomTag_Metadata)
	if !ok {
		that2, ok := that.(CustomTag_Metadata)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetKind()).(equality.Equalizer); ok {
		if !h.Equal(target.GetKind()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetKind(), target.GetKind()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMetadataKey()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadataKey()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadataKey(), target.GetMetadataKey()) {
			return false
		}
	}

	if strings.Compare(m.GetDefaultValue(), target.GetDefaultValue()) != 0 {
		return false
	}

	return true
}
