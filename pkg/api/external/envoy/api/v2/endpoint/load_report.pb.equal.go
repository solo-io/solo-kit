// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/endpoint/load_report.proto

package endpoint

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *UpstreamLocalityStats) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpstreamLocalityStats)
	if !ok {
		that2, ok := that.(UpstreamLocalityStats)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetLocality()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLocality()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLocality(), target.GetLocality()) {
			return false
		}
	}

	if m.GetTotalSuccessfulRequests() != target.GetTotalSuccessfulRequests() {
		return false
	}

	if m.GetTotalRequestsInProgress() != target.GetTotalRequestsInProgress() {
		return false
	}

	if m.GetTotalErrorRequests() != target.GetTotalErrorRequests() {
		return false
	}

	if m.GetTotalIssuedRequests() != target.GetTotalIssuedRequests() {
		return false
	}

	if len(m.GetLoadMetricStats()) != len(target.GetLoadMetricStats()) {
		return false
	}
	for idx, v := range m.GetLoadMetricStats() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetLoadMetricStats()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetLoadMetricStats()[idx]) {
				return false
			}
		}

	}

	if len(m.GetUpstreamEndpointStats()) != len(target.GetUpstreamEndpointStats()) {
		return false
	}
	for idx, v := range m.GetUpstreamEndpointStats() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetUpstreamEndpointStats()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetUpstreamEndpointStats()[idx]) {
				return false
			}
		}

	}

	if m.GetPriority() != target.GetPriority() {
		return false
	}

	return true
}

// Equal function
func (m *UpstreamEndpointStats) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpstreamEndpointStats)
	if !ok {
		that2, ok := that.(UpstreamEndpointStats)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetAddress()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAddress()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAddress(), target.GetAddress()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
			return false
		}
	}

	if m.GetTotalSuccessfulRequests() != target.GetTotalSuccessfulRequests() {
		return false
	}

	if m.GetTotalRequestsInProgress() != target.GetTotalRequestsInProgress() {
		return false
	}

	if m.GetTotalErrorRequests() != target.GetTotalErrorRequests() {
		return false
	}

	if m.GetTotalIssuedRequests() != target.GetTotalIssuedRequests() {
		return false
	}

	if len(m.GetLoadMetricStats()) != len(target.GetLoadMetricStats()) {
		return false
	}
	for idx, v := range m.GetLoadMetricStats() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetLoadMetricStats()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetLoadMetricStats()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *EndpointLoadMetricStats) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*EndpointLoadMetricStats)
	if !ok {
		that2, ok := that.(EndpointLoadMetricStats)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetMetricName(), target.GetMetricName()) != 0 {
		return false
	}

	if m.GetNumRequestsFinishedWithMetric() != target.GetNumRequestsFinishedWithMetric() {
		return false
	}

	if m.GetTotalMetricValue() != target.GetTotalMetricValue() {
		return false
	}

	return true
}

// Equal function
func (m *ClusterStats) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ClusterStats)
	if !ok {
		that2, ok := that.(ClusterStats)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetClusterName(), target.GetClusterName()) != 0 {
		return false
	}

	if strings.Compare(m.GetClusterServiceName(), target.GetClusterServiceName()) != 0 {
		return false
	}

	if len(m.GetUpstreamLocalityStats()) != len(target.GetUpstreamLocalityStats()) {
		return false
	}
	for idx, v := range m.GetUpstreamLocalityStats() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetUpstreamLocalityStats()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetUpstreamLocalityStats()[idx]) {
				return false
			}
		}

	}

	if m.GetTotalDroppedRequests() != target.GetTotalDroppedRequests() {
		return false
	}

	if len(m.GetDroppedRequests()) != len(target.GetDroppedRequests()) {
		return false
	}
	for idx, v := range m.GetDroppedRequests() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetDroppedRequests()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetDroppedRequests()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetLoadReportInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLoadReportInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLoadReportInterval(), target.GetLoadReportInterval()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ClusterStats_DroppedRequests) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ClusterStats_DroppedRequests)
	if !ok {
		that2, ok := that.(ClusterStats_DroppedRequests)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetCategory(), target.GetCategory()) != 0 {
		return false
	}

	if m.GetDroppedCount() != target.GetDroppedCount() {
		return false
	}

	return true
}
