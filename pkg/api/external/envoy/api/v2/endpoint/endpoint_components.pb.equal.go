// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/endpoint/endpoint_components.proto

package endpoint

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"

	core "github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/core"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)

	_ = core.HealthStatus(0)
)

// Equal function
func (m *Endpoint) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Endpoint)
	if !ok {
		that2, ok := that.(Endpoint)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetAddress()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAddress()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAddress(), target.GetAddress()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetHealthCheckConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHealthCheckConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHealthCheckConfig(), target.GetHealthCheckConfig()) {
			return false
		}
	}

	if strings.Compare(m.GetHostname(), target.GetHostname()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *LbEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LbEndpoint)
	if !ok {
		that2, ok := that.(LbEndpoint)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetHealthStatus() != target.GetHealthStatus() {
		return false
	}

	if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetLoadBalancingWeight()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLoadBalancingWeight()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLoadBalancingWeight(), target.GetLoadBalancingWeight()) {
			return false
		}
	}

	switch m.HostIdentifier.(type) {

	case *LbEndpoint_Endpoint:

		if h, ok := interface{}(m.GetEndpoint()).(equality.Equalizer); ok {
			if !h.Equal(target.GetEndpoint()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetEndpoint(), target.GetEndpoint()) {
				return false
			}
		}

	case *LbEndpoint_EndpointName:

		if strings.Compare(m.GetEndpointName(), target.GetEndpointName()) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *LocalityLbEndpoints) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LocalityLbEndpoints)
	if !ok {
		that2, ok := that.(LocalityLbEndpoints)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetLocality()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLocality()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLocality(), target.GetLocality()) {
			return false
		}
	}

	if len(m.GetLbEndpoints()) != len(target.GetLbEndpoints()) {
		return false
	}
	for idx, v := range m.GetLbEndpoints() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetLbEndpoints()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetLbEndpoints()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetLoadBalancingWeight()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLoadBalancingWeight()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLoadBalancingWeight(), target.GetLoadBalancingWeight()) {
			return false
		}
	}

	if m.GetPriority() != target.GetPriority() {
		return false
	}

	if h, ok := interface{}(m.GetProximity()).(equality.Equalizer); ok {
		if !h.Equal(target.GetProximity()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetProximity(), target.GetProximity()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Endpoint_HealthCheckConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Endpoint_HealthCheckConfig)
	if !ok {
		that2, ok := that.(Endpoint_HealthCheckConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetPortValue() != target.GetPortValue() {
		return false
	}

	if strings.Compare(m.GetHostname(), target.GetHostname()) != 0 {
		return false
	}

	return true
}
