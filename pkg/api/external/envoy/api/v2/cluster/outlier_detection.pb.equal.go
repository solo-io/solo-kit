// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/cluster/outlier_detection.proto

package cluster

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *OutlierDetection) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*OutlierDetection)
	if !ok {
		that2, ok := that.(OutlierDetection)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetConsecutive_5Xx()).(equality.Equalizer); ok {
		if !h.Equal(target.GetConsecutive_5Xx()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetConsecutive_5Xx(), target.GetConsecutive_5Xx()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetInterval(), target.GetInterval()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetBaseEjectionTime()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBaseEjectionTime()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBaseEjectionTime(), target.GetBaseEjectionTime()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxEjectionPercent()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxEjectionPercent()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxEjectionPercent(), target.GetMaxEjectionPercent()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetEnforcingConsecutive_5Xx()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnforcingConsecutive_5Xx()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnforcingConsecutive_5Xx(), target.GetEnforcingConsecutive_5Xx()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetEnforcingSuccessRate()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnforcingSuccessRate()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnforcingSuccessRate(), target.GetEnforcingSuccessRate()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSuccessRateMinimumHosts()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSuccessRateMinimumHosts()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSuccessRateMinimumHosts(), target.GetSuccessRateMinimumHosts()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSuccessRateRequestVolume()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSuccessRateRequestVolume()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSuccessRateRequestVolume(), target.GetSuccessRateRequestVolume()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSuccessRateStdevFactor()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSuccessRateStdevFactor()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSuccessRateStdevFactor(), target.GetSuccessRateStdevFactor()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetConsecutiveGatewayFailure()).(equality.Equalizer); ok {
		if !h.Equal(target.GetConsecutiveGatewayFailure()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetConsecutiveGatewayFailure(), target.GetConsecutiveGatewayFailure()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetEnforcingConsecutiveGatewayFailure()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnforcingConsecutiveGatewayFailure()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnforcingConsecutiveGatewayFailure(), target.GetEnforcingConsecutiveGatewayFailure()) {
			return false
		}
	}

	if m.GetSplitExternalLocalOriginErrors() != target.GetSplitExternalLocalOriginErrors() {
		return false
	}

	if h, ok := interface{}(m.GetConsecutiveLocalOriginFailure()).(equality.Equalizer); ok {
		if !h.Equal(target.GetConsecutiveLocalOriginFailure()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetConsecutiveLocalOriginFailure(), target.GetConsecutiveLocalOriginFailure()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetEnforcingConsecutiveLocalOriginFailure()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnforcingConsecutiveLocalOriginFailure()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnforcingConsecutiveLocalOriginFailure(), target.GetEnforcingConsecutiveLocalOriginFailure()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetEnforcingLocalOriginSuccessRate()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnforcingLocalOriginSuccessRate()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnforcingLocalOriginSuccessRate(), target.GetEnforcingLocalOriginSuccessRate()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetFailurePercentageThreshold()).(equality.Equalizer); ok {
		if !h.Equal(target.GetFailurePercentageThreshold()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetFailurePercentageThreshold(), target.GetFailurePercentageThreshold()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetEnforcingFailurePercentage()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnforcingFailurePercentage()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnforcingFailurePercentage(), target.GetEnforcingFailurePercentage()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetEnforcingFailurePercentageLocalOrigin()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnforcingFailurePercentageLocalOrigin()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnforcingFailurePercentageLocalOrigin(), target.GetEnforcingFailurePercentageLocalOrigin()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetFailurePercentageMinimumHosts()).(equality.Equalizer); ok {
		if !h.Equal(target.GetFailurePercentageMinimumHosts()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetFailurePercentageMinimumHosts(), target.GetFailurePercentageMinimumHosts()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetFailurePercentageRequestVolume()).(equality.Equalizer); ok {
		if !h.Equal(target.GetFailurePercentageRequestVolume()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetFailurePercentageRequestVolume(), target.GetFailurePercentageRequestVolume()) {
			return false
		}
	}

	return true
}
