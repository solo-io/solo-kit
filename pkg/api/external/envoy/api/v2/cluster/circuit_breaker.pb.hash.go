// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/cluster/circuit_breaker.proto

package cluster

import (
	"encoding/binary"
	"errors"
	"fmt"
	"hash"
	"hash/fnv"

	"github.com/mitchellh/hashstructure"
	safe_hasher "github.com/solo-io/protoc-gen-ext/pkg/hasher"

	core "github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/core"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = new(hash.Hash64)
	_ = fnv.New64
	_ = hashstructure.Hash
	_ = new(safe_hasher.SafeHasher)

	_ = core.RoutingPriority(0)
)

// Hash function
func (m *CircuitBreakers) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("solo.io.envoy.api.v2.cluster.github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/cluster.CircuitBreakers")); err != nil {
		return 0, err
	}

	for _, v := range m.GetThresholds() {

		if h, ok := interface{}(v).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(v, nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *CircuitBreakers_Thresholds) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("solo.io.envoy.api.v2.cluster.github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/cluster.CircuitBreakers_Thresholds")); err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetPriority())
	if err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetMaxConnections()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("MaxConnections")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetMaxConnections(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("MaxConnections")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetMaxPendingRequests()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("MaxPendingRequests")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetMaxPendingRequests(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("MaxPendingRequests")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetMaxRequests()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("MaxRequests")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetMaxRequests(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("MaxRequests")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetMaxRetries()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("MaxRetries")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetMaxRetries(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("MaxRetries")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetRetryBudget()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("RetryBudget")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRetryBudget(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("RetryBudget")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetTrackRemaining())
	if err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetMaxConnectionPools()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("MaxConnectionPools")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetMaxConnectionPools(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("MaxConnectionPools")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *CircuitBreakers_Thresholds_RetryBudget) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("solo.io.envoy.api.v2.cluster.github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/cluster.CircuitBreakers_Thresholds_RetryBudget")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetBudgetPercent()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("BudgetPercent")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetBudgetPercent(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("BudgetPercent")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetMinRetryConcurrency()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("MinRetryConcurrency")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetMinRetryConcurrency(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("MinRetryConcurrency")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}
