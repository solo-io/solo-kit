// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/cluster/circuit_breaker.proto

package cluster

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"

	core "github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/core"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)

	_ = core.RoutingPriority(0)
)

// Equal function
func (m *CircuitBreakers) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CircuitBreakers)
	if !ok {
		that2, ok := that.(CircuitBreakers)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetThresholds()) != len(target.GetThresholds()) {
		return false
	}
	for idx, v := range m.GetThresholds() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetThresholds()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetThresholds()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *CircuitBreakers_Thresholds) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CircuitBreakers_Thresholds)
	if !ok {
		that2, ok := that.(CircuitBreakers_Thresholds)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetPriority() != target.GetPriority() {
		return false
	}

	if h, ok := interface{}(m.GetMaxConnections()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxConnections()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxConnections(), target.GetMaxConnections()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxPendingRequests()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxPendingRequests()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxPendingRequests(), target.GetMaxPendingRequests()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxRequests()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxRequests()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxRequests(), target.GetMaxRequests()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxRetries()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxRetries()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxRetries(), target.GetMaxRetries()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRetryBudget()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRetryBudget()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRetryBudget(), target.GetRetryBudget()) {
			return false
		}
	}

	if m.GetTrackRemaining() != target.GetTrackRemaining() {
		return false
	}

	if h, ok := interface{}(m.GetMaxConnectionPools()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxConnectionPools()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxConnectionPools(), target.GetMaxConnectionPools()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *CircuitBreakers_Thresholds_RetryBudget) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CircuitBreakers_Thresholds_RetryBudget)
	if !ok {
		that2, ok := that.(CircuitBreakers_Thresholds_RetryBudget)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetBudgetPercent()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBudgetPercent()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBudgetPercent(), target.GetBudgetPercent()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMinRetryConcurrency()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMinRetryConcurrency()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMinRetryConcurrency(), target.GetMinRetryConcurrency()) {
			return false
		}
	}

	return true
}
