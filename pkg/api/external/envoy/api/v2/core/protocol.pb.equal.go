// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/core/protocol.proto

package core

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *TcpProtocolOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*TcpProtocolOptions)
	if !ok {
		that2, ok := that.(TcpProtocolOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *UpstreamHttpProtocolOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpstreamHttpProtocolOptions)
	if !ok {
		that2, ok := that.(UpstreamHttpProtocolOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetAutoSni() != target.GetAutoSni() {
		return false
	}

	if m.GetAutoSanValidation() != target.GetAutoSanValidation() {
		return false
	}

	return true
}

// Equal function
func (m *HttpProtocolOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HttpProtocolOptions)
	if !ok {
		that2, ok := that.(HttpProtocolOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetIdleTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetIdleTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetIdleTimeout(), target.GetIdleTimeout()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxConnectionDuration()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxConnectionDuration()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxConnectionDuration(), target.GetMaxConnectionDuration()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxHeadersCount()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxHeadersCount()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxHeadersCount(), target.GetMaxHeadersCount()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxStreamDuration()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxStreamDuration()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxStreamDuration(), target.GetMaxStreamDuration()) {
			return false
		}
	}

	if m.GetHeadersWithUnderscoresAction() != target.GetHeadersWithUnderscoresAction() {
		return false
	}

	return true
}

// Equal function
func (m *Http1ProtocolOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Http1ProtocolOptions)
	if !ok {
		that2, ok := that.(Http1ProtocolOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetAllowAbsoluteUrl()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAllowAbsoluteUrl()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAllowAbsoluteUrl(), target.GetAllowAbsoluteUrl()) {
			return false
		}
	}

	if m.GetAcceptHttp_10() != target.GetAcceptHttp_10() {
		return false
	}

	if strings.Compare(m.GetDefaultHostForHttp_10(), target.GetDefaultHostForHttp_10()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetHeaderKeyFormat()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHeaderKeyFormat()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHeaderKeyFormat(), target.GetHeaderKeyFormat()) {
			return false
		}
	}

	if m.GetEnableTrailers() != target.GetEnableTrailers() {
		return false
	}

	return true
}

// Equal function
func (m *Http2ProtocolOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Http2ProtocolOptions)
	if !ok {
		that2, ok := that.(Http2ProtocolOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetHpackTableSize()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHpackTableSize()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHpackTableSize(), target.GetHpackTableSize()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxConcurrentStreams()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxConcurrentStreams()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxConcurrentStreams(), target.GetMaxConcurrentStreams()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetInitialStreamWindowSize()).(equality.Equalizer); ok {
		if !h.Equal(target.GetInitialStreamWindowSize()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetInitialStreamWindowSize(), target.GetInitialStreamWindowSize()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetInitialConnectionWindowSize()).(equality.Equalizer); ok {
		if !h.Equal(target.GetInitialConnectionWindowSize()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetInitialConnectionWindowSize(), target.GetInitialConnectionWindowSize()) {
			return false
		}
	}

	if m.GetAllowConnect() != target.GetAllowConnect() {
		return false
	}

	if m.GetAllowMetadata() != target.GetAllowMetadata() {
		return false
	}

	if h, ok := interface{}(m.GetMaxOutboundFrames()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxOutboundFrames()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxOutboundFrames(), target.GetMaxOutboundFrames()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxOutboundControlFrames()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxOutboundControlFrames()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxOutboundControlFrames(), target.GetMaxOutboundControlFrames()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxConsecutiveInboundFramesWithEmptyPayload()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxConsecutiveInboundFramesWithEmptyPayload()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxConsecutiveInboundFramesWithEmptyPayload(), target.GetMaxConsecutiveInboundFramesWithEmptyPayload()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxInboundPriorityFramesPerStream()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxInboundPriorityFramesPerStream()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxInboundPriorityFramesPerStream(), target.GetMaxInboundPriorityFramesPerStream()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxInboundWindowUpdateFramesPerDataFrameSent()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxInboundWindowUpdateFramesPerDataFrameSent()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxInboundWindowUpdateFramesPerDataFrameSent(), target.GetMaxInboundWindowUpdateFramesPerDataFrameSent()) {
			return false
		}
	}

	if m.GetStreamErrorOnInvalidHttpMessaging() != target.GetStreamErrorOnInvalidHttpMessaging() {
		return false
	}

	if len(m.GetCustomSettingsParameters()) != len(target.GetCustomSettingsParameters()) {
		return false
	}
	for idx, v := range m.GetCustomSettingsParameters() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetCustomSettingsParameters()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetCustomSettingsParameters()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *GrpcProtocolOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GrpcProtocolOptions)
	if !ok {
		that2, ok := that.(GrpcProtocolOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetHttp2ProtocolOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHttp2ProtocolOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHttp2ProtocolOptions(), target.GetHttp2ProtocolOptions()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Http1ProtocolOptions_HeaderKeyFormat) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Http1ProtocolOptions_HeaderKeyFormat)
	if !ok {
		that2, ok := that.(Http1ProtocolOptions_HeaderKeyFormat)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.HeaderFormat.(type) {

	case *Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords_:

		if h, ok := interface{}(m.GetProperCaseWords()).(equality.Equalizer); ok {
			if !h.Equal(target.GetProperCaseWords()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetProperCaseWords(), target.GetProperCaseWords()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords)
	if !ok {
		that2, ok := that.(Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *Http2ProtocolOptions_SettingsParameter) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Http2ProtocolOptions_SettingsParameter)
	if !ok {
		that2, ok := that.(Http2ProtocolOptions_SettingsParameter)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetIdentifier()).(equality.Equalizer); ok {
		if !h.Equal(target.GetIdentifier()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetIdentifier(), target.GetIdentifier()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetValue(), target.GetValue()) {
			return false
		}
	}

	return true
}
