// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/core/config_source.proto

package core

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *ApiConfigSource) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiConfigSource)
	if !ok {
		that2, ok := that.(ApiConfigSource)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetApiType() != target.GetApiType() {
		return false
	}

	if m.GetTransportApiVersion() != target.GetTransportApiVersion() {
		return false
	}

	if len(m.GetClusterNames()) != len(target.GetClusterNames()) {
		return false
	}
	for idx, v := range m.GetClusterNames() {

		if strings.Compare(v, target.GetClusterNames()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetGrpcServices()) != len(target.GetGrpcServices()) {
		return false
	}
	for idx, v := range m.GetGrpcServices() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetGrpcServices()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetGrpcServices()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetRefreshDelay()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRefreshDelay()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRefreshDelay(), target.GetRefreshDelay()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRequestTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequestTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequestTimeout(), target.GetRequestTimeout()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRateLimitSettings()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRateLimitSettings()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRateLimitSettings(), target.GetRateLimitSettings()) {
			return false
		}
	}

	if m.GetSetNodeOnFirstMessageOnly() != target.GetSetNodeOnFirstMessageOnly() {
		return false
	}

	return true
}

// Equal function
func (m *AggregatedConfigSource) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AggregatedConfigSource)
	if !ok {
		that2, ok := that.(AggregatedConfigSource)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *SelfConfigSource) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SelfConfigSource)
	if !ok {
		that2, ok := that.(SelfConfigSource)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetTransportApiVersion() != target.GetTransportApiVersion() {
		return false
	}

	return true
}

// Equal function
func (m *RateLimitSettings) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimitSettings)
	if !ok {
		that2, ok := that.(RateLimitSettings)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMaxTokens()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxTokens()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxTokens(), target.GetMaxTokens()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetFillRate()).(equality.Equalizer); ok {
		if !h.Equal(target.GetFillRate()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetFillRate(), target.GetFillRate()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ConfigSource) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ConfigSource)
	if !ok {
		that2, ok := that.(ConfigSource)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetInitialFetchTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetInitialFetchTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetInitialFetchTimeout(), target.GetInitialFetchTimeout()) {
			return false
		}
	}

	if m.GetResourceApiVersion() != target.GetResourceApiVersion() {
		return false
	}

	switch m.ConfigSourceSpecifier.(type) {

	case *ConfigSource_Path:
		if _, ok := target.ConfigSourceSpecifier.(*ConfigSource_Path); !ok {
			return false
		}

		if strings.Compare(m.GetPath(), target.GetPath()) != 0 {
			return false
		}

	case *ConfigSource_ApiConfigSource:
		if _, ok := target.ConfigSourceSpecifier.(*ConfigSource_ApiConfigSource); !ok {
			return false
		}

		if h, ok := interface{}(m.GetApiConfigSource()).(equality.Equalizer); ok {
			if !h.Equal(target.GetApiConfigSource()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetApiConfigSource(), target.GetApiConfigSource()) {
				return false
			}
		}

	case *ConfigSource_Ads:
		if _, ok := target.ConfigSourceSpecifier.(*ConfigSource_Ads); !ok {
			return false
		}

		if h, ok := interface{}(m.GetAds()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAds()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAds(), target.GetAds()) {
				return false
			}
		}

	case *ConfigSource_Self:
		if _, ok := target.ConfigSourceSpecifier.(*ConfigSource_Self); !ok {
			return false
		}

		if h, ok := interface{}(m.GetSelf()).(equality.Equalizer); ok {
			if !h.Equal(target.GetSelf()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetSelf(), target.GetSelf()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ConfigSourceSpecifier != target.ConfigSourceSpecifier {
			return false
		}
	}

	return true
}
