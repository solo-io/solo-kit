// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/route/route_components.proto

package route

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"

	core "github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/core"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)

	_ = core.RoutingPriority(0)

	_ = core.RequestMethod(0)
)

// Equal function
func (m *VirtualHost) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*VirtualHost)
	if !ok {
		that2, ok := that.(VirtualHost)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if len(m.GetDomains()) != len(target.GetDomains()) {
		return false
	}
	for idx, v := range m.GetDomains() {

		if strings.Compare(v, target.GetDomains()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetRoutes()) != len(target.GetRoutes()) {
		return false
	}
	for idx, v := range m.GetRoutes() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRoutes()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRoutes()[idx]) {
				return false
			}
		}

	}

	if m.GetRequireTls() != target.GetRequireTls() {
		return false
	}

	if len(m.GetVirtualClusters()) != len(target.GetVirtualClusters()) {
		return false
	}
	for idx, v := range m.GetVirtualClusters() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetVirtualClusters()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetVirtualClusters()[idx]) {
				return false
			}
		}

	}

	if len(m.GetRateLimits()) != len(target.GetRateLimits()) {
		return false
	}
	for idx, v := range m.GetRateLimits() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRateLimits()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRateLimits()[idx]) {
				return false
			}
		}

	}

	if len(m.GetRequestHeadersToAdd()) != len(target.GetRequestHeadersToAdd()) {
		return false
	}
	for idx, v := range m.GetRequestHeadersToAdd() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRequestHeadersToAdd()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRequestHeadersToAdd()[idx]) {
				return false
			}
		}

	}

	if len(m.GetRequestHeadersToRemove()) != len(target.GetRequestHeadersToRemove()) {
		return false
	}
	for idx, v := range m.GetRequestHeadersToRemove() {

		if strings.Compare(v, target.GetRequestHeadersToRemove()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetResponseHeadersToAdd()) != len(target.GetResponseHeadersToAdd()) {
		return false
	}
	for idx, v := range m.GetResponseHeadersToAdd() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetResponseHeadersToAdd()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetResponseHeadersToAdd()[idx]) {
				return false
			}
		}

	}

	if len(m.GetResponseHeadersToRemove()) != len(target.GetResponseHeadersToRemove()) {
		return false
	}
	for idx, v := range m.GetResponseHeadersToRemove() {

		if strings.Compare(v, target.GetResponseHeadersToRemove()[idx]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetCors()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCors()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCors(), target.GetCors()) {
			return false
		}
	}

	if len(m.GetPerFilterConfig()) != len(target.GetPerFilterConfig()) {
		return false
	}
	for k, v := range m.GetPerFilterConfig() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPerFilterConfig()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPerFilterConfig()[k]) {
				return false
			}
		}

	}

	if len(m.GetTypedPerFilterConfig()) != len(target.GetTypedPerFilterConfig()) {
		return false
	}
	for k, v := range m.GetTypedPerFilterConfig() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetTypedPerFilterConfig()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetTypedPerFilterConfig()[k]) {
				return false
			}
		}

	}

	if m.GetIncludeRequestAttemptCount() != target.GetIncludeRequestAttemptCount() {
		return false
	}

	if m.GetIncludeAttemptCountInResponse() != target.GetIncludeAttemptCountInResponse() {
		return false
	}

	if h, ok := interface{}(m.GetRetryPolicy()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRetryPolicy()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRetryPolicy(), target.GetRetryPolicy()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRetryPolicyTypedConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRetryPolicyTypedConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRetryPolicyTypedConfig(), target.GetRetryPolicyTypedConfig()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetHedgePolicy()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHedgePolicy()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHedgePolicy(), target.GetHedgePolicy()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPerRequestBufferLimitBytes()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPerRequestBufferLimitBytes()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPerRequestBufferLimitBytes(), target.GetPerRequestBufferLimitBytes()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *FilterAction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*FilterAction)
	if !ok {
		that2, ok := that.(FilterAction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetAction()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAction()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAction(), target.GetAction()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Route) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Route)
	if !ok {
		that2, ok := that.(Route)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetMatch()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMatch()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMatch(), target.GetMatch()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDecorator()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDecorator()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDecorator(), target.GetDecorator()) {
			return false
		}
	}

	if len(m.GetPerFilterConfig()) != len(target.GetPerFilterConfig()) {
		return false
	}
	for k, v := range m.GetPerFilterConfig() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPerFilterConfig()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPerFilterConfig()[k]) {
				return false
			}
		}

	}

	if len(m.GetTypedPerFilterConfig()) != len(target.GetTypedPerFilterConfig()) {
		return false
	}
	for k, v := range m.GetTypedPerFilterConfig() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetTypedPerFilterConfig()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetTypedPerFilterConfig()[k]) {
				return false
			}
		}

	}

	if len(m.GetRequestHeadersToAdd()) != len(target.GetRequestHeadersToAdd()) {
		return false
	}
	for idx, v := range m.GetRequestHeadersToAdd() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRequestHeadersToAdd()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRequestHeadersToAdd()[idx]) {
				return false
			}
		}

	}

	if len(m.GetRequestHeadersToRemove()) != len(target.GetRequestHeadersToRemove()) {
		return false
	}
	for idx, v := range m.GetRequestHeadersToRemove() {

		if strings.Compare(v, target.GetRequestHeadersToRemove()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetResponseHeadersToAdd()) != len(target.GetResponseHeadersToAdd()) {
		return false
	}
	for idx, v := range m.GetResponseHeadersToAdd() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetResponseHeadersToAdd()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetResponseHeadersToAdd()[idx]) {
				return false
			}
		}

	}

	if len(m.GetResponseHeadersToRemove()) != len(target.GetResponseHeadersToRemove()) {
		return false
	}
	for idx, v := range m.GetResponseHeadersToRemove() {

		if strings.Compare(v, target.GetResponseHeadersToRemove()[idx]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetTracing()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTracing()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTracing(), target.GetTracing()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPerRequestBufferLimitBytes()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPerRequestBufferLimitBytes()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPerRequestBufferLimitBytes(), target.GetPerRequestBufferLimitBytes()) {
			return false
		}
	}

	switch m.Action.(type) {

	case *Route_Route:

		if h, ok := interface{}(m.GetRoute()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRoute()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRoute(), target.GetRoute()) {
				return false
			}
		}

	case *Route_Redirect:

		if h, ok := interface{}(m.GetRedirect()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRedirect()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRedirect(), target.GetRedirect()) {
				return false
			}
		}

	case *Route_DirectResponse:

		if h, ok := interface{}(m.GetDirectResponse()).(equality.Equalizer); ok {
			if !h.Equal(target.GetDirectResponse()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetDirectResponse(), target.GetDirectResponse()) {
				return false
			}
		}

	case *Route_FilterAction:

		if h, ok := interface{}(m.GetFilterAction()).(equality.Equalizer); ok {
			if !h.Equal(target.GetFilterAction()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetFilterAction(), target.GetFilterAction()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *WeightedCluster) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WeightedCluster)
	if !ok {
		that2, ok := that.(WeightedCluster)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetClusters()) != len(target.GetClusters()) {
		return false
	}
	for idx, v := range m.GetClusters() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetClusters()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetClusters()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetTotalWeight()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTotalWeight()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTotalWeight(), target.GetTotalWeight()) {
			return false
		}
	}

	if strings.Compare(m.GetRuntimeKeyPrefix(), target.GetRuntimeKeyPrefix()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *RouteMatch) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteMatch)
	if !ok {
		that2, ok := that.(RouteMatch)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCaseSensitive()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCaseSensitive()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCaseSensitive(), target.GetCaseSensitive()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRuntimeFraction()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRuntimeFraction()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRuntimeFraction(), target.GetRuntimeFraction()) {
			return false
		}
	}

	if len(m.GetHeaders()) != len(target.GetHeaders()) {
		return false
	}
	for idx, v := range m.GetHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHeaders()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHeaders()[idx]) {
				return false
			}
		}

	}

	if len(m.GetQueryParameters()) != len(target.GetQueryParameters()) {
		return false
	}
	for idx, v := range m.GetQueryParameters() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetQueryParameters()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetQueryParameters()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetGrpc()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGrpc()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGrpc(), target.GetGrpc()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTlsContext()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTlsContext()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTlsContext(), target.GetTlsContext()) {
			return false
		}
	}

	switch m.PathSpecifier.(type) {

	case *RouteMatch_Prefix:

		if strings.Compare(m.GetPrefix(), target.GetPrefix()) != 0 {
			return false
		}

	case *RouteMatch_Path:

		if strings.Compare(m.GetPath(), target.GetPath()) != 0 {
			return false
		}

	case *RouteMatch_Regex:

		if strings.Compare(m.GetRegex(), target.GetRegex()) != 0 {
			return false
		}

	case *RouteMatch_SafeRegex:

		if h, ok := interface{}(m.GetSafeRegex()).(equality.Equalizer); ok {
			if !h.Equal(target.GetSafeRegex()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetSafeRegex(), target.GetSafeRegex()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *CorsPolicy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CorsPolicy)
	if !ok {
		that2, ok := that.(CorsPolicy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetAllowOrigin()) != len(target.GetAllowOrigin()) {
		return false
	}
	for idx, v := range m.GetAllowOrigin() {

		if strings.Compare(v, target.GetAllowOrigin()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetAllowOriginRegex()) != len(target.GetAllowOriginRegex()) {
		return false
	}
	for idx, v := range m.GetAllowOriginRegex() {

		if strings.Compare(v, target.GetAllowOriginRegex()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetAllowOriginStringMatch()) != len(target.GetAllowOriginStringMatch()) {
		return false
	}
	for idx, v := range m.GetAllowOriginStringMatch() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetAllowOriginStringMatch()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetAllowOriginStringMatch()[idx]) {
				return false
			}
		}

	}

	if strings.Compare(m.GetAllowMethods(), target.GetAllowMethods()) != 0 {
		return false
	}

	if strings.Compare(m.GetAllowHeaders(), target.GetAllowHeaders()) != 0 {
		return false
	}

	if strings.Compare(m.GetExposeHeaders(), target.GetExposeHeaders()) != 0 {
		return false
	}

	if strings.Compare(m.GetMaxAge(), target.GetMaxAge()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetAllowCredentials()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAllowCredentials()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAllowCredentials(), target.GetAllowCredentials()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetShadowEnabled()).(equality.Equalizer); ok {
		if !h.Equal(target.GetShadowEnabled()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetShadowEnabled(), target.GetShadowEnabled()) {
			return false
		}
	}

	switch m.EnabledSpecifier.(type) {

	case *CorsPolicy_Enabled:

		if h, ok := interface{}(m.GetEnabled()).(equality.Equalizer); ok {
			if !h.Equal(target.GetEnabled()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetEnabled(), target.GetEnabled()) {
				return false
			}
		}

	case *CorsPolicy_FilterEnabled:

		if h, ok := interface{}(m.GetFilterEnabled()).(equality.Equalizer); ok {
			if !h.Equal(target.GetFilterEnabled()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetFilterEnabled(), target.GetFilterEnabled()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *RouteAction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteAction)
	if !ok {
		that2, ok := that.(RouteAction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetClusterNotFoundResponseCode() != target.GetClusterNotFoundResponseCode() {
		return false
	}

	if h, ok := interface{}(m.GetMetadataMatch()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadataMatch()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadataMatch(), target.GetMetadataMatch()) {
			return false
		}
	}

	if strings.Compare(m.GetPrefixRewrite(), target.GetPrefixRewrite()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetRegexRewrite()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRegexRewrite()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRegexRewrite(), target.GetRegexRewrite()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTimeout(), target.GetTimeout()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetIdleTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetIdleTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetIdleTimeout(), target.GetIdleTimeout()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRetryPolicy()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRetryPolicy()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRetryPolicy(), target.GetRetryPolicy()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRetryPolicyTypedConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRetryPolicyTypedConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRetryPolicyTypedConfig(), target.GetRetryPolicyTypedConfig()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRequestMirrorPolicy()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequestMirrorPolicy()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequestMirrorPolicy(), target.GetRequestMirrorPolicy()) {
			return false
		}
	}

	if len(m.GetRequestMirrorPolicies()) != len(target.GetRequestMirrorPolicies()) {
		return false
	}
	for idx, v := range m.GetRequestMirrorPolicies() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRequestMirrorPolicies()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRequestMirrorPolicies()[idx]) {
				return false
			}
		}

	}

	if m.GetPriority() != target.GetPriority() {
		return false
	}

	if len(m.GetRateLimits()) != len(target.GetRateLimits()) {
		return false
	}
	for idx, v := range m.GetRateLimits() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRateLimits()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRateLimits()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetIncludeVhRateLimits()).(equality.Equalizer); ok {
		if !h.Equal(target.GetIncludeVhRateLimits()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetIncludeVhRateLimits(), target.GetIncludeVhRateLimits()) {
			return false
		}
	}

	if len(m.GetHashPolicy()) != len(target.GetHashPolicy()) {
		return false
	}
	for idx, v := range m.GetHashPolicy() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHashPolicy()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHashPolicy()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetCors()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCors()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCors(), target.GetCors()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxGrpcTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxGrpcTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxGrpcTimeout(), target.GetMaxGrpcTimeout()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetGrpcTimeoutOffset()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGrpcTimeoutOffset()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGrpcTimeoutOffset(), target.GetGrpcTimeoutOffset()) {
			return false
		}
	}

	if len(m.GetUpgradeConfigs()) != len(target.GetUpgradeConfigs()) {
		return false
	}
	for idx, v := range m.GetUpgradeConfigs() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetUpgradeConfigs()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetUpgradeConfigs()[idx]) {
				return false
			}
		}

	}

	if m.GetInternalRedirectAction() != target.GetInternalRedirectAction() {
		return false
	}

	if h, ok := interface{}(m.GetMaxInternalRedirects()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxInternalRedirects()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxInternalRedirects(), target.GetMaxInternalRedirects()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetHedgePolicy()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHedgePolicy()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHedgePolicy(), target.GetHedgePolicy()) {
			return false
		}
	}

	switch m.ClusterSpecifier.(type) {

	case *RouteAction_Cluster:

		if strings.Compare(m.GetCluster(), target.GetCluster()) != 0 {
			return false
		}

	case *RouteAction_ClusterHeader:

		if strings.Compare(m.GetClusterHeader(), target.GetClusterHeader()) != 0 {
			return false
		}

	case *RouteAction_WeightedClusters:

		if h, ok := interface{}(m.GetWeightedClusters()).(equality.Equalizer); ok {
			if !h.Equal(target.GetWeightedClusters()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetWeightedClusters(), target.GetWeightedClusters()) {
				return false
			}
		}

	}

	switch m.HostRewriteSpecifier.(type) {

	case *RouteAction_HostRewrite:

		if strings.Compare(m.GetHostRewrite(), target.GetHostRewrite()) != 0 {
			return false
		}

	case *RouteAction_AutoHostRewrite:

		if h, ok := interface{}(m.GetAutoHostRewrite()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAutoHostRewrite()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAutoHostRewrite(), target.GetAutoHostRewrite()) {
				return false
			}
		}

	case *RouteAction_AutoHostRewriteHeader:

		if strings.Compare(m.GetAutoHostRewriteHeader(), target.GetAutoHostRewriteHeader()) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *RetryPolicy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RetryPolicy)
	if !ok {
		that2, ok := that.(RetryPolicy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetRetryOn(), target.GetRetryOn()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetNumRetries()).(equality.Equalizer); ok {
		if !h.Equal(target.GetNumRetries()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetNumRetries(), target.GetNumRetries()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPerTryTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPerTryTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPerTryTimeout(), target.GetPerTryTimeout()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRetryPriority()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRetryPriority()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRetryPriority(), target.GetRetryPriority()) {
			return false
		}
	}

	if len(m.GetRetryHostPredicate()) != len(target.GetRetryHostPredicate()) {
		return false
	}
	for idx, v := range m.GetRetryHostPredicate() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRetryHostPredicate()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRetryHostPredicate()[idx]) {
				return false
			}
		}

	}

	if m.GetHostSelectionRetryMaxAttempts() != target.GetHostSelectionRetryMaxAttempts() {
		return false
	}

	if len(m.GetRetriableStatusCodes()) != len(target.GetRetriableStatusCodes()) {
		return false
	}
	for idx, v := range m.GetRetriableStatusCodes() {

		if v != target.GetRetriableStatusCodes()[idx] {
			return false
		}

	}

	if h, ok := interface{}(m.GetRetryBackOff()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRetryBackOff()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRetryBackOff(), target.GetRetryBackOff()) {
			return false
		}
	}

	if len(m.GetRetriableHeaders()) != len(target.GetRetriableHeaders()) {
		return false
	}
	for idx, v := range m.GetRetriableHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRetriableHeaders()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRetriableHeaders()[idx]) {
				return false
			}
		}

	}

	if len(m.GetRetriableRequestHeaders()) != len(target.GetRetriableRequestHeaders()) {
		return false
	}
	for idx, v := range m.GetRetriableRequestHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRetriableRequestHeaders()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRetriableRequestHeaders()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *HedgePolicy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HedgePolicy)
	if !ok {
		that2, ok := that.(HedgePolicy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetInitialRequests()).(equality.Equalizer); ok {
		if !h.Equal(target.GetInitialRequests()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetInitialRequests(), target.GetInitialRequests()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetAdditionalRequestChance()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAdditionalRequestChance()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAdditionalRequestChance(), target.GetAdditionalRequestChance()) {
			return false
		}
	}

	if m.GetHedgeOnPerTryTimeout() != target.GetHedgeOnPerTryTimeout() {
		return false
	}

	return true
}

// Equal function
func (m *RedirectAction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RedirectAction)
	if !ok {
		that2, ok := that.(RedirectAction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetHostRedirect(), target.GetHostRedirect()) != 0 {
		return false
	}

	if m.GetPortRedirect() != target.GetPortRedirect() {
		return false
	}

	if m.GetResponseCode() != target.GetResponseCode() {
		return false
	}

	if m.GetStripQuery() != target.GetStripQuery() {
		return false
	}

	switch m.SchemeRewriteSpecifier.(type) {

	case *RedirectAction_HttpsRedirect:

		if m.GetHttpsRedirect() != target.GetHttpsRedirect() {
			return false
		}

	case *RedirectAction_SchemeRedirect:

		if strings.Compare(m.GetSchemeRedirect(), target.GetSchemeRedirect()) != 0 {
			return false
		}

	}

	switch m.PathRewriteSpecifier.(type) {

	case *RedirectAction_PathRedirect:

		if strings.Compare(m.GetPathRedirect(), target.GetPathRedirect()) != 0 {
			return false
		}

	case *RedirectAction_PrefixRewrite:

		if strings.Compare(m.GetPrefixRewrite(), target.GetPrefixRewrite()) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *DirectResponseAction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DirectResponseAction)
	if !ok {
		that2, ok := that.(DirectResponseAction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetStatus() != target.GetStatus() {
		return false
	}

	if h, ok := interface{}(m.GetBody()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBody()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBody(), target.GetBody()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Decorator) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Decorator)
	if !ok {
		that2, ok := that.(Decorator)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetOperation(), target.GetOperation()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetPropagate()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPropagate()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPropagate(), target.GetPropagate()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Tracing) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Tracing)
	if !ok {
		that2, ok := that.(Tracing)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetClientSampling()).(equality.Equalizer); ok {
		if !h.Equal(target.GetClientSampling()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetClientSampling(), target.GetClientSampling()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRandomSampling()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRandomSampling()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRandomSampling(), target.GetRandomSampling()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetOverallSampling()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOverallSampling()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOverallSampling(), target.GetOverallSampling()) {
			return false
		}
	}

	if len(m.GetCustomTags()) != len(target.GetCustomTags()) {
		return false
	}
	for idx, v := range m.GetCustomTags() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetCustomTags()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetCustomTags()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *VirtualCluster) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*VirtualCluster)
	if !ok {
		that2, ok := that.(VirtualCluster)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetPattern(), target.GetPattern()) != 0 {
		return false
	}

	if len(m.GetHeaders()) != len(target.GetHeaders()) {
		return false
	}
	for idx, v := range m.GetHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHeaders()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHeaders()[idx]) {
				return false
			}
		}

	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if m.GetMethod() != target.GetMethod() {
		return false
	}

	return true
}

// Equal function
func (m *RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimit)
	if !ok {
		that2, ok := that.(RateLimit)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetStage()).(equality.Equalizer); ok {
		if !h.Equal(target.GetStage()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetStage(), target.GetStage()) {
			return false
		}
	}

	if strings.Compare(m.GetDisableKey(), target.GetDisableKey()) != 0 {
		return false
	}

	if len(m.GetActions()) != len(target.GetActions()) {
		return false
	}
	for idx, v := range m.GetActions() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetActions()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetActions()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *HeaderMatcher) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HeaderMatcher)
	if !ok {
		that2, ok := that.(HeaderMatcher)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if m.GetInvertMatch() != target.GetInvertMatch() {
		return false
	}

	switch m.HeaderMatchSpecifier.(type) {

	case *HeaderMatcher_ExactMatch:

		if strings.Compare(m.GetExactMatch(), target.GetExactMatch()) != 0 {
			return false
		}

	case *HeaderMatcher_RegexMatch:

		if strings.Compare(m.GetRegexMatch(), target.GetRegexMatch()) != 0 {
			return false
		}

	case *HeaderMatcher_SafeRegexMatch:

		if h, ok := interface{}(m.GetSafeRegexMatch()).(equality.Equalizer); ok {
			if !h.Equal(target.GetSafeRegexMatch()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetSafeRegexMatch(), target.GetSafeRegexMatch()) {
				return false
			}
		}

	case *HeaderMatcher_RangeMatch:

		if h, ok := interface{}(m.GetRangeMatch()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRangeMatch()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRangeMatch(), target.GetRangeMatch()) {
				return false
			}
		}

	case *HeaderMatcher_PresentMatch:

		if m.GetPresentMatch() != target.GetPresentMatch() {
			return false
		}

	case *HeaderMatcher_PrefixMatch:

		if strings.Compare(m.GetPrefixMatch(), target.GetPrefixMatch()) != 0 {
			return false
		}

	case *HeaderMatcher_SuffixMatch:

		if strings.Compare(m.GetSuffixMatch(), target.GetSuffixMatch()) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *QueryParameterMatcher) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*QueryParameterMatcher)
	if !ok {
		that2, ok := that.(QueryParameterMatcher)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetValue(), target.GetValue()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetRegex()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRegex()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRegex(), target.GetRegex()) {
			return false
		}
	}

	switch m.QueryParameterMatchSpecifier.(type) {

	case *QueryParameterMatcher_StringMatch:

		if h, ok := interface{}(m.GetStringMatch()).(equality.Equalizer); ok {
			if !h.Equal(target.GetStringMatch()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetStringMatch(), target.GetStringMatch()) {
				return false
			}
		}

	case *QueryParameterMatcher_PresentMatch:

		if m.GetPresentMatch() != target.GetPresentMatch() {
			return false
		}

	}

	return true
}

// Equal function
func (m *WeightedCluster_ClusterWeight) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WeightedCluster_ClusterWeight)
	if !ok {
		that2, ok := that.(WeightedCluster_ClusterWeight)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetWeight()).(equality.Equalizer); ok {
		if !h.Equal(target.GetWeight()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetWeight(), target.GetWeight()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMetadataMatch()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadataMatch()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadataMatch(), target.GetMetadataMatch()) {
			return false
		}
	}

	if len(m.GetRequestHeadersToAdd()) != len(target.GetRequestHeadersToAdd()) {
		return false
	}
	for idx, v := range m.GetRequestHeadersToAdd() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRequestHeadersToAdd()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRequestHeadersToAdd()[idx]) {
				return false
			}
		}

	}

	if len(m.GetRequestHeadersToRemove()) != len(target.GetRequestHeadersToRemove()) {
		return false
	}
	for idx, v := range m.GetRequestHeadersToRemove() {

		if strings.Compare(v, target.GetRequestHeadersToRemove()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetResponseHeadersToAdd()) != len(target.GetResponseHeadersToAdd()) {
		return false
	}
	for idx, v := range m.GetResponseHeadersToAdd() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetResponseHeadersToAdd()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetResponseHeadersToAdd()[idx]) {
				return false
			}
		}

	}

	if len(m.GetResponseHeadersToRemove()) != len(target.GetResponseHeadersToRemove()) {
		return false
	}
	for idx, v := range m.GetResponseHeadersToRemove() {

		if strings.Compare(v, target.GetResponseHeadersToRemove()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetPerFilterConfig()) != len(target.GetPerFilterConfig()) {
		return false
	}
	for k, v := range m.GetPerFilterConfig() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPerFilterConfig()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPerFilterConfig()[k]) {
				return false
			}
		}

	}

	if len(m.GetTypedPerFilterConfig()) != len(target.GetTypedPerFilterConfig()) {
		return false
	}
	for k, v := range m.GetTypedPerFilterConfig() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetTypedPerFilterConfig()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetTypedPerFilterConfig()[k]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *RouteMatch_GrpcRouteMatchOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteMatch_GrpcRouteMatchOptions)
	if !ok {
		that2, ok := that.(RouteMatch_GrpcRouteMatchOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *RouteMatch_TlsContextMatchOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteMatch_TlsContextMatchOptions)
	if !ok {
		that2, ok := that.(RouteMatch_TlsContextMatchOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetPresented()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPresented()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPresented(), target.GetPresented()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetValidated()).(equality.Equalizer); ok {
		if !h.Equal(target.GetValidated()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetValidated(), target.GetValidated()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *RouteAction_RequestMirrorPolicy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteAction_RequestMirrorPolicy)
	if !ok {
		that2, ok := that.(RouteAction_RequestMirrorPolicy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetCluster(), target.GetCluster()) != 0 {
		return false
	}

	if strings.Compare(m.GetRuntimeKey(), target.GetRuntimeKey()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetRuntimeFraction()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRuntimeFraction()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRuntimeFraction(), target.GetRuntimeFraction()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTraceSampled()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTraceSampled()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTraceSampled(), target.GetTraceSampled()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *RouteAction_HashPolicy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteAction_HashPolicy)
	if !ok {
		that2, ok := that.(RouteAction_HashPolicy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetTerminal() != target.GetTerminal() {
		return false
	}

	switch m.PolicySpecifier.(type) {

	case *RouteAction_HashPolicy_Header_:

		if h, ok := interface{}(m.GetHeader()).(equality.Equalizer); ok {
			if !h.Equal(target.GetHeader()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetHeader(), target.GetHeader()) {
				return false
			}
		}

	case *RouteAction_HashPolicy_Cookie_:

		if h, ok := interface{}(m.GetCookie()).(equality.Equalizer); ok {
			if !h.Equal(target.GetCookie()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetCookie(), target.GetCookie()) {
				return false
			}
		}

	case *RouteAction_HashPolicy_ConnectionProperties_:

		if h, ok := interface{}(m.GetConnectionProperties()).(equality.Equalizer); ok {
			if !h.Equal(target.GetConnectionProperties()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetConnectionProperties(), target.GetConnectionProperties()) {
				return false
			}
		}

	case *RouteAction_HashPolicy_QueryParameter_:

		if h, ok := interface{}(m.GetQueryParameter()).(equality.Equalizer); ok {
			if !h.Equal(target.GetQueryParameter()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetQueryParameter(), target.GetQueryParameter()) {
				return false
			}
		}

	case *RouteAction_HashPolicy_FilterState_:

		if h, ok := interface{}(m.GetFilterState()).(equality.Equalizer); ok {
			if !h.Equal(target.GetFilterState()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetFilterState(), target.GetFilterState()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *RouteAction_UpgradeConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteAction_UpgradeConfig)
	if !ok {
		that2, ok := that.(RouteAction_UpgradeConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetUpgradeType(), target.GetUpgradeType()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetEnabled()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEnabled()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEnabled(), target.GetEnabled()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *RouteAction_HashPolicy_Header) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteAction_HashPolicy_Header)
	if !ok {
		that2, ok := that.(RouteAction_HashPolicy_Header)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetHeaderName(), target.GetHeaderName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *RouteAction_HashPolicy_Cookie) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteAction_HashPolicy_Cookie)
	if !ok {
		that2, ok := that.(RouteAction_HashPolicy_Cookie)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetTtl()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTtl()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTtl(), target.GetTtl()) {
			return false
		}
	}

	if strings.Compare(m.GetPath(), target.GetPath()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *RouteAction_HashPolicy_ConnectionProperties) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteAction_HashPolicy_ConnectionProperties)
	if !ok {
		that2, ok := that.(RouteAction_HashPolicy_ConnectionProperties)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetSourceIp() != target.GetSourceIp() {
		return false
	}

	return true
}

// Equal function
func (m *RouteAction_HashPolicy_QueryParameter) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteAction_HashPolicy_QueryParameter)
	if !ok {
		that2, ok := that.(RouteAction_HashPolicy_QueryParameter)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *RouteAction_HashPolicy_FilterState) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteAction_HashPolicy_FilterState)
	if !ok {
		that2, ok := that.(RouteAction_HashPolicy_FilterState)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetKey(), target.GetKey()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *RetryPolicy_RetryPriority) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RetryPolicy_RetryPriority)
	if !ok {
		that2, ok := that.(RetryPolicy_RetryPriority)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	switch m.ConfigType.(type) {

	case *RetryPolicy_RetryPriority_Config:

		if h, ok := interface{}(m.GetConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetConfig(), target.GetConfig()) {
				return false
			}
		}

	case *RetryPolicy_RetryPriority_TypedConfig:

		if h, ok := interface{}(m.GetTypedConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetTypedConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetTypedConfig(), target.GetTypedConfig()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *RetryPolicy_RetryHostPredicate) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RetryPolicy_RetryHostPredicate)
	if !ok {
		that2, ok := that.(RetryPolicy_RetryHostPredicate)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	switch m.ConfigType.(type) {

	case *RetryPolicy_RetryHostPredicate_Config:

		if h, ok := interface{}(m.GetConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetConfig(), target.GetConfig()) {
				return false
			}
		}

	case *RetryPolicy_RetryHostPredicate_TypedConfig:

		if h, ok := interface{}(m.GetTypedConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetTypedConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetTypedConfig(), target.GetTypedConfig()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *RetryPolicy_RetryBackOff) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RetryPolicy_RetryBackOff)
	if !ok {
		that2, ok := that.(RetryPolicy_RetryBackOff)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetBaseInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBaseInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBaseInterval(), target.GetBaseInterval()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxInterval(), target.GetMaxInterval()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *RateLimit_Action) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimit_Action)
	if !ok {
		that2, ok := that.(RateLimit_Action)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.ActionSpecifier.(type) {

	case *RateLimit_Action_SourceCluster_:

		if h, ok := interface{}(m.GetSourceCluster()).(equality.Equalizer); ok {
			if !h.Equal(target.GetSourceCluster()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetSourceCluster(), target.GetSourceCluster()) {
				return false
			}
		}

	case *RateLimit_Action_DestinationCluster_:

		if h, ok := interface{}(m.GetDestinationCluster()).(equality.Equalizer); ok {
			if !h.Equal(target.GetDestinationCluster()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetDestinationCluster(), target.GetDestinationCluster()) {
				return false
			}
		}

	case *RateLimit_Action_RequestHeaders_:

		if h, ok := interface{}(m.GetRequestHeaders()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRequestHeaders()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRequestHeaders(), target.GetRequestHeaders()) {
				return false
			}
		}

	case *RateLimit_Action_RemoteAddress_:

		if h, ok := interface{}(m.GetRemoteAddress()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRemoteAddress()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRemoteAddress(), target.GetRemoteAddress()) {
				return false
			}
		}

	case *RateLimit_Action_GenericKey_:

		if h, ok := interface{}(m.GetGenericKey()).(equality.Equalizer); ok {
			if !h.Equal(target.GetGenericKey()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetGenericKey(), target.GetGenericKey()) {
				return false
			}
		}

	case *RateLimit_Action_HeaderValueMatch_:

		if h, ok := interface{}(m.GetHeaderValueMatch()).(equality.Equalizer); ok {
			if !h.Equal(target.GetHeaderValueMatch()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetHeaderValueMatch(), target.GetHeaderValueMatch()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *RateLimit_Action_SourceCluster) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimit_Action_SourceCluster)
	if !ok {
		that2, ok := that.(RateLimit_Action_SourceCluster)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *RateLimit_Action_DestinationCluster) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimit_Action_DestinationCluster)
	if !ok {
		that2, ok := that.(RateLimit_Action_DestinationCluster)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *RateLimit_Action_RequestHeaders) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimit_Action_RequestHeaders)
	if !ok {
		that2, ok := that.(RateLimit_Action_RequestHeaders)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetHeaderName(), target.GetHeaderName()) != 0 {
		return false
	}

	if strings.Compare(m.GetDescriptorKey(), target.GetDescriptorKey()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *RateLimit_Action_RemoteAddress) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimit_Action_RemoteAddress)
	if !ok {
		that2, ok := that.(RateLimit_Action_RemoteAddress)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *RateLimit_Action_GenericKey) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimit_Action_GenericKey)
	if !ok {
		that2, ok := that.(RateLimit_Action_GenericKey)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetDescriptorValue(), target.GetDescriptorValue()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *RateLimit_Action_HeaderValueMatch) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimit_Action_HeaderValueMatch)
	if !ok {
		that2, ok := that.(RateLimit_Action_HeaderValueMatch)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetDescriptorValue(), target.GetDescriptorValue()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetExpectMatch()).(equality.Equalizer); ok {
		if !h.Equal(target.GetExpectMatch()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetExpectMatch(), target.GetExpectMatch()) {
			return false
		}
	}

	if len(m.GetHeaders()) != len(target.GetHeaders()) {
		return false
	}
	for idx, v := range m.GetHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHeaders()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHeaders()[idx]) {
				return false
			}
		}

	}

	return true
}
