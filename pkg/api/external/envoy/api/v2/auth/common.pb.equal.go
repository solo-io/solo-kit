// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/auth/common.proto

package auth

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *TlsParameters) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*TlsParameters)
	if !ok {
		that2, ok := that.(TlsParameters)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetTlsMinimumProtocolVersion() != target.GetTlsMinimumProtocolVersion() {
		return false
	}

	if m.GetTlsMaximumProtocolVersion() != target.GetTlsMaximumProtocolVersion() {
		return false
	}

	if len(m.GetCipherSuites()) != len(target.GetCipherSuites()) {
		return false
	}
	for idx, v := range m.GetCipherSuites() {

		if strings.Compare(v, target.GetCipherSuites()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetEcdhCurves()) != len(target.GetEcdhCurves()) {
		return false
	}
	for idx, v := range m.GetEcdhCurves() {

		if strings.Compare(v, target.GetEcdhCurves()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *PrivateKeyProvider) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PrivateKeyProvider)
	if !ok {
		that2, ok := that.(PrivateKeyProvider)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetProviderName(), target.GetProviderName()) != 0 {
		return false
	}

	switch m.ConfigType.(type) {

	case *PrivateKeyProvider_Config:
		if _, ok := target.ConfigType.(*PrivateKeyProvider_Config); !ok {
			return false
		}

		if h, ok := interface{}(m.GetConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetConfig(), target.GetConfig()) {
				return false
			}
		}

	case *PrivateKeyProvider_TypedConfig:
		if _, ok := target.ConfigType.(*PrivateKeyProvider_TypedConfig); !ok {
			return false
		}

		if h, ok := interface{}(m.GetTypedConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetTypedConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetTypedConfig(), target.GetTypedConfig()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ConfigType != target.ConfigType {
			return false
		}
	}

	return true
}

// Equal function
func (m *TlsCertificate) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*TlsCertificate)
	if !ok {
		that2, ok := that.(TlsCertificate)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCertificateChain()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCertificateChain()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCertificateChain(), target.GetCertificateChain()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPrivateKey()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPrivateKey()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPrivateKey(), target.GetPrivateKey()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPrivateKeyProvider()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPrivateKeyProvider()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPrivateKeyProvider(), target.GetPrivateKeyProvider()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPassword()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPassword()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPassword(), target.GetPassword()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetOcspStaple()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOcspStaple()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOcspStaple(), target.GetOcspStaple()) {
			return false
		}
	}

	if len(m.GetSignedCertificateTimestamp()) != len(target.GetSignedCertificateTimestamp()) {
		return false
	}
	for idx, v := range m.GetSignedCertificateTimestamp() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSignedCertificateTimestamp()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSignedCertificateTimestamp()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *TlsSessionTicketKeys) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*TlsSessionTicketKeys)
	if !ok {
		that2, ok := that.(TlsSessionTicketKeys)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetKeys()) != len(target.GetKeys()) {
		return false
	}
	for idx, v := range m.GetKeys() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetKeys()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetKeys()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *CertificateValidationContext) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CertificateValidationContext)
	if !ok {
		that2, ok := that.(CertificateValidationContext)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetTrustedCa()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTrustedCa()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTrustedCa(), target.GetTrustedCa()) {
			return false
		}
	}

	if len(m.GetVerifyCertificateSpki()) != len(target.GetVerifyCertificateSpki()) {
		return false
	}
	for idx, v := range m.GetVerifyCertificateSpki() {

		if strings.Compare(v, target.GetVerifyCertificateSpki()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetVerifyCertificateHash()) != len(target.GetVerifyCertificateHash()) {
		return false
	}
	for idx, v := range m.GetVerifyCertificateHash() {

		if strings.Compare(v, target.GetVerifyCertificateHash()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetVerifySubjectAltName()) != len(target.GetVerifySubjectAltName()) {
		return false
	}
	for idx, v := range m.GetVerifySubjectAltName() {

		if strings.Compare(v, target.GetVerifySubjectAltName()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetMatchSubjectAltNames()) != len(target.GetMatchSubjectAltNames()) {
		return false
	}
	for idx, v := range m.GetMatchSubjectAltNames() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetMatchSubjectAltNames()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetMatchSubjectAltNames()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetRequireOcspStaple()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequireOcspStaple()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequireOcspStaple(), target.GetRequireOcspStaple()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRequireSignedCertificateTimestamp()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequireSignedCertificateTimestamp()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequireSignedCertificateTimestamp(), target.GetRequireSignedCertificateTimestamp()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCrl()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCrl()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCrl(), target.GetCrl()) {
			return false
		}
	}

	if m.GetAllowExpiredCertificate() != target.GetAllowExpiredCertificate() {
		return false
	}

	if m.GetTrustChainVerification() != target.GetTrustChainVerification() {
		return false
	}

	return true
}
