// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/auth/tls.proto

package auth

import (
	"encoding/binary"
	"errors"
	"fmt"
	"hash"
	"hash/fnv"

	"github.com/mitchellh/hashstructure"
	safe_hasher "github.com/solo-io/protoc-gen-ext/pkg/hasher"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = new(hash.Hash64)
	_ = fnv.New64
	_ = hashstructure.Hash
	_ = new(safe_hasher.SafeHasher)
)

// Hash function
func (m *UpstreamTlsContext) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("solo.io.envoy.api.v2.auth.github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/auth.UpstreamTlsContext")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetCommonTlsContext()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("CommonTlsContext")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetCommonTlsContext(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("CommonTlsContext")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if _, err = hasher.Write([]byte(m.GetSni())); err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetAllowRenegotiation())
	if err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetMaxSessionKeys()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("MaxSessionKeys")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetMaxSessionKeys(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("MaxSessionKeys")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *DownstreamTlsContext) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("solo.io.envoy.api.v2.auth.github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/auth.DownstreamTlsContext")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetCommonTlsContext()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("CommonTlsContext")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetCommonTlsContext(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("CommonTlsContext")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetRequireClientCertificate()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("RequireClientCertificate")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRequireClientCertificate(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("RequireClientCertificate")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetRequireSni()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("RequireSni")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRequireSni(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("RequireSni")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetSessionTimeout()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("SessionTimeout")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetSessionTimeout(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("SessionTimeout")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	switch m.SessionTicketKeysType.(type) {

	case *DownstreamTlsContext_SessionTicketKeys:

		if h, ok := interface{}(m.GetSessionTicketKeys()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("SessionTicketKeys")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetSessionTicketKeys(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("SessionTicketKeys")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *DownstreamTlsContext_SessionTicketKeysSdsSecretConfig:

		if h, ok := interface{}(m.GetSessionTicketKeysSdsSecretConfig()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("SessionTicketKeysSdsSecretConfig")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetSessionTicketKeysSdsSecretConfig(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("SessionTicketKeysSdsSecretConfig")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *DownstreamTlsContext_DisableStatelessSessionResumption:

		err = binary.Write(hasher, binary.LittleEndian, m.GetDisableStatelessSessionResumption())
		if err != nil {
			return 0, err
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *CommonTlsContext) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("solo.io.envoy.api.v2.auth.github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/auth.CommonTlsContext")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetTlsParams()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("TlsParams")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetTlsParams(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("TlsParams")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	for _, v := range m.GetTlsCertificates() {

		if h, ok := interface{}(v).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(v, nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	for _, v := range m.GetTlsCertificateSdsSecretConfigs() {

		if h, ok := interface{}(v).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(v, nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	for _, v := range m.GetAlpnProtocols() {

		if _, err = hasher.Write([]byte(v)); err != nil {
			return 0, err
		}

	}

	switch m.ValidationContextType.(type) {

	case *CommonTlsContext_ValidationContext:

		if h, ok := interface{}(m.GetValidationContext()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("ValidationContext")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetValidationContext(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("ValidationContext")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *CommonTlsContext_ValidationContextSdsSecretConfig:

		if h, ok := interface{}(m.GetValidationContextSdsSecretConfig()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("ValidationContextSdsSecretConfig")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetValidationContextSdsSecretConfig(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("ValidationContextSdsSecretConfig")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *CommonTlsContext_CombinedValidationContext:

		if h, ok := interface{}(m.GetCombinedValidationContext()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("CombinedValidationContext")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetCombinedValidationContext(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("CombinedValidationContext")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *CommonTlsContext_CombinedCertificateValidationContext) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("solo.io.envoy.api.v2.auth.github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/auth.CommonTlsContext_CombinedCertificateValidationContext")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetDefaultValidationContext()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("DefaultValidationContext")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetDefaultValidationContext(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("DefaultValidationContext")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetValidationContextSdsSecretConfig()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("ValidationContextSdsSecretConfig")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetValidationContextSdsSecretConfig(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("ValidationContextSdsSecretConfig")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}
