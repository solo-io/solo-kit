// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/auth/tls.proto

package auth

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *UpstreamTlsContext) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpstreamTlsContext)
	if !ok {
		that2, ok := that.(UpstreamTlsContext)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommonTlsContext()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommonTlsContext()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommonTlsContext(), target.GetCommonTlsContext()) {
			return false
		}
	}

	if strings.Compare(m.GetSni(), target.GetSni()) != 0 {
		return false
	}

	if m.GetAllowRenegotiation() != target.GetAllowRenegotiation() {
		return false
	}

	if h, ok := interface{}(m.GetMaxSessionKeys()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxSessionKeys()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxSessionKeys(), target.GetMaxSessionKeys()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DownstreamTlsContext) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DownstreamTlsContext)
	if !ok {
		that2, ok := that.(DownstreamTlsContext)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommonTlsContext()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommonTlsContext()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommonTlsContext(), target.GetCommonTlsContext()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRequireClientCertificate()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequireClientCertificate()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequireClientCertificate(), target.GetRequireClientCertificate()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRequireSni()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequireSni()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequireSni(), target.GetRequireSni()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSessionTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSessionTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSessionTimeout(), target.GetSessionTimeout()) {
			return false
		}
	}

	switch m.SessionTicketKeysType.(type) {

	case *DownstreamTlsContext_SessionTicketKeys:

		if h, ok := interface{}(m.GetSessionTicketKeys()).(equality.Equalizer); ok {
			if !h.Equal(target.GetSessionTicketKeys()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetSessionTicketKeys(), target.GetSessionTicketKeys()) {
				return false
			}
		}

	case *DownstreamTlsContext_SessionTicketKeysSdsSecretConfig:

		if h, ok := interface{}(m.GetSessionTicketKeysSdsSecretConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetSessionTicketKeysSdsSecretConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetSessionTicketKeysSdsSecretConfig(), target.GetSessionTicketKeysSdsSecretConfig()) {
				return false
			}
		}

	case *DownstreamTlsContext_DisableStatelessSessionResumption:

		if m.GetDisableStatelessSessionResumption() != target.GetDisableStatelessSessionResumption() {
			return false
		}

	}

	return true
}

// Equal function
func (m *CommonTlsContext) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CommonTlsContext)
	if !ok {
		that2, ok := that.(CommonTlsContext)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetTlsParams()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTlsParams()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTlsParams(), target.GetTlsParams()) {
			return false
		}
	}

	if len(m.GetTlsCertificates()) != len(target.GetTlsCertificates()) {
		return false
	}
	for idx, v := range m.GetTlsCertificates() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetTlsCertificates()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetTlsCertificates()[idx]) {
				return false
			}
		}

	}

	if len(m.GetTlsCertificateSdsSecretConfigs()) != len(target.GetTlsCertificateSdsSecretConfigs()) {
		return false
	}
	for idx, v := range m.GetTlsCertificateSdsSecretConfigs() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetTlsCertificateSdsSecretConfigs()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetTlsCertificateSdsSecretConfigs()[idx]) {
				return false
			}
		}

	}

	if len(m.GetAlpnProtocols()) != len(target.GetAlpnProtocols()) {
		return false
	}
	for idx, v := range m.GetAlpnProtocols() {

		if strings.Compare(v, target.GetAlpnProtocols()[idx]) != 0 {
			return false
		}

	}

	switch m.ValidationContextType.(type) {

	case *CommonTlsContext_ValidationContext:

		if h, ok := interface{}(m.GetValidationContext()).(equality.Equalizer); ok {
			if !h.Equal(target.GetValidationContext()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetValidationContext(), target.GetValidationContext()) {
				return false
			}
		}

	case *CommonTlsContext_ValidationContextSdsSecretConfig:

		if h, ok := interface{}(m.GetValidationContextSdsSecretConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetValidationContextSdsSecretConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetValidationContextSdsSecretConfig(), target.GetValidationContextSdsSecretConfig()) {
				return false
			}
		}

	case *CommonTlsContext_CombinedValidationContext:

		if h, ok := interface{}(m.GetCombinedValidationContext()).(equality.Equalizer); ok {
			if !h.Equal(target.GetCombinedValidationContext()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetCombinedValidationContext(), target.GetCombinedValidationContext()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *CommonTlsContext_CombinedCertificateValidationContext) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CommonTlsContext_CombinedCertificateValidationContext)
	if !ok {
		that2, ok := that.(CommonTlsContext_CombinedCertificateValidationContext)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetDefaultValidationContext()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDefaultValidationContext()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDefaultValidationContext(), target.GetDefaultValidationContext()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetValidationContextSdsSecretConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetValidationContextSdsSecretConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetValidationContextSdsSecretConfig(), target.GetValidationContextSdsSecretConfig()) {
			return false
		}
	}

	return true
}
