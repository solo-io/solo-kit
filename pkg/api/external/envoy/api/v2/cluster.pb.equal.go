// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/cluster.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *Cluster) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster)
	if !ok {
		that2, ok := that.(Cluster)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetTransportSocketMatches()) != len(target.GetTransportSocketMatches()) {
		return false
	}
	for idx, v := range m.GetTransportSocketMatches() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetTransportSocketMatches()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetTransportSocketMatches()[idx]) {
				return false
			}
		}

	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetAltStatName(), target.GetAltStatName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetEdsClusterConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEdsClusterConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEdsClusterConfig(), target.GetEdsClusterConfig()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetConnectTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetConnectTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetConnectTimeout(), target.GetConnectTimeout()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPerConnectionBufferLimitBytes()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPerConnectionBufferLimitBytes()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPerConnectionBufferLimitBytes(), target.GetPerConnectionBufferLimitBytes()) {
			return false
		}
	}

	if m.GetLbPolicy() != target.GetLbPolicy() {
		return false
	}

	if len(m.GetHosts()) != len(target.GetHosts()) {
		return false
	}
	for idx, v := range m.GetHosts() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHosts()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHosts()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetLoadAssignment()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLoadAssignment()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLoadAssignment(), target.GetLoadAssignment()) {
			return false
		}
	}

	if len(m.GetHealthChecks()) != len(target.GetHealthChecks()) {
		return false
	}
	for idx, v := range m.GetHealthChecks() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHealthChecks()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHealthChecks()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetMaxRequestsPerConnection()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxRequestsPerConnection()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxRequestsPerConnection(), target.GetMaxRequestsPerConnection()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCircuitBreakers()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCircuitBreakers()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCircuitBreakers(), target.GetCircuitBreakers()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTlsContext()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTlsContext()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTlsContext(), target.GetTlsContext()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetUpstreamHttpProtocolOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamHttpProtocolOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamHttpProtocolOptions(), target.GetUpstreamHttpProtocolOptions()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCommonHttpProtocolOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommonHttpProtocolOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommonHttpProtocolOptions(), target.GetCommonHttpProtocolOptions()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetHttpProtocolOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHttpProtocolOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHttpProtocolOptions(), target.GetHttpProtocolOptions()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetHttp2ProtocolOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHttp2ProtocolOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHttp2ProtocolOptions(), target.GetHttp2ProtocolOptions()) {
			return false
		}
	}

	if len(m.GetExtensionProtocolOptions()) != len(target.GetExtensionProtocolOptions()) {
		return false
	}
	for k, v := range m.GetExtensionProtocolOptions() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetExtensionProtocolOptions()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetExtensionProtocolOptions()[k]) {
				return false
			}
		}

	}

	if len(m.GetTypedExtensionProtocolOptions()) != len(target.GetTypedExtensionProtocolOptions()) {
		return false
	}
	for k, v := range m.GetTypedExtensionProtocolOptions() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetTypedExtensionProtocolOptions()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetTypedExtensionProtocolOptions()[k]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetDnsRefreshRate()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDnsRefreshRate()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDnsRefreshRate(), target.GetDnsRefreshRate()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDnsFailureRefreshRate()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDnsFailureRefreshRate()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDnsFailureRefreshRate(), target.GetDnsFailureRefreshRate()) {
			return false
		}
	}

	if m.GetRespectDnsTtl() != target.GetRespectDnsTtl() {
		return false
	}

	if m.GetDnsLookupFamily() != target.GetDnsLookupFamily() {
		return false
	}

	if len(m.GetDnsResolvers()) != len(target.GetDnsResolvers()) {
		return false
	}
	for idx, v := range m.GetDnsResolvers() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetDnsResolvers()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetDnsResolvers()[idx]) {
				return false
			}
		}

	}

	if m.GetUseTcpForDnsLookups() != target.GetUseTcpForDnsLookups() {
		return false
	}

	if h, ok := interface{}(m.GetOutlierDetection()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOutlierDetection()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOutlierDetection(), target.GetOutlierDetection()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCleanupInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCleanupInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCleanupInterval(), target.GetCleanupInterval()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetUpstreamBindConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamBindConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamBindConfig(), target.GetUpstreamBindConfig()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetLbSubsetConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLbSubsetConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLbSubsetConfig(), target.GetLbSubsetConfig()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCommonLbConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommonLbConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommonLbConfig(), target.GetCommonLbConfig()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTransportSocket()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTransportSocket()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTransportSocket(), target.GetTransportSocket()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
			return false
		}
	}

	if m.GetProtocolSelection() != target.GetProtocolSelection() {
		return false
	}

	if h, ok := interface{}(m.GetUpstreamConnectionOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamConnectionOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamConnectionOptions(), target.GetUpstreamConnectionOptions()) {
			return false
		}
	}

	if m.GetCloseConnectionsOnHostHealthFailure() != target.GetCloseConnectionsOnHostHealthFailure() {
		return false
	}

	if m.GetDrainConnectionsOnHostRemoval() != target.GetDrainConnectionsOnHostRemoval() {
		return false
	}

	if len(m.GetFilters()) != len(target.GetFilters()) {
		return false
	}
	for idx, v := range m.GetFilters() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetFilters()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetFilters()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetLoadBalancingPolicy()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLoadBalancingPolicy()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLoadBalancingPolicy(), target.GetLoadBalancingPolicy()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetLrsServer()).(equality.Equalizer); ok {
		if !h.Equal(target.GetLrsServer()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetLrsServer(), target.GetLrsServer()) {
			return false
		}
	}

	if m.GetTrackTimeoutBudgets() != target.GetTrackTimeoutBudgets() {
		return false
	}

	switch m.ClusterDiscoveryType.(type) {

	case *Cluster_Type:

		if m.GetType() != target.GetType() {
			return false
		}

	case *Cluster_ClusterType:

		if h, ok := interface{}(m.GetClusterType()).(equality.Equalizer); ok {
			if !h.Equal(target.GetClusterType()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetClusterType(), target.GetClusterType()) {
				return false
			}
		}

	}

	switch m.LbConfig.(type) {

	case *Cluster_RingHashLbConfig_:

		if h, ok := interface{}(m.GetRingHashLbConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRingHashLbConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRingHashLbConfig(), target.GetRingHashLbConfig()) {
				return false
			}
		}

	case *Cluster_OriginalDstLbConfig_:

		if h, ok := interface{}(m.GetOriginalDstLbConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetOriginalDstLbConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetOriginalDstLbConfig(), target.GetOriginalDstLbConfig()) {
				return false
			}
		}

	case *Cluster_LeastRequestLbConfig_:

		if h, ok := interface{}(m.GetLeastRequestLbConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetLeastRequestLbConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetLeastRequestLbConfig(), target.GetLeastRequestLbConfig()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *LoadBalancingPolicy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LoadBalancingPolicy)
	if !ok {
		that2, ok := that.(LoadBalancingPolicy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetPolicies()) != len(target.GetPolicies()) {
		return false
	}
	for idx, v := range m.GetPolicies() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPolicies()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPolicies()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *UpstreamBindConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpstreamBindConfig)
	if !ok {
		that2, ok := that.(UpstreamBindConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSourceAddress()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSourceAddress()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSourceAddress(), target.GetSourceAddress()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpstreamConnectionOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpstreamConnectionOptions)
	if !ok {
		that2, ok := that.(UpstreamConnectionOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetTcpKeepalive()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTcpKeepalive()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTcpKeepalive(), target.GetTcpKeepalive()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Cluster_TransportSocketMatch) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster_TransportSocketMatch)
	if !ok {
		that2, ok := that.(Cluster_TransportSocketMatch)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetMatch()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMatch()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMatch(), target.GetMatch()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTransportSocket()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTransportSocket()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTransportSocket(), target.GetTransportSocket()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Cluster_CustomClusterType) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster_CustomClusterType)
	if !ok {
		that2, ok := that.(Cluster_CustomClusterType)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetTypedConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTypedConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTypedConfig(), target.GetTypedConfig()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Cluster_EdsClusterConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster_EdsClusterConfig)
	if !ok {
		that2, ok := that.(Cluster_EdsClusterConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetEdsConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEdsConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEdsConfig(), target.GetEdsConfig()) {
			return false
		}
	}

	if strings.Compare(m.GetServiceName(), target.GetServiceName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *Cluster_LbSubsetConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster_LbSubsetConfig)
	if !ok {
		that2, ok := that.(Cluster_LbSubsetConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetFallbackPolicy() != target.GetFallbackPolicy() {
		return false
	}

	if h, ok := interface{}(m.GetDefaultSubset()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDefaultSubset()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDefaultSubset(), target.GetDefaultSubset()) {
			return false
		}
	}

	if len(m.GetSubsetSelectors()) != len(target.GetSubsetSelectors()) {
		return false
	}
	for idx, v := range m.GetSubsetSelectors() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSubsetSelectors()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSubsetSelectors()[idx]) {
				return false
			}
		}

	}

	if m.GetLocalityWeightAware() != target.GetLocalityWeightAware() {
		return false
	}

	if m.GetScaleLocalityWeight() != target.GetScaleLocalityWeight() {
		return false
	}

	if m.GetPanicModeAny() != target.GetPanicModeAny() {
		return false
	}

	if m.GetListAsAny() != target.GetListAsAny() {
		return false
	}

	return true
}

// Equal function
func (m *Cluster_LeastRequestLbConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster_LeastRequestLbConfig)
	if !ok {
		that2, ok := that.(Cluster_LeastRequestLbConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetChoiceCount()).(equality.Equalizer); ok {
		if !h.Equal(target.GetChoiceCount()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetChoiceCount(), target.GetChoiceCount()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Cluster_RingHashLbConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster_RingHashLbConfig)
	if !ok {
		that2, ok := that.(Cluster_RingHashLbConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMinimumRingSize()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMinimumRingSize()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMinimumRingSize(), target.GetMinimumRingSize()) {
			return false
		}
	}

	if m.GetHashFunction() != target.GetHashFunction() {
		return false
	}

	if h, ok := interface{}(m.GetMaximumRingSize()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaximumRingSize()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaximumRingSize(), target.GetMaximumRingSize()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Cluster_OriginalDstLbConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster_OriginalDstLbConfig)
	if !ok {
		that2, ok := that.(Cluster_OriginalDstLbConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetUseHttpHeader() != target.GetUseHttpHeader() {
		return false
	}

	return true
}

// Equal function
func (m *Cluster_CommonLbConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster_CommonLbConfig)
	if !ok {
		that2, ok := that.(Cluster_CommonLbConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetHealthyPanicThreshold()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHealthyPanicThreshold()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHealthyPanicThreshold(), target.GetHealthyPanicThreshold()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetUpdateMergeWindow()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpdateMergeWindow()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpdateMergeWindow(), target.GetUpdateMergeWindow()) {
			return false
		}
	}

	if m.GetIgnoreNewHostsUntilFirstHc() != target.GetIgnoreNewHostsUntilFirstHc() {
		return false
	}

	if m.GetCloseConnectionsOnHostSetChange() != target.GetCloseConnectionsOnHostSetChange() {
		return false
	}

	if h, ok := interface{}(m.GetConsistentHashingLbConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetConsistentHashingLbConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetConsistentHashingLbConfig(), target.GetConsistentHashingLbConfig()) {
			return false
		}
	}

	switch m.LocalityConfigSpecifier.(type) {

	case *Cluster_CommonLbConfig_ZoneAwareLbConfig_:

		if h, ok := interface{}(m.GetZoneAwareLbConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetZoneAwareLbConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetZoneAwareLbConfig(), target.GetZoneAwareLbConfig()) {
				return false
			}
		}

	case *Cluster_CommonLbConfig_LocalityWeightedLbConfig_:

		if h, ok := interface{}(m.GetLocalityWeightedLbConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetLocalityWeightedLbConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetLocalityWeightedLbConfig(), target.GetLocalityWeightedLbConfig()) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *Cluster_RefreshRate) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster_RefreshRate)
	if !ok {
		that2, ok := that.(Cluster_RefreshRate)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetBaseInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBaseInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBaseInterval(), target.GetBaseInterval()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxInterval(), target.GetMaxInterval()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Cluster_LbSubsetConfig_LbSubsetSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster_LbSubsetConfig_LbSubsetSelector)
	if !ok {
		that2, ok := that.(Cluster_LbSubsetConfig_LbSubsetSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetKeys()) != len(target.GetKeys()) {
		return false
	}
	for idx, v := range m.GetKeys() {

		if strings.Compare(v, target.GetKeys()[idx]) != 0 {
			return false
		}

	}

	if m.GetFallbackPolicy() != target.GetFallbackPolicy() {
		return false
	}

	if len(m.GetFallbackKeysSubset()) != len(target.GetFallbackKeysSubset()) {
		return false
	}
	for idx, v := range m.GetFallbackKeysSubset() {

		if strings.Compare(v, target.GetFallbackKeysSubset()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster_CommonLbConfig_ZoneAwareLbConfig)
	if !ok {
		that2, ok := that.(Cluster_CommonLbConfig_ZoneAwareLbConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRoutingEnabled()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRoutingEnabled()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRoutingEnabled(), target.GetRoutingEnabled()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMinClusterSize()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMinClusterSize()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMinClusterSize(), target.GetMinClusterSize()) {
			return false
		}
	}

	if m.GetFailTrafficOnPanic() != target.GetFailTrafficOnPanic() {
		return false
	}

	return true
}

// Equal function
func (m *Cluster_CommonLbConfig_LocalityWeightedLbConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster_CommonLbConfig_LocalityWeightedLbConfig)
	if !ok {
		that2, ok := that.(Cluster_CommonLbConfig_LocalityWeightedLbConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *Cluster_CommonLbConfig_ConsistentHashingLbConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Cluster_CommonLbConfig_ConsistentHashingLbConfig)
	if !ok {
		that2, ok := that.(Cluster_CommonLbConfig_ConsistentHashingLbConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetUseHostnameForHashing() != target.GetUseHostnameForHashing() {
		return false
	}

	return true
}

// Equal function
func (m *LoadBalancingPolicy_Policy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LoadBalancingPolicy_Policy)
	if !ok {
		that2, ok := that.(LoadBalancingPolicy_Policy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetConfig(), target.GetConfig()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTypedConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTypedConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTypedConfig(), target.GetTypedConfig()) {
			return false
		}
	}

	return true
}
