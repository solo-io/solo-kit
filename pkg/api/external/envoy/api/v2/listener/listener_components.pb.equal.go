// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/listener/listener_components.proto

package listener

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *Filter) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Filter)
	if !ok {
		that2, ok := that.(Filter)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	switch m.ConfigType.(type) {

	case *Filter_Config:
		if _, ok := target.ConfigType.(*Filter_Config); !ok {
			return false
		}

		if h, ok := interface{}(m.GetConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetConfig(), target.GetConfig()) {
				return false
			}
		}

	case *Filter_TypedConfig:
		if _, ok := target.ConfigType.(*Filter_TypedConfig); !ok {
			return false
		}

		if h, ok := interface{}(m.GetTypedConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetTypedConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetTypedConfig(), target.GetTypedConfig()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ConfigType != target.ConfigType {
			return false
		}
	}

	return true
}

// Equal function
func (m *FilterChainMatch) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*FilterChainMatch)
	if !ok {
		that2, ok := that.(FilterChainMatch)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetDestinationPort()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDestinationPort()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDestinationPort(), target.GetDestinationPort()) {
			return false
		}
	}

	if len(m.GetPrefixRanges()) != len(target.GetPrefixRanges()) {
		return false
	}
	for idx, v := range m.GetPrefixRanges() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPrefixRanges()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPrefixRanges()[idx]) {
				return false
			}
		}

	}

	if strings.Compare(m.GetAddressSuffix(), target.GetAddressSuffix()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetSuffixLen()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSuffixLen()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSuffixLen(), target.GetSuffixLen()) {
			return false
		}
	}

	if m.GetSourceType() != target.GetSourceType() {
		return false
	}

	if len(m.GetSourcePrefixRanges()) != len(target.GetSourcePrefixRanges()) {
		return false
	}
	for idx, v := range m.GetSourcePrefixRanges() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSourcePrefixRanges()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSourcePrefixRanges()[idx]) {
				return false
			}
		}

	}

	if len(m.GetSourcePorts()) != len(target.GetSourcePorts()) {
		return false
	}
	for idx, v := range m.GetSourcePorts() {

		if v != target.GetSourcePorts()[idx] {
			return false
		}

	}

	if len(m.GetServerNames()) != len(target.GetServerNames()) {
		return false
	}
	for idx, v := range m.GetServerNames() {

		if strings.Compare(v, target.GetServerNames()[idx]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetTransportProtocol(), target.GetTransportProtocol()) != 0 {
		return false
	}

	if len(m.GetApplicationProtocols()) != len(target.GetApplicationProtocols()) {
		return false
	}
	for idx, v := range m.GetApplicationProtocols() {

		if strings.Compare(v, target.GetApplicationProtocols()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *FilterChain) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*FilterChain)
	if !ok {
		that2, ok := that.(FilterChain)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetFilterChainMatch()).(equality.Equalizer); ok {
		if !h.Equal(target.GetFilterChainMatch()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetFilterChainMatch(), target.GetFilterChainMatch()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTlsContext()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTlsContext()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTlsContext(), target.GetTlsContext()) {
			return false
		}
	}

	if len(m.GetFilters()) != len(target.GetFilters()) {
		return false
	}
	for idx, v := range m.GetFilters() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetFilters()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetFilters()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetUseProxyProto()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUseProxyProto()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUseProxyProto(), target.GetUseProxyProto()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTransportSocket()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTransportSocket()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTransportSocket(), target.GetTransportSocket()) {
			return false
		}
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ListenerFilterChainMatchPredicate) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListenerFilterChainMatchPredicate)
	if !ok {
		that2, ok := that.(ListenerFilterChainMatchPredicate)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Rule.(type) {

	case *ListenerFilterChainMatchPredicate_OrMatch:
		if _, ok := target.Rule.(*ListenerFilterChainMatchPredicate_OrMatch); !ok {
			return false
		}

		if h, ok := interface{}(m.GetOrMatch()).(equality.Equalizer); ok {
			if !h.Equal(target.GetOrMatch()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetOrMatch(), target.GetOrMatch()) {
				return false
			}
		}

	case *ListenerFilterChainMatchPredicate_AndMatch:
		if _, ok := target.Rule.(*ListenerFilterChainMatchPredicate_AndMatch); !ok {
			return false
		}

		if h, ok := interface{}(m.GetAndMatch()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAndMatch()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAndMatch(), target.GetAndMatch()) {
				return false
			}
		}

	case *ListenerFilterChainMatchPredicate_NotMatch:
		if _, ok := target.Rule.(*ListenerFilterChainMatchPredicate_NotMatch); !ok {
			return false
		}

		if h, ok := interface{}(m.GetNotMatch()).(equality.Equalizer); ok {
			if !h.Equal(target.GetNotMatch()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetNotMatch(), target.GetNotMatch()) {
				return false
			}
		}

	case *ListenerFilterChainMatchPredicate_AnyMatch:
		if _, ok := target.Rule.(*ListenerFilterChainMatchPredicate_AnyMatch); !ok {
			return false
		}

		if m.GetAnyMatch() != target.GetAnyMatch() {
			return false
		}

	case *ListenerFilterChainMatchPredicate_DestinationPortRange:
		if _, ok := target.Rule.(*ListenerFilterChainMatchPredicate_DestinationPortRange); !ok {
			return false
		}

		if h, ok := interface{}(m.GetDestinationPortRange()).(equality.Equalizer); ok {
			if !h.Equal(target.GetDestinationPortRange()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetDestinationPortRange(), target.GetDestinationPortRange()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Rule != target.Rule {
			return false
		}
	}

	return true
}

// Equal function
func (m *ListenerFilter) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListenerFilter)
	if !ok {
		that2, ok := that.(ListenerFilter)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetFilterDisabled()).(equality.Equalizer); ok {
		if !h.Equal(target.GetFilterDisabled()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetFilterDisabled(), target.GetFilterDisabled()) {
			return false
		}
	}

	switch m.ConfigType.(type) {

	case *ListenerFilter_Config:
		if _, ok := target.ConfigType.(*ListenerFilter_Config); !ok {
			return false
		}

		if h, ok := interface{}(m.GetConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetConfig(), target.GetConfig()) {
				return false
			}
		}

	case *ListenerFilter_TypedConfig:
		if _, ok := target.ConfigType.(*ListenerFilter_TypedConfig); !ok {
			return false
		}

		if h, ok := interface{}(m.GetTypedConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetTypedConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetTypedConfig(), target.GetTypedConfig()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ConfigType != target.ConfigType {
			return false
		}
	}

	return true
}

// Equal function
func (m *ListenerFilterChainMatchPredicate_MatchSet) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListenerFilterChainMatchPredicate_MatchSet)
	if !ok {
		that2, ok := that.(ListenerFilterChainMatchPredicate_MatchSet)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetRules()) != len(target.GetRules()) {
		return false
	}
	for idx, v := range m.GetRules() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRules()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRules()[idx]) {
				return false
			}
		}

	}

	return true
}
