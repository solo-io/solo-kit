// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/api/external/envoy/api/v2/discovery.proto

package v2

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_golang_protobuf_ptypes_any "github.com/golang/protobuf/ptypes/any"

	github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core "github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/core"

	google_golang_org_genproto_googleapis_rpc_status "google.golang.org/genproto/googleapis/rpc/status"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *DiscoveryRequest) Clone() proto.Message {
	var target *DiscoveryRequest
	if m == nil {
		return target
	}
	target = &DiscoveryRequest{}

	target.VersionInfo = m.GetVersionInfo()

	if h, ok := interface{}(m.GetNode()).(clone.Cloner); ok {
		target.Node = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core.Node)
	} else {
		target.Node = proto.Clone(m.GetNode()).(*github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core.Node)
	}

	if m.GetResourceNames() != nil {
		target.ResourceNames = make([]string, len(m.GetResourceNames()))
		for idx, v := range m.GetResourceNames() {

			target.ResourceNames[idx] = v

		}
	}

	target.TypeUrl = m.GetTypeUrl()

	target.ResponseNonce = m.GetResponseNonce()

	if h, ok := interface{}(m.GetErrorDetail()).(clone.Cloner); ok {
		target.ErrorDetail = h.Clone().(*google_golang_org_genproto_googleapis_rpc_status.Status)
	} else {
		target.ErrorDetail = proto.Clone(m.GetErrorDetail()).(*google_golang_org_genproto_googleapis_rpc_status.Status)
	}

	return target
}

// Clone function
func (m *DiscoveryResponse) Clone() proto.Message {
	var target *DiscoveryResponse
	if m == nil {
		return target
	}
	target = &DiscoveryResponse{}

	target.VersionInfo = m.GetVersionInfo()

	if m.GetResources() != nil {
		target.Resources = make([]*github_com_golang_protobuf_ptypes_any.Any, len(m.GetResources()))
		for idx, v := range m.GetResources() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Resources[idx] = h.Clone().(*github_com_golang_protobuf_ptypes_any.Any)
			} else {
				target.Resources[idx] = proto.Clone(v).(*github_com_golang_protobuf_ptypes_any.Any)
			}

		}
	}

	target.Canary = m.GetCanary()

	target.TypeUrl = m.GetTypeUrl()

	target.Nonce = m.GetNonce()

	if h, ok := interface{}(m.GetControlPlane()).(clone.Cloner); ok {
		target.ControlPlane = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core.ControlPlane)
	} else {
		target.ControlPlane = proto.Clone(m.GetControlPlane()).(*github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core.ControlPlane)
	}

	return target
}

// Clone function
func (m *DeltaDiscoveryRequest) Clone() proto.Message {
	var target *DeltaDiscoveryRequest
	if m == nil {
		return target
	}
	target = &DeltaDiscoveryRequest{}

	if h, ok := interface{}(m.GetNode()).(clone.Cloner); ok {
		target.Node = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core.Node)
	} else {
		target.Node = proto.Clone(m.GetNode()).(*github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core.Node)
	}

	target.TypeUrl = m.GetTypeUrl()

	if m.GetResourceNamesSubscribe() != nil {
		target.ResourceNamesSubscribe = make([]string, len(m.GetResourceNamesSubscribe()))
		for idx, v := range m.GetResourceNamesSubscribe() {

			target.ResourceNamesSubscribe[idx] = v

		}
	}

	if m.GetResourceNamesUnsubscribe() != nil {
		target.ResourceNamesUnsubscribe = make([]string, len(m.GetResourceNamesUnsubscribe()))
		for idx, v := range m.GetResourceNamesUnsubscribe() {

			target.ResourceNamesUnsubscribe[idx] = v

		}
	}

	if m.GetInitialResourceVersions() != nil {
		target.InitialResourceVersions = make(map[string]string, len(m.GetInitialResourceVersions()))
		for k, v := range m.GetInitialResourceVersions() {

			target.InitialResourceVersions[k] = v

		}
	}

	target.ResponseNonce = m.GetResponseNonce()

	if h, ok := interface{}(m.GetErrorDetail()).(clone.Cloner); ok {
		target.ErrorDetail = h.Clone().(*google_golang_org_genproto_googleapis_rpc_status.Status)
	} else {
		target.ErrorDetail = proto.Clone(m.GetErrorDetail()).(*google_golang_org_genproto_googleapis_rpc_status.Status)
	}

	return target
}

// Clone function
func (m *DeltaDiscoveryResponse) Clone() proto.Message {
	var target *DeltaDiscoveryResponse
	if m == nil {
		return target
	}
	target = &DeltaDiscoveryResponse{}

	target.SystemVersionInfo = m.GetSystemVersionInfo()

	if m.GetResources() != nil {
		target.Resources = make([]*Resource, len(m.GetResources()))
		for idx, v := range m.GetResources() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Resources[idx] = h.Clone().(*Resource)
			} else {
				target.Resources[idx] = proto.Clone(v).(*Resource)
			}

		}
	}

	target.TypeUrl = m.GetTypeUrl()

	if m.GetRemovedResources() != nil {
		target.RemovedResources = make([]string, len(m.GetRemovedResources()))
		for idx, v := range m.GetRemovedResources() {

			target.RemovedResources[idx] = v

		}
	}

	target.Nonce = m.GetNonce()

	return target
}

// Clone function
func (m *Resource) Clone() proto.Message {
	var target *Resource
	if m == nil {
		return target
	}
	target = &Resource{}

	target.Name = m.GetName()

	if m.GetAliases() != nil {
		target.Aliases = make([]string, len(m.GetAliases()))
		for idx, v := range m.GetAliases() {

			target.Aliases[idx] = v

		}
	}

	target.Version = m.GetVersion()

	if h, ok := interface{}(m.GetResource()).(clone.Cloner); ok {
		target.Resource = h.Clone().(*github_com_golang_protobuf_ptypes_any.Any)
	} else {
		target.Resource = proto.Clone(m.GetResource()).(*github_com_golang_protobuf_ptypes_any.Any)
	}

	return target
}
