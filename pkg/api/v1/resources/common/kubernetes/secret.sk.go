// Code generated by solo-kit. DO NOT EDIT.

package kubernetes

import (
	"sort"

	github_com_solo_io_solo_kit_api_external_kubernetes_secret "github.com/solo-io/solo-kit/api/external/kubernetes/secret"

	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"github.com/solo-io/solo-kit/pkg/utils/hashutils"
)

func NewSecret(namespace, name string) *Secret {
	secret := &Secret{}
	secret.Secret.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return secret
}

// require custom resource to implement Clone() as well as resources.Resource interface

type CloneableSecret interface {
	resources.Resource
	Clone() *github_com_solo_io_solo_kit_api_external_kubernetes_secret.Secret
}

var _ CloneableSecret = &github_com_solo_io_solo_kit_api_external_kubernetes_secret.Secret{}

type Secret struct {
	github_com_solo_io_solo_kit_api_external_kubernetes_secret.Secret
}

func (r *Secret) Clone() resources.Resource {
	return &Secret{Secret: *r.Secret.Clone()}
}

func (r *Secret) Hash() uint64 {
	clone := r.Secret.Clone()

	resources.UpdateMetadata(clone, func(meta *core.Metadata) {
		meta.ResourceVersion = ""
	})

	return hashutils.HashAll(clone)
}

type SecretList []*Secret
type SecretsByNamespace map[string]SecretList

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list SecretList) Find(namespace, name string) (*Secret, error) {
	for _, secret := range list {
		if secret.GetMetadata().Name == name {
			if namespace == "" || secret.GetMetadata().Namespace == namespace {
				return secret, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find secret %v.%v", namespace, name)
}

func (list SecretList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, secret := range list {
		ress = append(ress, secret)
	}
	return ress
}

func (list SecretList) Names() []string {
	var names []string
	for _, secret := range list {
		names = append(names, secret.GetMetadata().Name)
	}
	return names
}

func (list SecretList) NamespacesDotNames() []string {
	var names []string
	for _, secret := range list {
		names = append(names, secret.GetMetadata().Namespace+"."+secret.GetMetadata().Name)
	}
	return names
}

func (list SecretList) Sort() SecretList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list SecretList) Clone() SecretList {
	var secretList SecretList
	for _, secret := range list {
		secretList = append(secretList, resources.Clone(secret).(*Secret))
	}
	return secretList
}

func (list SecretList) Each(f func(element *Secret)) {
	for _, secret := range list {
		f(secret)
	}
}

func (list SecretList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *Secret) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

func (byNamespace SecretsByNamespace) Add(secret ...*Secret) {
	for _, item := range secret {
		byNamespace[item.GetMetadata().Namespace] = append(byNamespace[item.GetMetadata().Namespace], item)
	}
}

func (byNamespace SecretsByNamespace) Clear(namespace string) {
	delete(byNamespace, namespace)
}

func (byNamespace SecretsByNamespace) List() SecretList {
	var list SecretList
	for _, secretList := range byNamespace {
		list = append(list, secretList...)
	}
	return list.Sort()
}

func (byNamespace SecretsByNamespace) Clone() SecretsByNamespace {
	cloned := make(SecretsByNamespace)
	for ns, list := range byNamespace {
		cloned[ns] = list.Clone()
	}
	return cloned
}
