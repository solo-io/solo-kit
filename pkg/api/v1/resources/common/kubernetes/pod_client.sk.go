// Code generated by solo-kit. DO NOT EDIT.

package kubernetes

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type PodWatcher interface {
	// watch namespace-scoped pods
	Watch(namespace string, opts clients.WatchOpts) (<-chan PodList, <-chan error, error)
}

type PodClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*Pod, error)
	Write(resource *Pod, opts clients.WriteOpts) (*Pod, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (PodList, error)
	PodWatcher
}

type podClient struct {
	rc clients.ResourceClient
}

func NewPodClient(rcFactory factory.ResourceClientFactory) (PodClient, error) {
	return NewPodClientWithToken(rcFactory, "")
}

func NewPodClientWithToken(rcFactory factory.ResourceClientFactory, token string) (PodClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &Pod{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base Pod resource client")
	}
	return NewPodClientWithBase(rc), nil
}

func NewPodClientWithBase(rc clients.ResourceClient) PodClient {
	return &podClient{
		rc: rc,
	}
}

func (client *podClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *podClient) Register() error {
	return client.rc.Register()
}

func (client *podClient) Read(namespace, name string, opts clients.ReadOpts) (*Pod, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*Pod), nil
}

func (client *podClient) Write(pod *Pod, opts clients.WriteOpts) (*Pod, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(pod, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*Pod), nil
}

func (client *podClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *podClient) List(namespace string, opts clients.ListOpts) (PodList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToPod(resourceList), nil
}

func (client *podClient) Watch(namespace string, opts clients.WatchOpts) (<-chan PodList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	podsChan := make(chan PodList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				podsChan <- convertToPod(resourceList)
			case <-opts.Ctx.Done():
				close(podsChan)
				return
			}
		}
	}()
	return podsChan, errs, nil
}

func convertToPod(resources resources.ResourceList) PodList {
	var podList PodList
	for _, resource := range resources {
		podList = append(podList, resource.(*Pod))
	}
	return podList
}
