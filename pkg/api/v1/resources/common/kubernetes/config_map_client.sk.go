// Code generated by solo-kit. DO NOT EDIT.

package kubernetes

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type ConfigMapWatcher interface {
	// watch namespace-scoped configmaps
	Watch(namespace string, opts clients.WatchOpts) (<-chan ConfigMapList, <-chan error, error)
}

type ConfigMapClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*ConfigMap, error)
	Write(resource *ConfigMap, opts clients.WriteOpts) (*ConfigMap, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (ConfigMapList, error)
	ConfigMapWatcher
}

type configMapClient struct {
	rc clients.ResourceClient
}

func NewConfigMapClient(rcFactory factory.ResourceClientFactory) (ConfigMapClient, error) {
	return NewConfigMapClientWithToken(rcFactory, "")
}

func NewConfigMapClientWithToken(rcFactory factory.ResourceClientFactory, token string) (ConfigMapClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &ConfigMap{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base ConfigMap resource client")
	}
	return NewConfigMapClientWithBase(rc), nil
}

func NewConfigMapClientWithBase(rc clients.ResourceClient) ConfigMapClient {
	return &configMapClient{
		rc: rc,
	}
}

func (client *configMapClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *configMapClient) Register() error {
	return client.rc.Register()
}

func (client *configMapClient) Read(namespace, name string, opts clients.ReadOpts) (*ConfigMap, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*ConfigMap), nil
}

func (client *configMapClient) Write(configMap *ConfigMap, opts clients.WriteOpts) (*ConfigMap, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(configMap, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*ConfigMap), nil
}

func (client *configMapClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *configMapClient) List(namespace string, opts clients.ListOpts) (ConfigMapList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToConfigMap(resourceList), nil
}

func (client *configMapClient) Watch(namespace string, opts clients.WatchOpts) (<-chan ConfigMapList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	configmapsChan := make(chan ConfigMapList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				configmapsChan <- convertToConfigMap(resourceList)
			case <-opts.Ctx.Done():
				close(configmapsChan)
				return
			}
		}
	}()
	return configmapsChan, errs, nil
}

func convertToConfigMap(resources resources.ResourceList) ConfigMapList {
	var configMapList ConfigMapList
	for _, resource := range resources {
		configMapList = append(configMapList, resource.(*ConfigMap))
	}
	return configMapList
}
