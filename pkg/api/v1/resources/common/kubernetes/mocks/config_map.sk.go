// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/eitanya/go/src/github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes/config_map.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	configmap "github.com/solo-io/solo-kit/api/external/kubernetes/configmap"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// MockCloneableConfigMap is a mock of CloneableConfigMap interface
type MockCloneableConfigMap struct {
	ctrl     *gomock.Controller
	recorder *MockCloneableConfigMapMockRecorder
}

// MockCloneableConfigMapMockRecorder is the mock recorder for MockCloneableConfigMap
type MockCloneableConfigMapMockRecorder struct {
	mock *MockCloneableConfigMap
}

// NewMockCloneableConfigMap creates a new mock instance
func NewMockCloneableConfigMap(ctrl *gomock.Controller) *MockCloneableConfigMap {
	mock := &MockCloneableConfigMap{ctrl: ctrl}
	mock.recorder = &MockCloneableConfigMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloneableConfigMap) EXPECT() *MockCloneableConfigMapMockRecorder {
	return m.recorder
}

// GetMetadata mocks base method
func (m *MockCloneableConfigMap) GetMetadata() core.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(core.Metadata)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockCloneableConfigMapMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockCloneableConfigMap)(nil).GetMetadata))
}

// SetMetadata mocks base method
func (m *MockCloneableConfigMap) SetMetadata(meta core.Metadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMetadata", meta)
}

// SetMetadata indicates an expected call of SetMetadata
func (mr *MockCloneableConfigMapMockRecorder) SetMetadata(meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetadata", reflect.TypeOf((*MockCloneableConfigMap)(nil).SetMetadata), meta)
}

// Equal mocks base method
func (m *MockCloneableConfigMap) Equal(that interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", that)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockCloneableConfigMapMockRecorder) Equal(that interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockCloneableConfigMap)(nil).Equal), that)
}

// Clone mocks base method
func (m *MockCloneableConfigMap) Clone() *configmap.ConfigMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(*configmap.ConfigMap)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockCloneableConfigMapMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockCloneableConfigMap)(nil).Clone))
}
