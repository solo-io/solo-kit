// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/v1/resources/common/kubernetes/kube_namespace_reconciler.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	kubernetes "github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes"
)

// MockKubeNamespaceReconciler is a mock of KubeNamespaceReconciler interface
type MockKubeNamespaceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockKubeNamespaceReconcilerMockRecorder
}

// MockKubeNamespaceReconcilerMockRecorder is the mock recorder for MockKubeNamespaceReconciler
type MockKubeNamespaceReconcilerMockRecorder struct {
	mock *MockKubeNamespaceReconciler
}

// NewMockKubeNamespaceReconciler creates a new mock instance
func NewMockKubeNamespaceReconciler(ctrl *gomock.Controller) *MockKubeNamespaceReconciler {
	mock := &MockKubeNamespaceReconciler{ctrl: ctrl}
	mock.recorder = &MockKubeNamespaceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeNamespaceReconciler) EXPECT() *MockKubeNamespaceReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method
func (m *MockKubeNamespaceReconciler) Reconcile(namespace string, desiredResources kubernetes.KubeNamespaceList, transition kubernetes.TransitionKubeNamespaceFunc, opts clients.ListOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", namespace, desiredResources, transition, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile
func (mr *MockKubeNamespaceReconcilerMockRecorder) Reconcile(namespace, desiredResources, transition, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockKubeNamespaceReconciler)(nil).Reconcile), namespace, desiredResources, transition, opts)
}
