// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: status.proto

package core

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	google_golang_org_protobuf_types_known_structpb "google.golang.org/protobuf/types/known/structpb"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *NamespacedStatuses) Clone() proto.Message {
	var target *NamespacedStatuses
	if m == nil {
		return target
	}
	target = &NamespacedStatuses{}

	if m.GetStatuses() != nil {
		target.Statuses = make(map[string]*Status, len(m.GetStatuses()))
		for k, v := range m.GetStatuses() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Statuses[k] = h.Clone().(*Status)
			} else {
				target.Statuses[k] = proto.Clone(v).(*Status)
			}

		}
	}

	return target
}

// Clone function
func (m *Status) Clone() proto.Message {
	var target *Status
	if m == nil {
		return target
	}
	target = &Status{}

	target.State = m.GetState()

	target.Reason = m.GetReason()

	target.ReportedBy = m.GetReportedBy()

	if m.GetSubresourceStatuses() != nil {
		target.SubresourceStatuses = make(map[string]*Status, len(m.GetSubresourceStatuses()))
		for k, v := range m.GetSubresourceStatuses() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SubresourceStatuses[k] = h.Clone().(*Status)
			} else {
				target.SubresourceStatuses[k] = proto.Clone(v).(*Status)
			}

		}
	}

	if h, ok := interface{}(m.GetDetails()).(clone.Cloner); ok {
		target.Details = h.Clone().(*google_golang_org_protobuf_types_known_structpb.Struct)
	} else {
		target.Details = proto.Clone(m.GetDetails()).(*google_golang_org_protobuf_types_known_structpb.Struct)
	}

	if m.GetMessages() != nil {
		target.Messages = make([]string, len(m.GetMessages()))
		for idx, v := range m.GetMessages() {

			target.Messages[idx] = v

		}
	}

	return target
}
