/*
Copyright The Kubernetes Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	scheme "github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd/client/clientset/versioned/scheme"
	v1 "github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd/solo.io/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ResourcesGetter has a method to return a ResourceInterface.
// A group's client should implement this interface.
type ResourcesGetter interface {
	Resources(namespace string) ResourceInterface
}

// ResourceInterface has methods to work with Resource resources.
type ResourceInterface interface {
	Create(ctx context.Context, resource *v1.Resource, opts metav1.CreateOptions) (*v1.Resource, error)
	Update(ctx context.Context, resource *v1.Resource, opts metav1.UpdateOptions) (*v1.Resource, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.Resource, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.ResourceList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Resource, err error)
	ResourceExpansion
}

// resources implements ResourceInterface
type resources struct {
	client rest.Interface
	ns     string
	def    crd.Crd
}

// newResources returns a Resources
func newResources(c *ResourcesV1Client, namespace string, def crd.Crd) *resources {
	return &resources{
		client: c.RESTClient(),
		ns:     namespace,
		def:    def,
	}
}

// Get takes name of the resource, and returns the corresponding resource object, and an error if there is any.
func (c *resources) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.Resource, err error) {
	result = &v1.Resource{}
	req := c.client.Get()
	if !c.def.ClusterScoped {
		req = req.Namespace(c.ns)
	}
	err = req.
		Resource(c.def.Plural).
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Resources that match those selectors.
func (c *resources) List(ctx context.Context, opts metav1.ListOptions) (result *v1.ResourceList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.ResourceList{}
	req := c.client.Get()
	if !c.def.ClusterScoped {
		req = req.Namespace(c.ns)
	}
	err = req.
		Resource(c.def.Plural).
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested resources.
func (c *resources) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	req := c.client.Get()
	if !c.def.ClusterScoped {
		req = req.Namespace(c.ns)
	}
	return req.
		Resource(c.def.Plural).
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a resource and creates it.  Returns the server's representation of the resource, and an error, if there is any.
func (c *resources) Create(ctx context.Context, resource *v1.Resource, opts metav1.CreateOptions) (result *v1.Resource, err error) {
	result = &v1.Resource{}
	req := c.client.Post()
	if !c.def.ClusterScoped {
		req = req.Namespace(c.ns)
	}
	err = req.
		Resource(c.def.Plural).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(resource).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a resource and updates it. Returns the server's representation of the resource, and an error, if there is any.
func (c *resources) Update(ctx context.Context, resource *v1.Resource, opts metav1.UpdateOptions) (result *v1.Resource, err error) {
	result = &v1.Resource{}
	req := c.client.Put()
	if !c.def.ClusterScoped {
		req = req.Namespace(c.ns)
	}
	err = req.
		Resource(c.def.Plural).
		Name(resource.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(resource).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the resource and deletes it. Returns an error if one occurs.
func (c *resources) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	req := c.client.Delete()
	if !c.def.ClusterScoped {
		req = req.Namespace(c.ns)
	}
	return req.
		Resource(c.def.Plural).
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *resources) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	req := c.client.Delete()
	if !c.def.ClusterScoped {
		req = req.Namespace(c.ns)
	}
	return req.
		Resource(c.def.Plural).
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched resource.
func (c *resources) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Resource, err error) {
	result = &v1.Resource{}
	req := c.client.Patch(pt)
	if !c.def.ClusterScoped {
		req = req.Namespace(c.ns)
	}
	err = req.
		Resource(c.def.Plural).
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
