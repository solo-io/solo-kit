/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	clientset "github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd/client/clientset/versioned"
	realregisterfile "github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd/client/clientset/versioned/scheme"
	resourcesv1 "github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd/client/clientset/versioned/typed/solo.io/v1"
	fakeresourcesv1 "github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd/client/clientset/versioned/typed/solo.io/v1/fake"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(crd crd.Crd, objects ...runtime.Object) *Clientset { // NOTE(marco): this line was updated

	// ###############################################################################################
	// ###############################################################################################
	// NOTE(marco): the following line was updated to reference the scheme our CRD objects register
	// with. Originally, this pointed to the scheme in the register.go file in the same package.
	//
	// The generated code expected pkg/api/v1/clients/kube/crd/solo.io/v1 to export a function named
	// "AddToScheme" that would be called from both fake/register.go and scheme/register.go to add
	// the custom types to the respective schemes. We moved the same logic to the "NewCrd" function
	// in pkg/api/v1/clients/kube/crd/crd.go, but it always writes to the scheme in scheme/register.go,
	// so we reference it here.
	// ###############################################################################################
	// ###############################################################################################
	o := testing.NewObjectTracker(realregisterfile.Scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	cs.crd = crd // NOTE(marco): this line was added

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	crd       crd.Crd // NOTE(marco): this line was added
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

var _ clientset.Interface = &Clientset{}

// ResourcesV1 retrieves the ResourcesV1Client
func (c *Clientset) ResourcesV1() resourcesv1.ResourcesV1Interface {
	return &fakeresourcesv1.FakeResourcesV1{Fake: &c.Fake, Crd: c.crd} // NOTE(marco): this line was updated
}

// Resources retrieves the ResourcesV1Client
func (c *Clientset) Resources() resourcesv1.ResourcesV1Interface {
	return &fakeresourcesv1.FakeResourcesV1{Fake: &c.Fake, Crd: c.crd} // NOTE(marco): this line was updated
}
