// Code generated by MockGen. DO NOT EDIT.
// Source: cache_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clustercache "github.com/solo-io/solo-kit/pkg/multicluster/clustercache"
	rest "k8s.io/client-go/rest"
)

// MockPerClusterCache is a mock of PerClusterCache interface
type MockPerClusterCache struct {
	ctrl     *gomock.Controller
	recorder *MockPerClusterCacheMockRecorder
}

// MockPerClusterCacheMockRecorder is the mock recorder for MockPerClusterCache
type MockPerClusterCacheMockRecorder struct {
	mock *MockPerClusterCache
}

// NewMockPerClusterCache creates a new mock instance
func NewMockPerClusterCache(ctrl *gomock.Controller) *MockPerClusterCache {
	mock := &MockPerClusterCache{ctrl: ctrl}
	mock.recorder = &MockPerClusterCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPerClusterCache) EXPECT() *MockPerClusterCacheMockRecorder {
	return m.recorder
}

// IsPerCluster mocks base method
func (m *MockPerClusterCache) IsPerCluster() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsPerCluster")
}

// IsPerCluster indicates an expected call of IsPerCluster
func (mr *MockPerClusterCacheMockRecorder) IsPerCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPerCluster", reflect.TypeOf((*MockPerClusterCache)(nil).IsPerCluster))
}

// MockPerClusterCacheGetter is a mock of CacheGetter interface
type MockPerClusterCacheGetter struct {
	ctrl     *gomock.Controller
	recorder *MockPerClusterCacheGetterMockRecorder
}

// MockPerClusterCacheGetterMockRecorder is the mock recorder for MockPerClusterCacheGetter
type MockPerClusterCacheGetterMockRecorder struct {
	mock *MockPerClusterCacheGetter
}

// NewMockPerClusterCacheGetter creates a new mock instance
func NewMockPerClusterCacheGetter(ctrl *gomock.Controller) *MockPerClusterCacheGetter {
	mock := &MockPerClusterCacheGetter{ctrl: ctrl}
	mock.recorder = &MockPerClusterCacheGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPerClusterCacheGetter) EXPECT() *MockPerClusterCacheGetterMockRecorder {
	return m.recorder
}

// GetCache mocks base method
func (m *MockPerClusterCacheGetter) GetCache(cluster string, restConfig *rest.Config) clustercache.PerClusterCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", cluster, restConfig)
	ret0, _ := ret[0].(clustercache.PerClusterCache)
	return ret0
}

// GetCache indicates an expected call of GetCache
func (mr *MockPerClusterCacheGetterMockRecorder) GetCache(cluster, restConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockPerClusterCacheGetter)(nil).GetCache), cluster, restConfig)
}

// MockPerClusterCacheManager is a mock of CacheManager interface
type MockPerClusterCacheManager struct {
	ctrl     *gomock.Controller
	recorder *MockPerClusterCacheManagerMockRecorder
}

// MockPerClusterCacheManagerMockRecorder is the mock recorder for MockPerClusterCacheManager
type MockPerClusterCacheManagerMockRecorder struct {
	mock *MockPerClusterCacheManager
}

// NewMockPerClusterCacheManager creates a new mock instance
func NewMockPerClusterCacheManager(ctrl *gomock.Controller) *MockPerClusterCacheManager {
	mock := &MockPerClusterCacheManager{ctrl: ctrl}
	mock.recorder = &MockPerClusterCacheManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPerClusterCacheManager) EXPECT() *MockPerClusterCacheManagerMockRecorder {
	return m.recorder
}

// ClusterAdded mocks base method
func (m *MockPerClusterCacheManager) ClusterAdded(cluster string, restConfig *rest.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClusterAdded", cluster, restConfig)
}

// ClusterAdded indicates an expected call of ClusterAdded
func (mr *MockPerClusterCacheManagerMockRecorder) ClusterAdded(cluster, restConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAdded", reflect.TypeOf((*MockPerClusterCacheManager)(nil).ClusterAdded), cluster, restConfig)
}

// ClusterRemoved mocks base method
func (m *MockPerClusterCacheManager) ClusterRemoved(cluster string, restConfig *rest.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClusterRemoved", cluster, restConfig)
}

// ClusterRemoved indicates an expected call of ClusterRemoved
func (mr *MockPerClusterCacheManagerMockRecorder) ClusterRemoved(cluster, restConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRemoved", reflect.TypeOf((*MockPerClusterCacheManager)(nil).ClusterRemoved), cluster, restConfig)
}

// GetCache mocks base method
func (m *MockPerClusterCacheManager) GetCache(cluster string, restConfig *rest.Config) clustercache.PerClusterCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", cluster, restConfig)
	ret0, _ := ret[0].(clustercache.PerClusterCache)
	return ret0
}

// GetCache indicates an expected call of GetCache
func (mr *MockPerClusterCacheManagerMockRecorder) GetCache(cluster, restConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockPerClusterCacheManager)(nil).GetCache), cluster, restConfig)
}
