// Code generated by MockGen. DO NOT EDIT.
// Source: core_cache_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cache "github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/cache"
	rest "k8s.io/client-go/rest"
)

// MockKubeCoreCacheGetter is a mock of KubeCoreCacheGetter interface
type MockKubeCoreCacheGetter struct {
	ctrl     *gomock.Controller
	recorder *MockKubeCoreCacheGetterMockRecorder
}

// MockKubeCoreCacheGetterMockRecorder is the mock recorder for MockKubeCoreCacheGetter
type MockKubeCoreCacheGetterMockRecorder struct {
	mock *MockKubeCoreCacheGetter
}

// NewMockKubeCoreCacheGetter creates a new mock instance
func NewMockKubeCoreCacheGetter(ctrl *gomock.Controller) *MockKubeCoreCacheGetter {
	mock := &MockKubeCoreCacheGetter{ctrl: ctrl}
	mock.recorder = &MockKubeCoreCacheGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeCoreCacheGetter) EXPECT() *MockKubeCoreCacheGetterMockRecorder {
	return m.recorder
}

// GetCache mocks base method
func (m *MockKubeCoreCacheGetter) GetCache(cluster string, restConfig *rest.Config) cache.KubeCoreCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", cluster, restConfig)
	ret0, _ := ret[0].(cache.KubeCoreCache)
	return ret0
}

// GetCache indicates an expected call of GetCache
func (mr *MockKubeCoreCacheGetterMockRecorder) GetCache(cluster, restConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockKubeCoreCacheGetter)(nil).GetCache), cluster, restConfig)
}

// MockKubeCoreCacheManager is a mock of KubeCoreCacheManager interface
type MockKubeCoreCacheManager struct {
	ctrl     *gomock.Controller
	recorder *MockKubeCoreCacheManagerMockRecorder
}

// MockKubeCoreCacheManagerMockRecorder is the mock recorder for MockKubeCoreCacheManager
type MockKubeCoreCacheManagerMockRecorder struct {
	mock *MockKubeCoreCacheManager
}

// NewMockKubeCoreCacheManager creates a new mock instance
func NewMockKubeCoreCacheManager(ctrl *gomock.Controller) *MockKubeCoreCacheManager {
	mock := &MockKubeCoreCacheManager{ctrl: ctrl}
	mock.recorder = &MockKubeCoreCacheManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeCoreCacheManager) EXPECT() *MockKubeCoreCacheManagerMockRecorder {
	return m.recorder
}

// ClusterAdded mocks base method
func (m *MockKubeCoreCacheManager) ClusterAdded(cluster string, restConfig *rest.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClusterAdded", cluster, restConfig)
}

// ClusterAdded indicates an expected call of ClusterAdded
func (mr *MockKubeCoreCacheManagerMockRecorder) ClusterAdded(cluster, restConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAdded", reflect.TypeOf((*MockKubeCoreCacheManager)(nil).ClusterAdded), cluster, restConfig)
}

// ClusterRemoved mocks base method
func (m *MockKubeCoreCacheManager) ClusterRemoved(cluster string, restConfig *rest.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClusterRemoved", cluster, restConfig)
}

// ClusterRemoved indicates an expected call of ClusterRemoved
func (mr *MockKubeCoreCacheManagerMockRecorder) ClusterRemoved(cluster, restConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRemoved", reflect.TypeOf((*MockKubeCoreCacheManager)(nil).ClusterRemoved), cluster, restConfig)
}

// GetCache mocks base method
func (m *MockKubeCoreCacheManager) GetCache(cluster string, restConfig *rest.Config) cache.KubeCoreCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", cluster, restConfig)
	ret0, _ := ret[0].(cache.KubeCoreCache)
	return ret0
}

// GetCache indicates an expected call of GetCache
func (mr *MockKubeCoreCacheManagerMockRecorder) GetCache(cluster, restConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockKubeCoreCacheManager)(nil).GetCache), cluster, restConfig)
}
