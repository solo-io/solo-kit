// Code generated by MockGen. DO NOT EDIT.
// Source: shared_cache_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kube "github.com/solo-io/solo-kit/pkg/api/v1/clients/kube"
	rest "k8s.io/client-go/rest"
)

// MockKubeSharedCacheGetter is a mock of KubeSharedCacheGetter interface
type MockKubeSharedCacheGetter struct {
	ctrl     *gomock.Controller
	recorder *MockKubeSharedCacheGetterMockRecorder
}

// MockKubeSharedCacheGetterMockRecorder is the mock recorder for MockKubeSharedCacheGetter
type MockKubeSharedCacheGetterMockRecorder struct {
	mock *MockKubeSharedCacheGetter
}

// NewMockKubeSharedCacheGetter creates a new mock instance
func NewMockKubeSharedCacheGetter(ctrl *gomock.Controller) *MockKubeSharedCacheGetter {
	mock := &MockKubeSharedCacheGetter{ctrl: ctrl}
	mock.recorder = &MockKubeSharedCacheGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeSharedCacheGetter) EXPECT() *MockKubeSharedCacheGetterMockRecorder {
	return m.recorder
}

// GetCache mocks base method
func (m *MockKubeSharedCacheGetter) GetCache(cluster string) kube.SharedCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", cluster)
	ret0, _ := ret[0].(kube.SharedCache)
	return ret0
}

// GetCache indicates an expected call of GetCache
func (mr *MockKubeSharedCacheGetterMockRecorder) GetCache(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockKubeSharedCacheGetter)(nil).GetCache), cluster)
}

// MockKubeSharedCacheManager is a mock of KubeSharedCacheManager interface
type MockKubeSharedCacheManager struct {
	ctrl     *gomock.Controller
	recorder *MockKubeSharedCacheManagerMockRecorder
}

// MockKubeSharedCacheManagerMockRecorder is the mock recorder for MockKubeSharedCacheManager
type MockKubeSharedCacheManagerMockRecorder struct {
	mock *MockKubeSharedCacheManager
}

// NewMockKubeSharedCacheManager creates a new mock instance
func NewMockKubeSharedCacheManager(ctrl *gomock.Controller) *MockKubeSharedCacheManager {
	mock := &MockKubeSharedCacheManager{ctrl: ctrl}
	mock.recorder = &MockKubeSharedCacheManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeSharedCacheManager) EXPECT() *MockKubeSharedCacheManagerMockRecorder {
	return m.recorder
}

// ClusterAdded mocks base method
func (m *MockKubeSharedCacheManager) ClusterAdded(cluster string, restConfig *rest.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClusterAdded", cluster, restConfig)
}

// ClusterAdded indicates an expected call of ClusterAdded
func (mr *MockKubeSharedCacheManagerMockRecorder) ClusterAdded(cluster, restConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAdded", reflect.TypeOf((*MockKubeSharedCacheManager)(nil).ClusterAdded), cluster, restConfig)
}

// ClusterRemoved mocks base method
func (m *MockKubeSharedCacheManager) ClusterRemoved(cluster string, restConfig *rest.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClusterRemoved", cluster, restConfig)
}

// ClusterRemoved indicates an expected call of ClusterRemoved
func (mr *MockKubeSharedCacheManagerMockRecorder) ClusterRemoved(cluster, restConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRemoved", reflect.TypeOf((*MockKubeSharedCacheManager)(nil).ClusterRemoved), cluster, restConfig)
}

// GetCache mocks base method
func (m *MockKubeSharedCacheManager) GetCache(cluster string) kube.SharedCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", cluster)
	ret0, _ := ret[0].(kube.SharedCache)
	return ret0
}

// GetCache indicates an expected call of GetCache
func (mr *MockKubeSharedCacheManagerMockRecorder) GetCache(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockKubeSharedCacheManager)(nil).GetCache), cluster)
}
