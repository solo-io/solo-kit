// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"
	"hash"
	"hash/fnv"

	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type KubeconfigsSnapshot struct {
	Kubeconfigs KubeConfigList
}

func (s KubeconfigsSnapshot) Clone() KubeconfigsSnapshot {
	return KubeconfigsSnapshot{
		Kubeconfigs: s.Kubeconfigs.Clone(),
	}
}

func (s KubeconfigsSnapshot) Hash(hasher hash.Hash64) (uint64, error) {
	if hasher == nil {
		hasher = fnv.New64()
	}
	if _, err := s.hashKubeconfigs(hasher); err != nil {
		return 0, err
	}
	return hasher.Sum64(), nil
}

func (s KubeconfigsSnapshot) hashKubeconfigs(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Kubeconfigs.AsInterfaces()...)
}

func (s KubeconfigsSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	hasher := fnv.New64()
	KubeconfigsHash, _ := s.hashKubeconfigs(hasher)
	fields = append(fields, zap.Uint64("kubeconfigs", KubeconfigsHash))
	snapshotHash, _ := s.Hash(hasher)
	return append(fields, zap.Uint64("snapshotHash", snapshotHash))
}

type KubeconfigsSnapshotStringer struct {
	Version     uint64
	Kubeconfigs []string
}

func (ss KubeconfigsSnapshotStringer) String() string {
	s := fmt.Sprintf("KubeconfigsSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Kubeconfigs %v\n", len(ss.Kubeconfigs))
	for _, name := range ss.Kubeconfigs {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s KubeconfigsSnapshot) Stringer() KubeconfigsSnapshotStringer {
	snapshotHash, _ := s.Hash(nil)
	return KubeconfigsSnapshotStringer{
		Version:     snapshotHash,
		Kubeconfigs: s.Kubeconfigs.NamespacesDotNames(),
	}
}
