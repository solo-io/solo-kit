// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"

	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type KubeconfigsSnapshot struct {
	Kubeconfigs KubeconfigsByNamespace
}

func (s KubeconfigsSnapshot) Clone() KubeconfigsSnapshot {
	return KubeconfigsSnapshot{
		Kubeconfigs: s.Kubeconfigs.Clone(),
	}
}

func (s KubeconfigsSnapshot) Hash() uint64 {
	return hashutils.HashAll(
		s.hashKubeconfigs(),
	)
}

func (s KubeconfigsSnapshot) hashKubeconfigs() uint64 {
	return hashutils.HashAll(s.Kubeconfigs.List().AsInterfaces()...)
}

func (s KubeconfigsSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	fields = append(fields, zap.Uint64("kubeconfigs", s.hashKubeconfigs()))

	return append(fields, zap.Uint64("snapshotHash", s.Hash()))
}

type KubeconfigsSnapshotStringer struct {
	Version     uint64
	Kubeconfigs []string
}

func (ss KubeconfigsSnapshotStringer) String() string {
	s := fmt.Sprintf("KubeconfigsSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Kubeconfigs %v\n", len(ss.Kubeconfigs))
	for _, name := range ss.Kubeconfigs {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s KubeconfigsSnapshot) Stringer() KubeconfigsSnapshotStringer {
	return KubeconfigsSnapshotStringer{
		Version:     s.Hash(),
		Kubeconfigs: s.Kubeconfigs.List().NamespacesDotNames(),
	}
}
