// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/eitanya/go/src/github.com/solo-io/solo-kit/pkg/multicluster/v1/kube_config.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/solo-kit/api/multicluster/v1"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// MockCloneableKubeConfig is a mock of CloneableKubeConfig interface
type MockCloneableKubeConfig struct {
	ctrl     *gomock.Controller
	recorder *MockCloneableKubeConfigMockRecorder
}

// MockCloneableKubeConfigMockRecorder is the mock recorder for MockCloneableKubeConfig
type MockCloneableKubeConfigMockRecorder struct {
	mock *MockCloneableKubeConfig
}

// NewMockCloneableKubeConfig creates a new mock instance
func NewMockCloneableKubeConfig(ctrl *gomock.Controller) *MockCloneableKubeConfig {
	mock := &MockCloneableKubeConfig{ctrl: ctrl}
	mock.recorder = &MockCloneableKubeConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloneableKubeConfig) EXPECT() *MockCloneableKubeConfigMockRecorder {
	return m.recorder
}

// GetMetadata mocks base method
func (m *MockCloneableKubeConfig) GetMetadata() core.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(core.Metadata)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockCloneableKubeConfigMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockCloneableKubeConfig)(nil).GetMetadata))
}

// SetMetadata mocks base method
func (m *MockCloneableKubeConfig) SetMetadata(meta core.Metadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMetadata", meta)
}

// SetMetadata indicates an expected call of SetMetadata
func (mr *MockCloneableKubeConfigMockRecorder) SetMetadata(meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetadata", reflect.TypeOf((*MockCloneableKubeConfig)(nil).SetMetadata), meta)
}

// Equal mocks base method
func (m *MockCloneableKubeConfig) Equal(that interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", that)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockCloneableKubeConfigMockRecorder) Equal(that interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockCloneableKubeConfig)(nil).Equal), that)
}

// Clone mocks base method
func (m *MockCloneableKubeConfig) Clone() *v1.KubeConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(*v1.KubeConfig)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockCloneableKubeConfigMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockCloneableKubeConfig)(nil).Clone))
}
