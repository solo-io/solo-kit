// Code generated by solo-kit. DO NOT EDIT.

package v2alpha1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type FrequentlyChangingAnnotationsResourceWatcher interface {
	// watch namespace-scoped Fcars
	Watch(namespace string, opts clients.WatchOpts) (<-chan FrequentlyChangingAnnotationsResourceList, <-chan error, error)
}

type FrequentlyChangingAnnotationsResourceClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*FrequentlyChangingAnnotationsResource, error)
	Write(resource *FrequentlyChangingAnnotationsResource, opts clients.WriteOpts) (*FrequentlyChangingAnnotationsResource, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (FrequentlyChangingAnnotationsResourceList, error)
	FrequentlyChangingAnnotationsResourceWatcher
}

type frequentlyChangingAnnotationsResourceClient struct {
	rc clients.ResourceClient
}

func NewFrequentlyChangingAnnotationsResourceClient(rcFactory factory.ResourceClientFactory) (FrequentlyChangingAnnotationsResourceClient, error) {
	return NewFrequentlyChangingAnnotationsResourceClientWithToken(rcFactory, "")
}

func NewFrequentlyChangingAnnotationsResourceClientWithToken(rcFactory factory.ResourceClientFactory, token string) (FrequentlyChangingAnnotationsResourceClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &FrequentlyChangingAnnotationsResource{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base FrequentlyChangingAnnotationsResource resource client")
	}
	return NewFrequentlyChangingAnnotationsResourceClientWithBase(rc), nil
}

func NewFrequentlyChangingAnnotationsResourceClientWithBase(rc clients.ResourceClient) FrequentlyChangingAnnotationsResourceClient {
	return &frequentlyChangingAnnotationsResourceClient{
		rc: rc,
	}
}

func (client *frequentlyChangingAnnotationsResourceClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *frequentlyChangingAnnotationsResourceClient) Register() error {
	return client.rc.Register()
}

func (client *frequentlyChangingAnnotationsResourceClient) Read(namespace, name string, opts clients.ReadOpts) (*FrequentlyChangingAnnotationsResource, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*FrequentlyChangingAnnotationsResource), nil
}

func (client *frequentlyChangingAnnotationsResourceClient) Write(frequentlyChangingAnnotationsResource *FrequentlyChangingAnnotationsResource, opts clients.WriteOpts) (*FrequentlyChangingAnnotationsResource, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(frequentlyChangingAnnotationsResource, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*FrequentlyChangingAnnotationsResource), nil
}

func (client *frequentlyChangingAnnotationsResourceClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *frequentlyChangingAnnotationsResourceClient) List(namespace string, opts clients.ListOpts) (FrequentlyChangingAnnotationsResourceList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToFrequentlyChangingAnnotationsResource(resourceList), nil
}

func (client *frequentlyChangingAnnotationsResourceClient) Watch(namespace string, opts clients.WatchOpts) (<-chan FrequentlyChangingAnnotationsResourceList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	fcarsChan := make(chan FrequentlyChangingAnnotationsResourceList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				fcarsChan <- convertToFrequentlyChangingAnnotationsResource(resourceList)
			case <-opts.Ctx.Done():
				close(fcarsChan)
				return
			}
		}
	}()
	return fcarsChan, errs, nil
}

func convertToFrequentlyChangingAnnotationsResource(resources resources.ResourceList) FrequentlyChangingAnnotationsResourceList {
	var frequentlyChangingAnnotationsResourceList FrequentlyChangingAnnotationsResourceList
	for _, resource := range resources {
		frequentlyChangingAnnotationsResourceList = append(frequentlyChangingAnnotationsResourceList, resource.(*FrequentlyChangingAnnotationsResource))
	}
	return frequentlyChangingAnnotationsResourceList
}
