// Code generated by solo-kit. DO NOT EDIT.

package v2alpha1

import (
	"fmt"
	"hash"
	"hash/fnv"

	testing_solo_io "github.com/solo-io/solo-kit/test/mocks/v1"

	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type TestingSnapshot struct {
	Mocks MockResourceList
	Fakes testing_solo_io.FakeResourceList
}

func (s TestingSnapshot) Clone() TestingSnapshot {
	return TestingSnapshot{
		Mocks: s.Mocks.Clone(),
		Fakes: s.Fakes.Clone(),
	}
}

func (s TestingSnapshot) Hash(hasher hash.Hash64) (uint64, error) {
	if hasher == nil {
		hasher = fnv.New64()
	}
	if _, err := s.hashMocks(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashFakes(hasher); err != nil {
		return 0, err
	}
	return hasher.Sum64(), nil
}

func (s TestingSnapshot) hashMocks(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Mocks.AsInterfaces()...)
}

func (s TestingSnapshot) hashFakes(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Fakes.AsInterfaces()...)
}

func (s TestingSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	hasher := fnv.New64()
	MocksHash, _ := s.hashMocks(hasher)
	fields = append(fields, zap.Uint64("mocks", MocksHash))
	FakesHash, _ := s.hashFakes(hasher)
	fields = append(fields, zap.Uint64("fakes", FakesHash))
	snapshotHash, _ := s.Hash(hasher)
	return append(fields, zap.Uint64("snapshotHash", snapshotHash))
}

type TestingSnapshotStringer struct {
	Version uint64
	Mocks   []string
	Fakes   []string
}

func (ss TestingSnapshotStringer) String() string {
	s := fmt.Sprintf("TestingSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Mocks %v\n", len(ss.Mocks))
	for _, name := range ss.Mocks {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Fakes %v\n", len(ss.Fakes))
	for _, name := range ss.Fakes {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s TestingSnapshot) Stringer() TestingSnapshotStringer {
	snapshotHash, _ := s.Hash(nil)
	return TestingSnapshotStringer{
		Version: snapshotHash,
		Mocks:   s.Mocks.NamespacesDotNames(),
		Fakes:   s.Fakes.NamespacesDotNames(),
	}
}
