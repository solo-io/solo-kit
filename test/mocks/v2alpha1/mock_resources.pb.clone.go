// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/test/mocks/api/v2alpha1/mock_resources.proto

package v2alpha1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_kit_pkg_api_v1_resources_core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *MockResource) Clone() proto.Message {
	var target *MockResource
	if m == nil {
		return target
	}
	target = &MockResource{}

	if h, ok := interface{}(m.GetNamespacedStatuses()).(clone.Cloner); ok {
		target.NamespacedStatuses = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.NamespacedStatuses)
	} else {
		target.NamespacedStatuses = proto.Clone(m.GetNamespacedStatuses()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.NamespacedStatuses)
	}

	if h, ok := interface{}(m.GetMetadata()).(clone.Cloner); ok {
		target.Metadata = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Metadata)
	} else {
		target.Metadata = proto.Clone(m.GetMetadata()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Metadata)
	}

	switch m.WeStuckItInAOneof.(type) {

	case *MockResource_SomeDumbField:

		target.WeStuckItInAOneof = &MockResource_SomeDumbField{
			SomeDumbField: m.GetSomeDumbField(),
		}

	case *MockResource_Data:

		target.WeStuckItInAOneof = &MockResource_Data{
			Data: m.GetData(),
		}

	}

	switch m.TestOneofFields.(type) {

	case *MockResource_OneofOne:

		target.TestOneofFields = &MockResource_OneofOne{
			OneofOne: m.GetOneofOne(),
		}

	case *MockResource_OneofTwo:

		target.TestOneofFields = &MockResource_OneofTwo{
			OneofTwo: m.GetOneofTwo(),
		}

	}

	return target
}

// Clone function
func (m *FrequentlyChangingAnnotationsResource) Clone() proto.Message {
	var target *FrequentlyChangingAnnotationsResource
	if m == nil {
		return target
	}
	target = &FrequentlyChangingAnnotationsResource{}

	if h, ok := interface{}(m.GetMetadata()).(clone.Cloner); ok {
		target.Metadata = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Metadata)
	} else {
		target.Metadata = proto.Clone(m.GetMetadata()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Metadata)
	}

	target.Blah = m.GetBlah()

	return target
}
