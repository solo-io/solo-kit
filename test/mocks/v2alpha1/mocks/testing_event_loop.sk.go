// Code generated by MockGen. DO NOT EDIT.
// Source: ./test/mocks/v2alpha1/testing_event_loop.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2alpha1 "github.com/solo-io/solo-kit/test/mocks/v2alpha1"
)

// MockTestingSyncer is a mock of TestingSyncer interface
type MockTestingSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockTestingSyncerMockRecorder
}

// MockTestingSyncerMockRecorder is the mock recorder for MockTestingSyncer
type MockTestingSyncerMockRecorder struct {
	mock *MockTestingSyncer
}

// NewMockTestingSyncer creates a new mock instance
func NewMockTestingSyncer(ctrl *gomock.Controller) *MockTestingSyncer {
	mock := &MockTestingSyncer{ctrl: ctrl}
	mock.recorder = &MockTestingSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTestingSyncer) EXPECT() *MockTestingSyncerMockRecorder {
	return m.recorder
}

// Sync mocks base method
func (m *MockTestingSyncer) Sync(arg0 context.Context, arg1 *v2alpha1.TestingSnapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync
func (mr *MockTestingSyncerMockRecorder) Sync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockTestingSyncer)(nil).Sync), arg0, arg1)
}
