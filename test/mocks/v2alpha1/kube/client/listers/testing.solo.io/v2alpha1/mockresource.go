/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v2alpha1

import (
	v2alpha1 "github.com/solo-io/solo-kit/test/mocks/v2alpha1/kube/apis/testing.solo.io/v2alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MockResourceLister helps list MockResources.
type MockResourceLister interface {
	// List lists all MockResources in the indexer.
	List(selector labels.Selector) (ret []*v2alpha1.MockResource, err error)
	// MockResources returns an object that can list and get MockResources.
	MockResources(namespace string) MockResourceNamespaceLister
	MockResourceListerExpansion
}

// mockResourceLister implements the MockResourceLister interface.
type mockResourceLister struct {
	indexer cache.Indexer
}

// NewMockResourceLister returns a new MockResourceLister.
func NewMockResourceLister(indexer cache.Indexer) MockResourceLister {
	return &mockResourceLister{indexer: indexer}
}

// List lists all MockResources in the indexer.
func (s *mockResourceLister) List(selector labels.Selector) (ret []*v2alpha1.MockResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v2alpha1.MockResource))
	})
	return ret, err
}

// MockResources returns an object that can list and get MockResources.
func (s *mockResourceLister) MockResources(namespace string) MockResourceNamespaceLister {
	return mockResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MockResourceNamespaceLister helps list and get MockResources.
type MockResourceNamespaceLister interface {
	// List lists all MockResources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v2alpha1.MockResource, err error)
	// Get retrieves the MockResource from the indexer for a given namespace and name.
	Get(name string) (*v2alpha1.MockResource, error)
	MockResourceNamespaceListerExpansion
}

// mockResourceNamespaceLister implements the MockResourceNamespaceLister
// interface.
type mockResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MockResources in the indexer for a given namespace.
func (s mockResourceNamespaceLister) List(selector labels.Selector) (ret []*v2alpha1.MockResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v2alpha1.MockResource))
	})
	return ret, err
}

// Get retrieves the MockResource from the indexer for a given namespace and name.
func (s mockResourceNamespaceLister) Get(name string) (*v2alpha1.MockResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v2alpha1.Resource("mockresource"), name)
	}
	return obj.(*v2alpha1.MockResource), nil
}
