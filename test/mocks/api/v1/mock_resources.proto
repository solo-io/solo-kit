/*
Syntax Comments
Syntax Comments a
*/

syntax = "proto3";

/*
package Comments
package Comments a
*/
package testing.solo.io;
/*
go_package Comments
go_package Comments a
*/
option go_package = "github.com/solo-io/solo-kit/test/mocks/v1";

import "github.com/solo-io/solo-kit/api/external/envoy/api/v2/discovery.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

/*
go_package Comments
go_package Comments a
*/

import "extproto/ext.proto";
option (extproto.hash_all) = true;
option (extproto.equal_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";


/*
below Comments
below Comments a
*/

/*
A SimpleMockResource defines a variety of baseline types to ensure
that we can generate open api schemas properly. It intentionally avoids
messages that include either:
    - oneof
    - recursive definitions (core.solo.io.Status)
*/
message SimpleMockResource {

    option (core.solo.io.resource).short_name = "smk";
    option (core.solo.io.resource).plural_name = "simplemocks";

    core.solo.io.Metadata metadata = 100;

    string data = 1;

    map<string, string> mapped_data = 2;

    // Any field should include `x-kubernetes-preserve-unknown-fields`
    // this prevents k8s from validating proto.Any fields (since it's unstructured)
    .google.protobuf.Any any = 3;

    // Struct field TODO (sam-heilbron)
    //.google.protobuf.Struct struct = 4;

    message NestedMessage {
        bool option_bool = 1;
        string option_string = 2;
    }

    NestedMessage nested_message = 5;
}

/*
Mock resources for goofin off
Includes oneof, nested resources, and any other special cases we
want to verify when generating validation schemas
*/
message MockResource {

    option (core.solo.io.resource).short_name = "mk";
    option (core.solo.io.resource).plural_name = "mocks";

    // The status field comment
    core.solo.io.Status status = 6 [(extproto.skip_hashing) = true];
    core.solo.io.Metadata metadata = 7;

    string data = 1 [json_name="data.json"];
    string some_dumb_field = 100 [(extproto.skip_hashing) = true];

    // Any field should include `x-kubernetes-preserve-unknown-fields`
    // this prevents k8s from validating proto.Any fields (since it's unstructured)
    .google.protobuf.Any any = 11;

    // test one of fields comment
    oneof nested_oneof_options {
        // oneof comment
        NestedOneOf oneof_nestedoneof = 12;
        string oneof_string = 14;
        bool oneof_bool = 15;
    }
}

// A NestedOneOf message
message NestedOneOf {

    // oneof comment
    oneof option {
        string option_a = 1;
        string option_b = 2;
    }

    oneof another_option {
        string another_option_a = 11;
        string another_option_b = 12;
    }

    // AnotherNestedOneOf comment
    message InternalOneOf {
        oneof option {
            string option_a = 1;
            string option_b = 2;
        }
    }

    oneof nested_oneof {
        InternalOneOf another_nested_oneof_one = 21;
        InternalOneOf another_nested_oneof_two = 22;
    }
}

message FakeResource {

    option (core.solo.io.resource).short_name = "fk";
    option (core.solo.io.resource).plural_name = "fakes";

    uint32 count = 1;
    core.solo.io.Metadata metadata = 7;
}

/*
@solo-kit:xds-service=MockXdsResourceDiscoveryService
@solo-kit:resource.no_references
*/
message MockXdsResourceConfig {
    // @solo-kit:resource.name
    string domain = 1;
}

/*
@solo-kit:resource.xds-enabled
*/
service MockXdsResourceDiscoveryService {
    rpc StreamMockXdsResourceConfig(stream envoy.api.v2.DiscoveryRequest) returns (stream envoy.api.v2.DiscoveryResponse) {
    }

    rpc DeltaMockXdsResourceConfig(stream envoy.api.v2.DeltaDiscoveryRequest)
        returns (stream envoy.api.v2.DeltaDiscoveryResponse) {
    }

    rpc FetchMockXdsResourceConfig(envoy.api.v2.DiscoveryRequest) returns (envoy.api.v2.DiscoveryResponse) {
        option (google.api.http) = {
        post: "/v2/discovery:mockxdsresourceconfig"
        body: "*"
        };
    }
}
