// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type ComplicatedMockResourceWatcher interface {
	// watch namespace-scoped Complicatedmockresources
	Watch(namespace string, opts clients.WatchOpts) (<-chan ComplicatedMockResourceList, <-chan error, error)
}

type ComplicatedMockResourceClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*ComplicatedMockResource, error)
	Write(resource *ComplicatedMockResource, opts clients.WriteOpts) (*ComplicatedMockResource, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (ComplicatedMockResourceList, error)
	ComplicatedMockResourceWatcher
}

type complicatedMockResourceClient struct {
	rc clients.ResourceClient
}

func NewComplicatedMockResourceClient(rcFactory factory.ResourceClientFactory) (ComplicatedMockResourceClient, error) {
	return NewComplicatedMockResourceClientWithToken(rcFactory, "")
}

func NewComplicatedMockResourceClientWithToken(rcFactory factory.ResourceClientFactory, token string) (ComplicatedMockResourceClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &ComplicatedMockResource{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base ComplicatedMockResource resource client")
	}
	return NewComplicatedMockResourceClientWithBase(rc), nil
}

func NewComplicatedMockResourceClientWithBase(rc clients.ResourceClient) ComplicatedMockResourceClient {
	return &complicatedMockResourceClient{
		rc: rc,
	}
}

func (client *complicatedMockResourceClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *complicatedMockResourceClient) Register() error {
	return client.rc.Register()
}

func (client *complicatedMockResourceClient) Read(namespace, name string, opts clients.ReadOpts) (*ComplicatedMockResource, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*ComplicatedMockResource), nil
}

func (client *complicatedMockResourceClient) Write(complicatedMockResource *ComplicatedMockResource, opts clients.WriteOpts) (*ComplicatedMockResource, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(complicatedMockResource, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*ComplicatedMockResource), nil
}

func (client *complicatedMockResourceClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *complicatedMockResourceClient) List(namespace string, opts clients.ListOpts) (ComplicatedMockResourceList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToComplicatedMockResource(resourceList), nil
}

func (client *complicatedMockResourceClient) Watch(namespace string, opts clients.WatchOpts) (<-chan ComplicatedMockResourceList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	complicatedmockresourcesChan := make(chan ComplicatedMockResourceList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				complicatedmockresourcesChan <- convertToComplicatedMockResource(resourceList)
			case <-opts.Ctx.Done():
				close(complicatedmockresourcesChan)
				return
			}
		}
	}()
	return complicatedmockresourcesChan, errs, nil
}

func convertToComplicatedMockResource(resources resources.ResourceList) ComplicatedMockResourceList {
	var complicatedMockResourceList ComplicatedMockResourceList
	for _, resource := range resources {
		complicatedMockResourceList = append(complicatedMockResourceList, resource.(*ComplicatedMockResource))
	}
	return complicatedMockResourceList
}
