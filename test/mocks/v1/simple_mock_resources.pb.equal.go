// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/test/mocks/api/v1/simple_mock_resources.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *SimpleMockResource) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SimpleMockResource)
	if !ok {
		that2, ok := that.(SimpleMockResource)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
			return false
		}
	}

	if strings.Compare(m.GetData(), target.GetData()) != 0 {
		return false
	}

	if len(m.GetMappedData()) != len(target.GetMappedData()) {
		return false
	}
	for k, v := range m.GetMappedData() {

		if strings.Compare(v, target.GetMappedData()[k]) != 0 {
			return false
		}

	}

	if len(m.GetList()) != len(target.GetList()) {
		return false
	}
	for idx, v := range m.GetList() {

		if v != target.GetList()[idx] {
			return false
		}

	}

	if h, ok := interface{}(m.GetNestedMessage()).(equality.Equalizer); ok {
		if !h.Equal(target.GetNestedMessage()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetNestedMessage(), target.GetNestedMessage()) {
			return false
		}
	}

	if len(m.GetNestedMessageList()) != len(target.GetNestedMessageList()) {
		return false
	}
	for idx, v := range m.GetNestedMessageList() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetNestedMessageList()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetNestedMessageList()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetAny()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAny()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAny(), target.GetAny()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetStruct()).(equality.Equalizer); ok {
		if !h.Equal(target.GetStruct()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetStruct(), target.GetStruct()) {
			return false
		}
	}

	if len(m.GetMappedStruct()) != len(target.GetMappedStruct()) {
		return false
	}
	for k, v := range m.GetMappedStruct() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetMappedStruct()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetMappedStruct()[k]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetBoolValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBoolValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBoolValue(), target.GetBoolValue()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetInt32Value()).(equality.Equalizer); ok {
		if !h.Equal(target.GetInt32Value()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetInt32Value(), target.GetInt32Value()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetUint32Value()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUint32Value()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUint32Value(), target.GetUint32Value()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetFloatValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetFloatValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetFloatValue(), target.GetFloatValue()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDuration()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDuration()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDuration(), target.GetDuration()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetEmpty()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEmpty()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEmpty(), target.GetEmpty()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetStringValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetStringValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetStringValue(), target.GetStringValue()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDoubleValue()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDoubleValue()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDoubleValue(), target.GetDoubleValue()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTimestamp()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTimestamp()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTimestamp(), target.GetTimestamp()) {
			return false
		}
	}

	if m.GetEnumOptions() != target.GetEnumOptions() {
		return false
	}

	return true
}

// Equal function
func (m *SimpleMockResource_NestedMessage) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SimpleMockResource_NestedMessage)
	if !ok {
		that2, ok := that.(SimpleMockResource_NestedMessage)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetOptionBool() != target.GetOptionBool() {
		return false
	}

	if strings.Compare(m.GetOptionString(), target.GetOptionString()) != 0 {
		return false
	}

	return true
}
