// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: github.com/solo-io/solo-kit/test/mocks/api/v1/complicated_mock_resources.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//
//A ComplicatedMockResource is used to validate our schemagen tool, which converts
//protos to OpenApi schemas with structural constraints.
type ComplicatedMockResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *core.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Metadata *core.Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// comment
	NestedOneOf *NestedOneOf    `protobuf:"bytes,3,opt,name=nested_one_of,json=nestedOneOf,proto3" json:"nested_one_of,omitempty"`
	Name        string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	SslConfig   *LocalSslConfig `protobuf:"bytes,5,opt,name=ssl_config,json=sslConfig,proto3" json:"ssl_config,omitempty"`
}

func (x *ComplicatedMockResource) Reset() {
	*x = ComplicatedMockResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplicatedMockResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplicatedMockResource) ProtoMessage() {}

func (x *ComplicatedMockResource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplicatedMockResource.ProtoReflect.Descriptor instead.
func (*ComplicatedMockResource) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDescGZIP(), []int{0}
}

func (x *ComplicatedMockResource) GetStatus() *core.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ComplicatedMockResource) GetMetadata() *core.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ComplicatedMockResource) GetNestedOneOf() *NestedOneOf {
	if x != nil {
		return x.NestedOneOf
	}
	return nil
}

func (x *ComplicatedMockResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplicatedMockResource) GetSslConfig() *LocalSslConfig {
	if x != nil {
		return x.SslConfig
	}
	return nil
}

// message comment
type NestedOneOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// oneof comment
	//
	// Types that are assignable to Option:
	//	*NestedOneOf_OptionA
	//	*NestedOneOf_OptionB
	Option    isNestedOneOf_Option `protobuf_oneof:"option"`
	Field     string               `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	MultipleA []string             `protobuf:"bytes,4,rep,name=multiple_a,json=multipleA,proto3" json:"multiple_a,omitempty"`
	MultipleB []string             `protobuf:"bytes,5,rep,name=multiple_b,json=multipleB,proto3" json:"multiple_b,omitempty"`
	MultipleC []string             `protobuf:"bytes,6,rep,name=multiple_c,json=multipleC,proto3" json:"multiple_c,omitempty"`
	Choice    bool                 `protobuf:"varint,7,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *NestedOneOf) Reset() {
	*x = NestedOneOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedOneOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedOneOf) ProtoMessage() {}

func (x *NestedOneOf) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedOneOf.ProtoReflect.Descriptor instead.
func (*NestedOneOf) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDescGZIP(), []int{1}
}

func (m *NestedOneOf) GetOption() isNestedOneOf_Option {
	if m != nil {
		return m.Option
	}
	return nil
}

func (x *NestedOneOf) GetOptionA() string {
	if x, ok := x.GetOption().(*NestedOneOf_OptionA); ok {
		return x.OptionA
	}
	return ""
}

func (x *NestedOneOf) GetOptionB() string {
	if x, ok := x.GetOption().(*NestedOneOf_OptionB); ok {
		return x.OptionB
	}
	return ""
}

func (x *NestedOneOf) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *NestedOneOf) GetMultipleA() []string {
	if x != nil {
		return x.MultipleA
	}
	return nil
}

func (x *NestedOneOf) GetMultipleB() []string {
	if x != nil {
		return x.MultipleB
	}
	return nil
}

func (x *NestedOneOf) GetMultipleC() []string {
	if x != nil {
		return x.MultipleC
	}
	return nil
}

func (x *NestedOneOf) GetChoice() bool {
	if x != nil {
		return x.Choice
	}
	return false
}

type isNestedOneOf_Option interface {
	isNestedOneOf_Option()
}

type NestedOneOf_OptionA struct {
	OptionA string `protobuf:"bytes,1,opt,name=option_a,json=optionA,proto3,oneof"`
}

type NestedOneOf_OptionB struct {
	OptionB string `protobuf:"bytes,2,opt,name=option_b,json=optionB,proto3,oneof"`
}

func (*NestedOneOf_OptionA) isNestedOneOf_Option() {}

func (*NestedOneOf_OptionB) isNestedOneOf_Option() {}

type LocalSslConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// with comments
	//
	// Types that are assignable to SslConfigOptions:
	//	*LocalSslConfig_A
	//	*LocalSslConfig_B
	SslConfigOptions isLocalSslConfig_SslConfigOptions `protobuf_oneof:"ssl_config_options"`
	// optional. the SNI domains that should be considered for TLS connections
	SniDomains []string `protobuf:"bytes,3,rep,name=sni_domains,json=sniDomains,proto3" json:"sni_domains,omitempty"`
	// Verify that the Subject Alternative Name in the peer certificate is one of the specified values.
	// note that a root_ca must be provided if this option is used.
	VerifySubjectAltName []string `protobuf:"bytes,5,rep,name=verify_subject_alt_name,json=verifySubjectAltName,proto3" json:"verify_subject_alt_name,omitempty"`
	// Set Application Level Protocol Negotiation
	// If empty, defaults to ["h2", "http/1.1"].
	AlpnProtocols []string `protobuf:"bytes,7,rep,name=alpn_protocols,json=alpnProtocols,proto3" json:"alpn_protocols,omitempty"`
	// If the SSL config has the ca.crt (root CA) provided, Gloo uses it to perform mTLS by default.
	// Set oneWayTls to true to disable mTLS in favor of server-only TLS (one-way TLS), even if Gloo has the root CA.
	// Defaults to false.
	OneWayTls bool `protobuf:"varint,8,opt,name=one_way_tls,json=oneWayTls,proto3" json:"one_way_tls,omitempty"`
}

func (x *LocalSslConfig) Reset() {
	*x = LocalSslConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSslConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSslConfig) ProtoMessage() {}

func (x *LocalSslConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSslConfig.ProtoReflect.Descriptor instead.
func (*LocalSslConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDescGZIP(), []int{2}
}

func (m *LocalSslConfig) GetSslConfigOptions() isLocalSslConfig_SslConfigOptions {
	if m != nil {
		return m.SslConfigOptions
	}
	return nil
}

func (x *LocalSslConfig) GetA() string {
	if x, ok := x.GetSslConfigOptions().(*LocalSslConfig_A); ok {
		return x.A
	}
	return ""
}

func (x *LocalSslConfig) GetB() string {
	if x, ok := x.GetSslConfigOptions().(*LocalSslConfig_B); ok {
		return x.B
	}
	return ""
}

func (x *LocalSslConfig) GetSniDomains() []string {
	if x != nil {
		return x.SniDomains
	}
	return nil
}

func (x *LocalSslConfig) GetVerifySubjectAltName() []string {
	if x != nil {
		return x.VerifySubjectAltName
	}
	return nil
}

func (x *LocalSslConfig) GetAlpnProtocols() []string {
	if x != nil {
		return x.AlpnProtocols
	}
	return nil
}

func (x *LocalSslConfig) GetOneWayTls() bool {
	if x != nil {
		return x.OneWayTls
	}
	return false
}

type isLocalSslConfig_SslConfigOptions interface {
	isLocalSslConfig_SslConfigOptions()
}

type LocalSslConfig_A struct {
	A string `protobuf:"bytes,1,opt,name=a,proto3,oneof"`
}

type LocalSslConfig_B struct {
	B string `protobuf:"bytes,2,opt,name=b,proto3,oneof"`
}

func (*LocalSslConfig_A) isLocalSslConfig_SslConfigOptions() {}

func (*LocalSslConfig_B) isLocalSslConfig_SslConfigOptions() {}

var File_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto protoreflect.FileDescriptor

var file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDesc = []byte{
	0x0a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x6b,
	0x69, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f,
	0x6c, 0x6f, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f,
	0x6c, 0x6f, 0x2d, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x02, 0x0a,
	0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04,
	0xb8, 0xf5, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x40, 0x0a, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x52, 0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x65,
	0x4f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x73, 0x73, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x27, 0x82, 0xf1, 0x04, 0x05, 0x0a, 0x03, 0x63, 0x6d,
	0x72, 0x82, 0xf1, 0x04, 0x1a, 0x12, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x6d, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22,
	0xdc, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x12,
	0x1b, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x12, 0x1b, 0x0a, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe5,
	0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x0e, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x01,
	0x61, 0x12, 0x0e, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x01,
	0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x69, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x69, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x14, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x70,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x6c, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x5f, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x6c, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x57, 0x61, 0x79, 0x54, 0x6c, 0x73,
	0x42, 0x14, 0x0a, 0x12, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x33, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x73,
	0x2f, 0x76, 0x31, 0xb8, 0xf5, 0x04, 0x01, 0xc0, 0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDescOnce sync.Once
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDescData = file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDesc
)

func file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDescData)
	})
	return file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDescData
}

var file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_goTypes = []interface{}{
	(*ComplicatedMockResource)(nil), // 0: testing.solo.io.ComplicatedMockResource
	(*NestedOneOf)(nil),             // 1: testing.solo.io.NestedOneOf
	(*LocalSslConfig)(nil),          // 2: testing.solo.io.LocalSslConfig
	(*core.Status)(nil),             // 3: core.solo.io.Status
	(*core.Metadata)(nil),           // 4: core.solo.io.Metadata
}
var file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_depIdxs = []int32{
	3, // 0: testing.solo.io.ComplicatedMockResource.status:type_name -> core.solo.io.Status
	4, // 1: testing.solo.io.ComplicatedMockResource.metadata:type_name -> core.solo.io.Metadata
	1, // 2: testing.solo.io.ComplicatedMockResource.nested_one_of:type_name -> testing.solo.io.NestedOneOf
	2, // 3: testing.solo.io.ComplicatedMockResource.ssl_config:type_name -> testing.solo.io.LocalSslConfig
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_init()
}
func file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_init() {
	if File_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplicatedMockResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedOneOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSslConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*NestedOneOf_OptionA)(nil),
		(*NestedOneOf_OptionB)(nil),
	}
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*LocalSslConfig_A)(nil),
		(*LocalSslConfig_B)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto = out.File
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_rawDesc = nil
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_goTypes = nil
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_complicated_mock_resources_proto_depIdxs = nil
}
