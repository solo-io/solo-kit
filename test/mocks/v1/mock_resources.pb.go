//
//Syntax Comments
//Syntax Comments a

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: github.com/solo-io/solo-kit/test/mocks/api/v1/mock_resources.proto

//
//package Comments
//package Comments a

package v1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	v2 "github.com/envoyproxy/go-control-plane/envoy/api/v2"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//
//A SimpleMockResource defines a variety of baseline types to ensure
//that we can generate open api schemas properly. It intentionally avoids
//messages that include either:
//- oneof
//- recursive definitions (core.solo.io.Status)
type SimpleMockResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata   *core.Metadata    `protobuf:"bytes,100,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Data       string            `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MappedData map[string]string `protobuf:"bytes,2,rep,name=mapped_data,json=mappedData,proto3" json:"mapped_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Any field should include `x-kubernetes-preserve-unknown-fields`
	// this prevents k8s from validating proto.Any fields (since it's unstructured)
	Any           *any.Any                          `protobuf:"bytes,3,opt,name=any,proto3" json:"any,omitempty"`
	NestedMessage *SimpleMockResource_NestedMessage `protobuf:"bytes,5,opt,name=nested_message,json=nestedMessage,proto3" json:"nested_message,omitempty"`
}

func (x *SimpleMockResource) Reset() {
	*x = SimpleMockResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleMockResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleMockResource) ProtoMessage() {}

func (x *SimpleMockResource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleMockResource.ProtoReflect.Descriptor instead.
func (*SimpleMockResource) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleMockResource) GetMetadata() *core.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SimpleMockResource) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SimpleMockResource) GetMappedData() map[string]string {
	if x != nil {
		return x.MappedData
	}
	return nil
}

func (x *SimpleMockResource) GetAny() *any.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *SimpleMockResource) GetNestedMessage() *SimpleMockResource_NestedMessage {
	if x != nil {
		return x.NestedMessage
	}
	return nil
}

//
//Mock resources for goofin off
//Includes oneof, nested resources, and any other special cases we
//want to verify when generating validation schemas
type MockResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status field comment
	Status        *core.Status   `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Metadata      *core.Metadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Data          string         `protobuf:"bytes,1,opt,name=data,json=data.json,proto3" json:"data,omitempty"`
	SomeDumbField string         `protobuf:"bytes,100,opt,name=some_dumb_field,json=someDumbField,proto3" json:"some_dumb_field,omitempty"`
	// Any field should include `x-kubernetes-preserve-unknown-fields`
	// this prevents k8s from validating proto.Any fields (since it's unstructured)
	Any *any.Any `protobuf:"bytes,11,opt,name=any,proto3" json:"any,omitempty"`
	// test one of fields comment
	//
	// Types that are assignable to NestedOneofOptions:
	//	*MockResource_OneofNestedoneof
	//	*MockResource_OneofString
	//	*MockResource_OneofBool
	NestedOneofOptions isMockResource_NestedOneofOptions `protobuf_oneof:"nested_oneof_options"`
}

func (x *MockResource) Reset() {
	*x = MockResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockResource) ProtoMessage() {}

func (x *MockResource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockResource.ProtoReflect.Descriptor instead.
func (*MockResource) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescGZIP(), []int{1}
}

func (x *MockResource) GetStatus() *core.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MockResource) GetMetadata() *core.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MockResource) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *MockResource) GetSomeDumbField() string {
	if x != nil {
		return x.SomeDumbField
	}
	return ""
}

func (x *MockResource) GetAny() *any.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

func (m *MockResource) GetNestedOneofOptions() isMockResource_NestedOneofOptions {
	if m != nil {
		return m.NestedOneofOptions
	}
	return nil
}

func (x *MockResource) GetOneofNestedoneof() *NestedOneOf {
	if x, ok := x.GetNestedOneofOptions().(*MockResource_OneofNestedoneof); ok {
		return x.OneofNestedoneof
	}
	return nil
}

func (x *MockResource) GetOneofString() string {
	if x, ok := x.GetNestedOneofOptions().(*MockResource_OneofString); ok {
		return x.OneofString
	}
	return ""
}

func (x *MockResource) GetOneofBool() bool {
	if x, ok := x.GetNestedOneofOptions().(*MockResource_OneofBool); ok {
		return x.OneofBool
	}
	return false
}

type isMockResource_NestedOneofOptions interface {
	isMockResource_NestedOneofOptions()
}

type MockResource_OneofNestedoneof struct {
	// oneof comment
	OneofNestedoneof *NestedOneOf `protobuf:"bytes,12,opt,name=oneof_nestedoneof,json=oneofNestedoneof,proto3,oneof"`
}

type MockResource_OneofString struct {
	OneofString string `protobuf:"bytes,14,opt,name=oneof_string,json=oneofString,proto3,oneof"`
}

type MockResource_OneofBool struct {
	OneofBool bool `protobuf:"varint,15,opt,name=oneof_bool,json=oneofBool,proto3,oneof"`
}

func (*MockResource_OneofNestedoneof) isMockResource_NestedOneofOptions() {}

func (*MockResource_OneofString) isMockResource_NestedOneofOptions() {}

func (*MockResource_OneofBool) isMockResource_NestedOneofOptions() {}

// A NestedOneOf message
type NestedOneOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// oneof comment
	//
	// Types that are assignable to Option:
	//	*NestedOneOf_OptionA
	//	*NestedOneOf_OptionB
	Option isNestedOneOf_Option `protobuf_oneof:"option"`
	// Types that are assignable to AnotherOption:
	//	*NestedOneOf_AnotherOptionA
	//	*NestedOneOf_AnotherOptionB
	AnotherOption isNestedOneOf_AnotherOption `protobuf_oneof:"another_option"`
	// Types that are assignable to NestedOneof:
	//	*NestedOneOf_AnotherNestedOneofOne
	//	*NestedOneOf_AnotherNestedOneofTwo
	NestedOneof isNestedOneOf_NestedOneof `protobuf_oneof:"nested_oneof"`
}

func (x *NestedOneOf) Reset() {
	*x = NestedOneOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedOneOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedOneOf) ProtoMessage() {}

func (x *NestedOneOf) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedOneOf.ProtoReflect.Descriptor instead.
func (*NestedOneOf) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescGZIP(), []int{2}
}

func (m *NestedOneOf) GetOption() isNestedOneOf_Option {
	if m != nil {
		return m.Option
	}
	return nil
}

func (x *NestedOneOf) GetOptionA() string {
	if x, ok := x.GetOption().(*NestedOneOf_OptionA); ok {
		return x.OptionA
	}
	return ""
}

func (x *NestedOneOf) GetOptionB() string {
	if x, ok := x.GetOption().(*NestedOneOf_OptionB); ok {
		return x.OptionB
	}
	return ""
}

func (m *NestedOneOf) GetAnotherOption() isNestedOneOf_AnotherOption {
	if m != nil {
		return m.AnotherOption
	}
	return nil
}

func (x *NestedOneOf) GetAnotherOptionA() string {
	if x, ok := x.GetAnotherOption().(*NestedOneOf_AnotherOptionA); ok {
		return x.AnotherOptionA
	}
	return ""
}

func (x *NestedOneOf) GetAnotherOptionB() string {
	if x, ok := x.GetAnotherOption().(*NestedOneOf_AnotherOptionB); ok {
		return x.AnotherOptionB
	}
	return ""
}

func (m *NestedOneOf) GetNestedOneof() isNestedOneOf_NestedOneof {
	if m != nil {
		return m.NestedOneof
	}
	return nil
}

func (x *NestedOneOf) GetAnotherNestedOneofOne() *NestedOneOf_InternalOneOf {
	if x, ok := x.GetNestedOneof().(*NestedOneOf_AnotherNestedOneofOne); ok {
		return x.AnotherNestedOneofOne
	}
	return nil
}

func (x *NestedOneOf) GetAnotherNestedOneofTwo() *NestedOneOf_InternalOneOf {
	if x, ok := x.GetNestedOneof().(*NestedOneOf_AnotherNestedOneofTwo); ok {
		return x.AnotherNestedOneofTwo
	}
	return nil
}

type isNestedOneOf_Option interface {
	isNestedOneOf_Option()
}

type NestedOneOf_OptionA struct {
	OptionA string `protobuf:"bytes,1,opt,name=option_a,json=optionA,proto3,oneof"`
}

type NestedOneOf_OptionB struct {
	OptionB string `protobuf:"bytes,2,opt,name=option_b,json=optionB,proto3,oneof"`
}

func (*NestedOneOf_OptionA) isNestedOneOf_Option() {}

func (*NestedOneOf_OptionB) isNestedOneOf_Option() {}

type isNestedOneOf_AnotherOption interface {
	isNestedOneOf_AnotherOption()
}

type NestedOneOf_AnotherOptionA struct {
	AnotherOptionA string `protobuf:"bytes,11,opt,name=another_option_a,json=anotherOptionA,proto3,oneof"`
}

type NestedOneOf_AnotherOptionB struct {
	AnotherOptionB string `protobuf:"bytes,12,opt,name=another_option_b,json=anotherOptionB,proto3,oneof"`
}

func (*NestedOneOf_AnotherOptionA) isNestedOneOf_AnotherOption() {}

func (*NestedOneOf_AnotherOptionB) isNestedOneOf_AnotherOption() {}

type isNestedOneOf_NestedOneof interface {
	isNestedOneOf_NestedOneof()
}

type NestedOneOf_AnotherNestedOneofOne struct {
	AnotherNestedOneofOne *NestedOneOf_InternalOneOf `protobuf:"bytes,21,opt,name=another_nested_oneof_one,json=anotherNestedOneofOne,proto3,oneof"`
}

type NestedOneOf_AnotherNestedOneofTwo struct {
	AnotherNestedOneofTwo *NestedOneOf_InternalOneOf `protobuf:"bytes,22,opt,name=another_nested_oneof_two,json=anotherNestedOneofTwo,proto3,oneof"`
}

func (*NestedOneOf_AnotherNestedOneofOne) isNestedOneOf_NestedOneof() {}

func (*NestedOneOf_AnotherNestedOneofTwo) isNestedOneOf_NestedOneof() {}

type FakeResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    uint32         `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Metadata *core.Metadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *FakeResource) Reset() {
	*x = FakeResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FakeResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FakeResource) ProtoMessage() {}

func (x *FakeResource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FakeResource.ProtoReflect.Descriptor instead.
func (*FakeResource) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescGZIP(), []int{3}
}

func (x *FakeResource) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FakeResource) GetMetadata() *core.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

//
//@solo-kit:xds-service=MockXdsResourceDiscoveryService
//@solo-kit:resource.no_references
type MockXdsResourceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @solo-kit:resource.name
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *MockXdsResourceConfig) Reset() {
	*x = MockXdsResourceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockXdsResourceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockXdsResourceConfig) ProtoMessage() {}

func (x *MockXdsResourceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockXdsResourceConfig.ProtoReflect.Descriptor instead.
func (*MockXdsResourceConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescGZIP(), []int{4}
}

func (x *MockXdsResourceConfig) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type SimpleMockResource_NestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionBool   bool   `protobuf:"varint,1,opt,name=option_bool,json=optionBool,proto3" json:"option_bool,omitempty"`
	OptionString string `protobuf:"bytes,2,opt,name=option_string,json=optionString,proto3" json:"option_string,omitempty"`
}

func (x *SimpleMockResource_NestedMessage) Reset() {
	*x = SimpleMockResource_NestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleMockResource_NestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleMockResource_NestedMessage) ProtoMessage() {}

func (x *SimpleMockResource_NestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleMockResource_NestedMessage.ProtoReflect.Descriptor instead.
func (*SimpleMockResource_NestedMessage) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SimpleMockResource_NestedMessage) GetOptionBool() bool {
	if x != nil {
		return x.OptionBool
	}
	return false
}

func (x *SimpleMockResource_NestedMessage) GetOptionString() string {
	if x != nil {
		return x.OptionString
	}
	return ""
}

// AnotherNestedOneOf comment
type NestedOneOf_InternalOneOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Option:
	//	*NestedOneOf_InternalOneOf_OptionA
	//	*NestedOneOf_InternalOneOf_OptionB
	Option isNestedOneOf_InternalOneOf_Option `protobuf_oneof:"option"`
}

func (x *NestedOneOf_InternalOneOf) Reset() {
	*x = NestedOneOf_InternalOneOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedOneOf_InternalOneOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedOneOf_InternalOneOf) ProtoMessage() {}

func (x *NestedOneOf_InternalOneOf) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedOneOf_InternalOneOf.ProtoReflect.Descriptor instead.
func (*NestedOneOf_InternalOneOf) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescGZIP(), []int{2, 0}
}

func (m *NestedOneOf_InternalOneOf) GetOption() isNestedOneOf_InternalOneOf_Option {
	if m != nil {
		return m.Option
	}
	return nil
}

func (x *NestedOneOf_InternalOneOf) GetOptionA() string {
	if x, ok := x.GetOption().(*NestedOneOf_InternalOneOf_OptionA); ok {
		return x.OptionA
	}
	return ""
}

func (x *NestedOneOf_InternalOneOf) GetOptionB() string {
	if x, ok := x.GetOption().(*NestedOneOf_InternalOneOf_OptionB); ok {
		return x.OptionB
	}
	return ""
}

type isNestedOneOf_InternalOneOf_Option interface {
	isNestedOneOf_InternalOneOf_Option()
}

type NestedOneOf_InternalOneOf_OptionA struct {
	OptionA string `protobuf:"bytes,1,opt,name=option_a,json=optionA,proto3,oneof"`
}

type NestedOneOf_InternalOneOf_OptionB struct {
	OptionB string `protobuf:"bytes,2,opt,name=option_b,json=optionB,proto3,oneof"`
}

func (*NestedOneOf_InternalOneOf_OptionA) isNestedOneOf_InternalOneOf_Option() {}

func (*NestedOneOf_InternalOneOf_OptionB) isNestedOneOf_InternalOneOf_Option() {}

var File_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto protoreflect.FileDescriptor

var file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDesc = []byte{
	0x0a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x6b,
	0x69, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f,
	0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73,
	0x6f, 0x6c, 0x6f, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f,
	0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6,
	0x03, 0x0a, 0x12, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a,
	0x0b, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x58, 0x0a, 0x0e, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x1a, 0x82, 0xf1, 0x04,
	0x05, 0x0a, 0x03, 0x73, 0x6d, 0x6b, 0x82, 0xf1, 0x04, 0x0d, 0x12, 0x0b, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xa5, 0x03, 0x0a, 0x0c, 0x4d, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04,
	0xb8, 0xf5, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x6f, 0x6d,
	0x65, 0x5f, 0x64, 0x75, 0x6d, 0x62, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xb8, 0xf5, 0x04, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x6d, 0x65, 0x44, 0x75,
	0x6d, 0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12,
	0x4b, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x23, 0x0a, 0x0c,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x1f, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x6f,
	0x6f, 0x6c, 0x3a, 0x13, 0x82, 0xf1, 0x04, 0x04, 0x0a, 0x02, 0x6d, 0x6b, 0x82, 0xf1, 0x04, 0x07,
	0x12, 0x05, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xee, 0x03, 0x0a, 0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x12,
	0x1b, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x12, 0x1b, 0x0a, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6e, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0e, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x12, 0x65, 0x0a, 0x18, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x4f,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x48,
	0x02, 0x52, 0x15, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x6e, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x61, 0x6e, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x5f, 0x74, 0x77, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x48, 0x02, 0x52, 0x15, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x54, 0x77, 0x6f, 0x1a,
	0x53, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x65, 0x4f, 0x66,
	0x12, 0x1b, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x12, 0x1b, 0x0a,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10,
	0x0a, 0x0e, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0e, 0x0a, 0x0c, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x22, 0x6d, 0x0a, 0x0c, 0x46, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x13, 0x82, 0xf1, 0x04, 0x04,
	0x0a, 0x02, 0x66, 0x6b, 0x82, 0xf1, 0x04, 0x07, 0x12, 0x05, 0x66, 0x61, 0x6b, 0x65, 0x73, 0x22,
	0x2f, 0x0a, 0x15, 0x4d, 0x6f, 0x63, 0x6b, 0x58, 0x64, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x32, 0x86, 0x03, 0x0a, 0x1f, 0x4d, 0x6f, 0x63, 0x6b, 0x58, 0x64, 0x73, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f,
	0x63, 0x6b, 0x58, 0x64, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x4d, 0x6f, 0x63, 0x6b, 0x58, 0x64, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x63, 0x6b, 0x58, 0x64, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x22, 0x23, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x3a, 0x6d, 0x6f, 0x63, 0x6b, 0x78, 0x64, 0x73, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x42, 0x33, 0x5a, 0x29, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f,
	0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x6f,
	0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0xb8, 0xf5, 0x04, 0x01, 0xc0, 0xf5, 0x04, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescOnce sync.Once
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescData = file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDesc
)

func file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescData)
	})
	return file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDescData
}

var file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_goTypes = []interface{}{
	(*SimpleMockResource)(nil),               // 0: testing.solo.io.SimpleMockResource
	(*MockResource)(nil),                     // 1: testing.solo.io.MockResource
	(*NestedOneOf)(nil),                      // 2: testing.solo.io.NestedOneOf
	(*FakeResource)(nil),                     // 3: testing.solo.io.FakeResource
	(*MockXdsResourceConfig)(nil),            // 4: testing.solo.io.MockXdsResourceConfig
	nil,                                      // 5: testing.solo.io.SimpleMockResource.MappedDataEntry
	(*SimpleMockResource_NestedMessage)(nil), // 6: testing.solo.io.SimpleMockResource.NestedMessage
	(*NestedOneOf_InternalOneOf)(nil),        // 7: testing.solo.io.NestedOneOf.InternalOneOf
	(*core.Metadata)(nil),                    // 8: core.solo.io.Metadata
	(*any.Any)(nil),                          // 9: google.protobuf.Any
	(*core.Status)(nil),                      // 10: core.solo.io.Status
	(*v2.DiscoveryRequest)(nil),              // 11: envoy.api.v2.DiscoveryRequest
	(*v2.DeltaDiscoveryRequest)(nil),         // 12: envoy.api.v2.DeltaDiscoveryRequest
	(*v2.DiscoveryResponse)(nil),             // 13: envoy.api.v2.DiscoveryResponse
	(*v2.DeltaDiscoveryResponse)(nil),        // 14: envoy.api.v2.DeltaDiscoveryResponse
}
var file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_depIdxs = []int32{
	8,  // 0: testing.solo.io.SimpleMockResource.metadata:type_name -> core.solo.io.Metadata
	5,  // 1: testing.solo.io.SimpleMockResource.mapped_data:type_name -> testing.solo.io.SimpleMockResource.MappedDataEntry
	9,  // 2: testing.solo.io.SimpleMockResource.any:type_name -> google.protobuf.Any
	6,  // 3: testing.solo.io.SimpleMockResource.nested_message:type_name -> testing.solo.io.SimpleMockResource.NestedMessage
	10, // 4: testing.solo.io.MockResource.status:type_name -> core.solo.io.Status
	8,  // 5: testing.solo.io.MockResource.metadata:type_name -> core.solo.io.Metadata
	9,  // 6: testing.solo.io.MockResource.any:type_name -> google.protobuf.Any
	2,  // 7: testing.solo.io.MockResource.oneof_nestedoneof:type_name -> testing.solo.io.NestedOneOf
	7,  // 8: testing.solo.io.NestedOneOf.another_nested_oneof_one:type_name -> testing.solo.io.NestedOneOf.InternalOneOf
	7,  // 9: testing.solo.io.NestedOneOf.another_nested_oneof_two:type_name -> testing.solo.io.NestedOneOf.InternalOneOf
	8,  // 10: testing.solo.io.FakeResource.metadata:type_name -> core.solo.io.Metadata
	11, // 11: testing.solo.io.MockXdsResourceDiscoveryService.StreamMockXdsResourceConfig:input_type -> envoy.api.v2.DiscoveryRequest
	12, // 12: testing.solo.io.MockXdsResourceDiscoveryService.DeltaMockXdsResourceConfig:input_type -> envoy.api.v2.DeltaDiscoveryRequest
	11, // 13: testing.solo.io.MockXdsResourceDiscoveryService.FetchMockXdsResourceConfig:input_type -> envoy.api.v2.DiscoveryRequest
	13, // 14: testing.solo.io.MockXdsResourceDiscoveryService.StreamMockXdsResourceConfig:output_type -> envoy.api.v2.DiscoveryResponse
	14, // 15: testing.solo.io.MockXdsResourceDiscoveryService.DeltaMockXdsResourceConfig:output_type -> envoy.api.v2.DeltaDiscoveryResponse
	13, // 16: testing.solo.io.MockXdsResourceDiscoveryService.FetchMockXdsResourceConfig:output_type -> envoy.api.v2.DiscoveryResponse
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_init() }
func file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_init() {
	if File_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleMockResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedOneOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FakeResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockXdsResourceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleMockResource_NestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedOneOf_InternalOneOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MockResource_OneofNestedoneof)(nil),
		(*MockResource_OneofString)(nil),
		(*MockResource_OneofBool)(nil),
	}
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*NestedOneOf_OptionA)(nil),
		(*NestedOneOf_OptionB)(nil),
		(*NestedOneOf_AnotherOptionA)(nil),
		(*NestedOneOf_AnotherOptionB)(nil),
		(*NestedOneOf_AnotherNestedOneofOne)(nil),
		(*NestedOneOf_AnotherNestedOneofTwo)(nil),
	}
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*NestedOneOf_InternalOneOf_OptionA)(nil),
		(*NestedOneOf_InternalOneOf_OptionB)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto = out.File
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_rawDesc = nil
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_goTypes = nil
	file_github_com_solo_io_solo_kit_test_mocks_api_v1_mock_resources_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MockXdsResourceDiscoveryServiceClient is the client API for MockXdsResourceDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MockXdsResourceDiscoveryServiceClient interface {
	StreamMockXdsResourceConfig(ctx context.Context, opts ...grpc.CallOption) (MockXdsResourceDiscoveryService_StreamMockXdsResourceConfigClient, error)
	DeltaMockXdsResourceConfig(ctx context.Context, opts ...grpc.CallOption) (MockXdsResourceDiscoveryService_DeltaMockXdsResourceConfigClient, error)
	FetchMockXdsResourceConfig(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error)
}

type mockXdsResourceDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMockXdsResourceDiscoveryServiceClient(cc grpc.ClientConnInterface) MockXdsResourceDiscoveryServiceClient {
	return &mockXdsResourceDiscoveryServiceClient{cc}
}

func (c *mockXdsResourceDiscoveryServiceClient) StreamMockXdsResourceConfig(ctx context.Context, opts ...grpc.CallOption) (MockXdsResourceDiscoveryService_StreamMockXdsResourceConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MockXdsResourceDiscoveryService_serviceDesc.Streams[0], "/testing.solo.io.MockXdsResourceDiscoveryService/StreamMockXdsResourceConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &mockXdsResourceDiscoveryServiceStreamMockXdsResourceConfigClient{stream}
	return x, nil
}

type MockXdsResourceDiscoveryService_StreamMockXdsResourceConfigClient interface {
	Send(*v2.DiscoveryRequest) error
	Recv() (*v2.DiscoveryResponse, error)
	grpc.ClientStream
}

type mockXdsResourceDiscoveryServiceStreamMockXdsResourceConfigClient struct {
	grpc.ClientStream
}

func (x *mockXdsResourceDiscoveryServiceStreamMockXdsResourceConfigClient) Send(m *v2.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mockXdsResourceDiscoveryServiceStreamMockXdsResourceConfigClient) Recv() (*v2.DiscoveryResponse, error) {
	m := new(v2.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mockXdsResourceDiscoveryServiceClient) DeltaMockXdsResourceConfig(ctx context.Context, opts ...grpc.CallOption) (MockXdsResourceDiscoveryService_DeltaMockXdsResourceConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MockXdsResourceDiscoveryService_serviceDesc.Streams[1], "/testing.solo.io.MockXdsResourceDiscoveryService/DeltaMockXdsResourceConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &mockXdsResourceDiscoveryServiceDeltaMockXdsResourceConfigClient{stream}
	return x, nil
}

type MockXdsResourceDiscoveryService_DeltaMockXdsResourceConfigClient interface {
	Send(*v2.DeltaDiscoveryRequest) error
	Recv() (*v2.DeltaDiscoveryResponse, error)
	grpc.ClientStream
}

type mockXdsResourceDiscoveryServiceDeltaMockXdsResourceConfigClient struct {
	grpc.ClientStream
}

func (x *mockXdsResourceDiscoveryServiceDeltaMockXdsResourceConfigClient) Send(m *v2.DeltaDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mockXdsResourceDiscoveryServiceDeltaMockXdsResourceConfigClient) Recv() (*v2.DeltaDiscoveryResponse, error) {
	m := new(v2.DeltaDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mockXdsResourceDiscoveryServiceClient) FetchMockXdsResourceConfig(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error) {
	out := new(v2.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/testing.solo.io.MockXdsResourceDiscoveryService/FetchMockXdsResourceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockXdsResourceDiscoveryServiceServer is the server API for MockXdsResourceDiscoveryService service.
type MockXdsResourceDiscoveryServiceServer interface {
	StreamMockXdsResourceConfig(MockXdsResourceDiscoveryService_StreamMockXdsResourceConfigServer) error
	DeltaMockXdsResourceConfig(MockXdsResourceDiscoveryService_DeltaMockXdsResourceConfigServer) error
	FetchMockXdsResourceConfig(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error)
}

// UnimplementedMockXdsResourceDiscoveryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMockXdsResourceDiscoveryServiceServer struct {
}

func (*UnimplementedMockXdsResourceDiscoveryServiceServer) StreamMockXdsResourceConfig(MockXdsResourceDiscoveryService_StreamMockXdsResourceConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMockXdsResourceConfig not implemented")
}
func (*UnimplementedMockXdsResourceDiscoveryServiceServer) DeltaMockXdsResourceConfig(MockXdsResourceDiscoveryService_DeltaMockXdsResourceConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method DeltaMockXdsResourceConfig not implemented")
}
func (*UnimplementedMockXdsResourceDiscoveryServiceServer) FetchMockXdsResourceConfig(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMockXdsResourceConfig not implemented")
}

func RegisterMockXdsResourceDiscoveryServiceServer(s *grpc.Server, srv MockXdsResourceDiscoveryServiceServer) {
	s.RegisterService(&_MockXdsResourceDiscoveryService_serviceDesc, srv)
}

func _MockXdsResourceDiscoveryService_StreamMockXdsResourceConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MockXdsResourceDiscoveryServiceServer).StreamMockXdsResourceConfig(&mockXdsResourceDiscoveryServiceStreamMockXdsResourceConfigServer{stream})
}

type MockXdsResourceDiscoveryService_StreamMockXdsResourceConfigServer interface {
	Send(*v2.DiscoveryResponse) error
	Recv() (*v2.DiscoveryRequest, error)
	grpc.ServerStream
}

type mockXdsResourceDiscoveryServiceStreamMockXdsResourceConfigServer struct {
	grpc.ServerStream
}

func (x *mockXdsResourceDiscoveryServiceStreamMockXdsResourceConfigServer) Send(m *v2.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mockXdsResourceDiscoveryServiceStreamMockXdsResourceConfigServer) Recv() (*v2.DiscoveryRequest, error) {
	m := new(v2.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MockXdsResourceDiscoveryService_DeltaMockXdsResourceConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MockXdsResourceDiscoveryServiceServer).DeltaMockXdsResourceConfig(&mockXdsResourceDiscoveryServiceDeltaMockXdsResourceConfigServer{stream})
}

type MockXdsResourceDiscoveryService_DeltaMockXdsResourceConfigServer interface {
	Send(*v2.DeltaDiscoveryResponse) error
	Recv() (*v2.DeltaDiscoveryRequest, error)
	grpc.ServerStream
}

type mockXdsResourceDiscoveryServiceDeltaMockXdsResourceConfigServer struct {
	grpc.ServerStream
}

func (x *mockXdsResourceDiscoveryServiceDeltaMockXdsResourceConfigServer) Send(m *v2.DeltaDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mockXdsResourceDiscoveryServiceDeltaMockXdsResourceConfigServer) Recv() (*v2.DeltaDiscoveryRequest, error) {
	m := new(v2.DeltaDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MockXdsResourceDiscoveryService_FetchMockXdsResourceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockXdsResourceDiscoveryServiceServer).FetchMockXdsResourceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.solo.io.MockXdsResourceDiscoveryService/FetchMockXdsResourceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockXdsResourceDiscoveryServiceServer).FetchMockXdsResourceConfig(ctx, req.(*v2.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MockXdsResourceDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testing.solo.io.MockXdsResourceDiscoveryService",
	HandlerType: (*MockXdsResourceDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchMockXdsResourceConfig",
			Handler:    _MockXdsResourceDiscoveryService_FetchMockXdsResourceConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMockXdsResourceConfig",
			Handler:       _MockXdsResourceDiscoveryService_StreamMockXdsResourceConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeltaMockXdsResourceConfig",
			Handler:       _MockXdsResourceDiscoveryService_DeltaMockXdsResourceConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/solo-io/solo-kit/test/mocks/api/v1/mock_resources.proto",
}
