// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"
	"hash"
	"hash/fnv"
	"log"

	github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes "github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes"

	"github.com/rotisserie/eris"
	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"go.uber.org/zap"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type TestingSnapshot struct {
	Simplemocks          SimpleMockResourceList
	Mocks                MockResourceList
	Fakes                FakeResourceList
	Anothermockresources AnotherMockResourceList
	Clusterresources     ClusterResourceList
	Mcts                 MockCustomTypeList
	Mcshts               MockCustomSpecHashTypeList
	Pods                 github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList
}

func (s TestingSnapshot) Clone() TestingSnapshot {
	return TestingSnapshot{
		Simplemocks:          s.Simplemocks.Clone(),
		Mocks:                s.Mocks.Clone(),
		Fakes:                s.Fakes.Clone(),
		Anothermockresources: s.Anothermockresources.Clone(),
		Clusterresources:     s.Clusterresources.Clone(),
		Mcts:                 s.Mcts.Clone(),
		Mcshts:               s.Mcshts.Clone(),
		Pods:                 s.Pods.Clone(),
	}
}

func (s TestingSnapshot) Hash(hasher hash.Hash64) (uint64, error) {
	if hasher == nil {
		hasher = fnv.New64()
	}
	if _, err := s.hashSimplemocks(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashMocks(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashFakes(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashAnothermockresources(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashClusterresources(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashMcts(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashMcshts(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashPods(hasher); err != nil {
		return 0, err
	}
	return hasher.Sum64(), nil
}

func (s TestingSnapshot) hashSimplemocks(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Simplemocks.AsInterfaces()...)
}

func (s TestingSnapshot) hashMocks(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Mocks.AsInterfaces()...)
}

func (s TestingSnapshot) hashFakes(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Fakes.AsInterfaces()...)
}

func (s TestingSnapshot) hashAnothermockresources(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Anothermockresources.AsInterfaces()...)
}

func (s TestingSnapshot) hashClusterresources(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Clusterresources.AsInterfaces()...)
}

func (s TestingSnapshot) hashMcts(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Mcts.AsInterfaces()...)
}

func (s TestingSnapshot) hashMcshts(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Mcshts.AsInterfaces()...)
}

func (s TestingSnapshot) hashPods(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Pods.AsInterfaces()...)
}

func (s TestingSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	hasher := fnv.New64()
	SimplemocksHash, err := s.hashSimplemocks(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("simplemocks", SimplemocksHash))
	MocksHash, err := s.hashMocks(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("mocks", MocksHash))
	FakesHash, err := s.hashFakes(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("fakes", FakesHash))
	AnothermockresourcesHash, err := s.hashAnothermockresources(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("anothermockresources", AnothermockresourcesHash))
	ClusterresourcesHash, err := s.hashClusterresources(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("clusterresources", ClusterresourcesHash))
	MctsHash, err := s.hashMcts(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("mcts", MctsHash))
	McshtsHash, err := s.hashMcshts(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("mcshts", McshtsHash))
	PodsHash, err := s.hashPods(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("pods", PodsHash))
	snapshotHash, err := s.Hash(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	return append(fields, zap.Uint64("snapshotHash", snapshotHash))
}

func (s *TestingSnapshot) GetResourcesList(resource resources.Resource) (resources.ResourceList, error) {
	switch resource.(type) {
	case *SimpleMockResource:
		return s.Simplemocks.AsResources(), nil
	case *MockResource:
		return s.Mocks.AsResources(), nil
	case *FakeResource:
		return s.Fakes.AsResources(), nil
	case *AnotherMockResource:
		return s.Anothermockresources.AsResources(), nil
	case *ClusterResource:
		return s.Clusterresources.AsResources(), nil
	case *MockCustomType:
		return s.Mcts.AsResources(), nil
	case *MockCustomSpecHashType:
		return s.Mcshts.AsResources(), nil
	case *github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.Pod:
		return s.Pods.AsResources(), nil
	default:
		return resources.ResourceList{}, eris.New("did not contain the input resource type returning empty list")
	}
}

func (s *TestingSnapshot) RemoveFromResourceList(resource resources.Resource) error {
	refKey := resource.GetMetadata().Ref().Key()
	switch resource.(type) {
	case *SimpleMockResource:

		for i, res := range s.Simplemocks {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Simplemocks = append(s.Simplemocks[:i], s.Simplemocks[i+1:]...)
				break
			}
		}
		return nil
	case *MockResource:

		for i, res := range s.Mocks {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Mocks = append(s.Mocks[:i], s.Mocks[i+1:]...)
				break
			}
		}
		return nil
	case *FakeResource:

		for i, res := range s.Fakes {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Fakes = append(s.Fakes[:i], s.Fakes[i+1:]...)
				break
			}
		}
		return nil
	case *AnotherMockResource:

		for i, res := range s.Anothermockresources {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Anothermockresources = append(s.Anothermockresources[:i], s.Anothermockresources[i+1:]...)
				break
			}
		}
		return nil
	case *ClusterResource:

		for i, res := range s.Clusterresources {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Clusterresources = append(s.Clusterresources[:i], s.Clusterresources[i+1:]...)
				break
			}
		}
		return nil
	case *MockCustomType:

		for i, res := range s.Mcts {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Mcts = append(s.Mcts[:i], s.Mcts[i+1:]...)
				break
			}
		}
		return nil
	case *MockCustomSpecHashType:

		for i, res := range s.Mcshts {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Mcshts = append(s.Mcshts[:i], s.Mcshts[i+1:]...)
				break
			}
		}
		return nil
	case *github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.Pod:

		for i, res := range s.Pods {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Pods = append(s.Pods[:i], s.Pods[i+1:]...)
				break
			}
		}
		return nil
	default:
		return eris.Errorf("did not remove the resource because its type does not exist [%T]", resource)
	}
}

func (s *TestingSnapshot) UpsertToResourceList(resource resources.Resource) error {
	refKey := resource.GetMetadata().Ref().Key()
	switch typed := resource.(type) {
	case *SimpleMockResource:
		updated := false
		for i, res := range s.Simplemocks {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Simplemocks[i] = typed
				updated = true
			}
		}
		if !updated {
			s.Simplemocks = append(s.Simplemocks, typed)
		}
		s.Simplemocks.Sort()
		return nil
	case *MockResource:
		updated := false
		for i, res := range s.Mocks {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Mocks[i] = typed
				updated = true
			}
		}
		if !updated {
			s.Mocks = append(s.Mocks, typed)
		}
		s.Mocks.Sort()
		return nil
	case *FakeResource:
		updated := false
		for i, res := range s.Fakes {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Fakes[i] = typed
				updated = true
			}
		}
		if !updated {
			s.Fakes = append(s.Fakes, typed)
		}
		s.Fakes.Sort()
		return nil
	case *AnotherMockResource:
		updated := false
		for i, res := range s.Anothermockresources {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Anothermockresources[i] = typed
				updated = true
			}
		}
		if !updated {
			s.Anothermockresources = append(s.Anothermockresources, typed)
		}
		s.Anothermockresources.Sort()
		return nil
	case *ClusterResource:
		updated := false
		for i, res := range s.Clusterresources {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Clusterresources[i] = typed
				updated = true
			}
		}
		if !updated {
			s.Clusterresources = append(s.Clusterresources, typed)
		}
		s.Clusterresources.Sort()
		return nil
	case *MockCustomType:
		updated := false
		for i, res := range s.Mcts {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Mcts[i] = typed
				updated = true
			}
		}
		if !updated {
			s.Mcts = append(s.Mcts, typed)
		}
		s.Mcts.Sort()
		return nil
	case *MockCustomSpecHashType:
		updated := false
		for i, res := range s.Mcshts {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Mcshts[i] = typed
				updated = true
			}
		}
		if !updated {
			s.Mcshts = append(s.Mcshts, typed)
		}
		s.Mcshts.Sort()
		return nil
	case *github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.Pod:
		updated := false
		for i, res := range s.Pods {
			if refKey == res.GetMetadata().Ref().Key() {
				s.Pods[i] = typed
				updated = true
			}
		}
		if !updated {
			s.Pods = append(s.Pods, typed)
		}
		s.Pods.Sort()
		return nil
	default:
		return eris.Errorf("did not add/replace the resource type because it does not exist %T", resource)
	}
}

type TestingSnapshotStringer struct {
	Version              uint64
	Simplemocks          []string
	Mocks                []string
	Fakes                []string
	Anothermockresources []string
	Clusterresources     []string
	Mcts                 []string
	Mcshts               []string
	Pods                 []string
}

func (ss TestingSnapshotStringer) String() string {
	s := fmt.Sprintf("TestingSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Simplemocks %v\n", len(ss.Simplemocks))
	for _, name := range ss.Simplemocks {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Mocks %v\n", len(ss.Mocks))
	for _, name := range ss.Mocks {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Fakes %v\n", len(ss.Fakes))
	for _, name := range ss.Fakes {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Anothermockresources %v\n", len(ss.Anothermockresources))
	for _, name := range ss.Anothermockresources {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Clusterresources %v\n", len(ss.Clusterresources))
	for _, name := range ss.Clusterresources {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Mcts %v\n", len(ss.Mcts))
	for _, name := range ss.Mcts {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Mcshts %v\n", len(ss.Mcshts))
	for _, name := range ss.Mcshts {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Pods %v\n", len(ss.Pods))
	for _, name := range ss.Pods {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s TestingSnapshot) Stringer() TestingSnapshotStringer {
	snapshotHash, err := s.Hash(nil)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	return TestingSnapshotStringer{
		Version:              snapshotHash,
		Simplemocks:          s.Simplemocks.NamespacesDotNames(),
		Mocks:                s.Mocks.NamespacesDotNames(),
		Fakes:                s.Fakes.NamespacesDotNames(),
		Anothermockresources: s.Anothermockresources.NamespacesDotNames(),
		Clusterresources:     s.Clusterresources.Names(),
		Mcts:                 s.Mcts.NamespacesDotNames(),
		Mcshts:               s.Mcshts.NamespacesDotNames(),
		Pods:                 s.Pods.NamespacesDotNames(),
	}
}

var TestingGvkToHashableResource = map[schema.GroupVersionKind]func() resources.HashableResource{
	SimpleMockResourceGVK:     NewSimpleMockResourceHashableResource,
	MockResourceGVK:           NewMockResourceHashableResource,
	FakeResourceGVK:           NewFakeResourceHashableResource,
	AnotherMockResourceGVK:    NewAnotherMockResourceHashableResource,
	ClusterResourceGVK:        NewClusterResourceHashableResource,
	MockCustomTypeGVK:         NewMockCustomTypeHashableResource,
	MockCustomSpecHashTypeGVK: NewMockCustomSpecHashTypeHashableResource,
	github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodGVK: github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodHashableResource,
}
