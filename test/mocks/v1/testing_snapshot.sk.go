// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"
	"hash"
	"hash/fnv"
	"log"

	github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes "github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes"

	"github.com/rotisserie/eris"
	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type TestingSnapshot struct {
	Mocks                MockResourceList
	Fakes                FakeResourceList
	Anothermockresources AnotherMockResourceList
	Clusterresources     ClusterResourceList
	Mcts                 MockCustomTypeList
	Pods                 github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList
}

func (s TestingSnapshot) Clone() TestingSnapshot {
	return TestingSnapshot{
		Mocks:                s.Mocks.Clone(),
		Fakes:                s.Fakes.Clone(),
		Anothermockresources: s.Anothermockresources.Clone(),
		Clusterresources:     s.Clusterresources.Clone(),
		Mcts:                 s.Mcts.Clone(),
		Pods:                 s.Pods.Clone(),
	}
}

func (s TestingSnapshot) Hash(hasher hash.Hash64) (uint64, error) {
	if hasher == nil {
		hasher = fnv.New64()
	}
	if _, err := s.hashMocks(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashFakes(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashAnothermockresources(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashClusterresources(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashMcts(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashPods(hasher); err != nil {
		return 0, err
	}
	return hasher.Sum64(), nil
}

func (s TestingSnapshot) hashMocks(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Mocks.AsInterfaces()...)
}

func (s TestingSnapshot) hashFakes(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Fakes.AsInterfaces()...)
}

func (s TestingSnapshot) hashAnothermockresources(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Anothermockresources.AsInterfaces()...)
}

func (s TestingSnapshot) hashClusterresources(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Clusterresources.AsInterfaces()...)
}

func (s TestingSnapshot) hashMcts(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Mcts.AsInterfaces()...)
}

func (s TestingSnapshot) hashPods(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Pods.AsInterfaces()...)
}

func (s TestingSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	hasher := fnv.New64()
	MocksHash, err := s.hashMocks(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("mocks", MocksHash))
	FakesHash, err := s.hashFakes(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("fakes", FakesHash))
	AnothermockresourcesHash, err := s.hashAnothermockresources(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("anothermockresources", AnothermockresourcesHash))
	ClusterresourcesHash, err := s.hashClusterresources(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("clusterresources", ClusterresourcesHash))
	MctsHash, err := s.hashMcts(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("mcts", MctsHash))
	PodsHash, err := s.hashPods(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("pods", PodsHash))
	snapshotHash, err := s.Hash(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	return append(fields, zap.Uint64("snapshotHash", snapshotHash))
}

type TestingSnapshotStringer struct {
	Version              uint64
	Mocks                []string
	Fakes                []string
	Anothermockresources []string
	Clusterresources     []string
	Mcts                 []string
	Pods                 []string
}

func (ss TestingSnapshotStringer) String() string {
	s := fmt.Sprintf("TestingSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Mocks %v\n", len(ss.Mocks))
	for _, name := range ss.Mocks {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Fakes %v\n", len(ss.Fakes))
	for _, name := range ss.Fakes {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Anothermockresources %v\n", len(ss.Anothermockresources))
	for _, name := range ss.Anothermockresources {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Clusterresources %v\n", len(ss.Clusterresources))
	for _, name := range ss.Clusterresources {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Mcts %v\n", len(ss.Mcts))
	for _, name := range ss.Mcts {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Pods %v\n", len(ss.Pods))
	for _, name := range ss.Pods {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s TestingSnapshot) Stringer() TestingSnapshotStringer {
	snapshotHash, err := s.Hash(nil)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	return TestingSnapshotStringer{
		Version:              snapshotHash,
		Mocks:                s.Mocks.NamespacesDotNames(),
		Fakes:                s.Fakes.NamespacesDotNames(),
		Anothermockresources: s.Anothermockresources.NamespacesDotNames(),
		Clusterresources:     s.Clusterresources.Names(),
		Mcts:                 s.Mcts.NamespacesDotNames(),
		Pods:                 s.Pods.NamespacesDotNames(),
	}
}
