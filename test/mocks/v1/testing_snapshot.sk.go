// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"

	github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes "github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes"

	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type TestingSnapshot struct {
	Mocks                MocksByNamespace
	Fakes                FakesByNamespace
	Anothermockresources AnothermockresourcesByNamespace
	Clusterresources     ClusterResourceList
	Mcts                 MctsByNamespace
	Pods                 github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodsByNamespace
}

func (s TestingSnapshot) Clone() TestingSnapshot {
	return TestingSnapshot{
		Mocks:                s.Mocks.Clone(),
		Fakes:                s.Fakes.Clone(),
		Anothermockresources: s.Anothermockresources.Clone(),
		Clusterresources:     s.Clusterresources.Clone(),
		Mcts:                 s.Mcts.Clone(),
		Pods:                 s.Pods.Clone(),
	}
}

func (s TestingSnapshot) Hash() uint64 {
	return hashutils.HashAll(
		s.hashMocks(),
		s.hashFakes(),
		s.hashAnothermockresources(),
		s.hashClusterresources(),
		s.hashMcts(),
		s.hashPods(),
	)
}

func (s TestingSnapshot) hashMocks() uint64 {
	return hashutils.HashAll(s.Mocks.List().AsInterfaces()...)
}

func (s TestingSnapshot) hashFakes() uint64 {
	return hashutils.HashAll(s.Fakes.List().AsInterfaces()...)
}

func (s TestingSnapshot) hashAnothermockresources() uint64 {
	return hashutils.HashAll(s.Anothermockresources.List().AsInterfaces()...)
}

func (s TestingSnapshot) hashClusterresources() uint64 {
	return hashutils.HashAll(s.Clusterresources.AsInterfaces()...)
}

func (s TestingSnapshot) hashMcts() uint64 {
	return hashutils.HashAll(s.Mcts.List().AsInterfaces()...)
}

func (s TestingSnapshot) hashPods() uint64 {
	return hashutils.HashAll(s.Pods.List().AsInterfaces()...)
}

func (s TestingSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	fields = append(fields, zap.Uint64("mocks", s.hashMocks()))
	fields = append(fields, zap.Uint64("fakes", s.hashFakes()))
	fields = append(fields, zap.Uint64("anothermockresources", s.hashAnothermockresources()))
	fields = append(fields, zap.Uint64("clusterresources", s.hashClusterresources()))
	fields = append(fields, zap.Uint64("mcts", s.hashMcts()))
	fields = append(fields, zap.Uint64("pods", s.hashPods()))

	return append(fields, zap.Uint64("snapshotHash", s.Hash()))
}

type TestingSnapshotStringer struct {
	Version              uint64
	Mocks                []string
	Fakes                []string
	Anothermockresources []string
	Clusterresources     []string
	Mcts                 []string
	Pods                 []string
}

func (ss TestingSnapshotStringer) String() string {
	s := fmt.Sprintf("TestingSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Mocks %v\n", len(ss.Mocks))
	for _, name := range ss.Mocks {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Fakes %v\n", len(ss.Fakes))
	for _, name := range ss.Fakes {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Anothermockresources %v\n", len(ss.Anothermockresources))
	for _, name := range ss.Anothermockresources {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Clusterresources %v\n", len(ss.Clusterresources))
	for _, name := range ss.Clusterresources {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Mcts %v\n", len(ss.Mcts))
	for _, name := range ss.Mcts {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Pods %v\n", len(ss.Pods))
	for _, name := range ss.Pods {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s TestingSnapshot) Stringer() TestingSnapshotStringer {
	return TestingSnapshotStringer{
		Version:              s.Hash(),
		Mocks:                s.Mocks.List().NamespacesDotNames(),
		Fakes:                s.Fakes.List().NamespacesDotNames(),
		Anothermockresources: s.Anothermockresources.List().NamespacesDotNames(),
		Clusterresources:     s.Clusterresources.Names(),
		Mcts:                 s.Mcts.List().NamespacesDotNames(),
		Pods:                 s.Pods.List().NamespacesDotNames(),
	}
}
