// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/mitchellh/hashstructure"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"go.uber.org/zap"
)

type TestingSnapshot struct {
	Mocks MocksByNamespace
	Fakes FakesByNamespace
}

func (s TestingSnapshot) Clone() TestingSnapshot {
	return TestingSnapshot{
		Mocks: s.Mocks.Clone(),
		Fakes: s.Fakes.Clone(),
	}
}

func (s TestingSnapshot) snapshotToHash() TestingSnapshot {
	snapshotForHashing := s.Clone()
	for _, mockResource := range snapshotForHashing.Mocks.List() {
		resources.UpdateMetadata(mockResource, func(meta *core.Metadata) {
			meta.ResourceVersion = ""
		})
		mockResource.SetStatus(core.Status{})
	}
	for _, fakeResource := range snapshotForHashing.Fakes.List() {
		resources.UpdateMetadata(fakeResource, func(meta *core.Metadata) {
			meta.ResourceVersion = ""
		})
	}

	return snapshotForHashing
}

func (s TestingSnapshot) Hash() uint64 {
	return s.hashStruct(s.snapshotToHash())
}

func (s TestingSnapshot) HashFields() []zap.Field {
	snapshotForHashing := s.snapshotToHash()
	var fields []zap.Field
	mocks := s.hashStruct(snapshotForHashing.Mocks.List())
	fields = append(fields, zap.Uint64("mocks", mocks))
	fakes := s.hashStruct(snapshotForHashing.Fakes.List())
	fields = append(fields, zap.Uint64("fakes", fakes))

	return append(fields, zap.Uint64("snapshotHash", s.hashStruct(snapshotForHashing)))
}

func (s TestingSnapshot) hashStruct(v interface{}) uint64 {
	h, err := hashstructure.Hash(v, nil)
	if err != nil {
		panic(err)
	}
	return h
}
