// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"context"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type SimpleMockResourceWatcher interface {
	// watch namespace-scoped Simplemocks
	Watch(namespace string, opts clients.WatchOpts) (<-chan SimpleMockResourceList, <-chan error, error)
}

type SimpleMockResourceClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*SimpleMockResource, error)
	Write(resource *SimpleMockResource, opts clients.WriteOpts) (*SimpleMockResource, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (SimpleMockResourceList, error)
	SimpleMockResourceWatcher
}

type simpleMockResourceClient struct {
	rc clients.ResourceClient
}

func NewSimpleMockResourceClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (SimpleMockResourceClient, error) {
	return NewSimpleMockResourceClientWithToken(ctx, rcFactory, "")
}

func NewSimpleMockResourceClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (SimpleMockResourceClient, error) {
	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
		ResourceType: &SimpleMockResource{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base SimpleMockResource resource client")
	}
	return NewSimpleMockResourceClientWithBase(rc), nil
}

func NewSimpleMockResourceClientWithBase(rc clients.ResourceClient) SimpleMockResourceClient {
	return &simpleMockResourceClient{
		rc: rc,
	}
}

func (client *simpleMockResourceClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *simpleMockResourceClient) Register() error {
	return client.rc.Register()
}

func (client *simpleMockResourceClient) Read(namespace, name string, opts clients.ReadOpts) (*SimpleMockResource, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*SimpleMockResource), nil
}

func (client *simpleMockResourceClient) Write(simpleMockResource *SimpleMockResource, opts clients.WriteOpts) (*SimpleMockResource, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(simpleMockResource, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*SimpleMockResource), nil
}

func (client *simpleMockResourceClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *simpleMockResourceClient) List(namespace string, opts clients.ListOpts) (SimpleMockResourceList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToSimpleMockResource(resourceList), nil
}

func (client *simpleMockResourceClient) Watch(namespace string, opts clients.WatchOpts) (<-chan SimpleMockResourceList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	simplemocksChan := make(chan SimpleMockResourceList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				select {
				case simplemocksChan <- convertToSimpleMockResource(resourceList):
				case <-opts.Ctx.Done():
					close(simplemocksChan)
					return
				}
			case <-opts.Ctx.Done():
				close(simplemocksChan)
				return
			}
		}
	}()
	return simplemocksChan, errs, nil
}

func convertToSimpleMockResource(resources resources.ResourceList) SimpleMockResourceList {
	var simpleMockResourceList SimpleMockResourceList
	for _, resource := range resources {
		simpleMockResourceList = append(simpleMockResourceList, resource.(*SimpleMockResource))
	}
	return simpleMockResourceList
}
