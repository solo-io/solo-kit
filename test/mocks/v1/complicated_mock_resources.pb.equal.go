// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/test/mocks/api/v1/complicated_mock_resources.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *ComplicatedMockResource) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ComplicatedMockResource)
	if !ok {
		that2, ok := that.(ComplicatedMockResource)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetStatus()).(equality.Equalizer); ok {
		if !h.Equal(target.GetStatus()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetStatus(), target.GetStatus()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetNestedOneOf()).(equality.Equalizer); ok {
		if !h.Equal(target.GetNestedOneOf()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetNestedOneOf(), target.GetNestedOneOf()) {
			return false
		}
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetSslConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSslConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSslConfig(), target.GetSslConfig()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *NestedOneOf) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*NestedOneOf)
	if !ok {
		that2, ok := that.(NestedOneOf)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetField(), target.GetField()) != 0 {
		return false
	}

	if len(m.GetMultipleA()) != len(target.GetMultipleA()) {
		return false
	}
	for idx, v := range m.GetMultipleA() {

		if strings.Compare(v, target.GetMultipleA()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetMultipleB()) != len(target.GetMultipleB()) {
		return false
	}
	for idx, v := range m.GetMultipleB() {

		if strings.Compare(v, target.GetMultipleB()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetMultipleC()) != len(target.GetMultipleC()) {
		return false
	}
	for idx, v := range m.GetMultipleC() {

		if strings.Compare(v, target.GetMultipleC()[idx]) != 0 {
			return false
		}

	}

	if m.GetChoice() != target.GetChoice() {
		return false
	}

	switch m.Option.(type) {

	case *NestedOneOf_OptionA:

		if strings.Compare(m.GetOptionA(), target.GetOptionA()) != 0 {
			return false
		}

	case *NestedOneOf_OptionB:

		if strings.Compare(m.GetOptionB(), target.GetOptionB()) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *LocalSslConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*LocalSslConfig)
	if !ok {
		that2, ok := that.(LocalSslConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetSniDomains()) != len(target.GetSniDomains()) {
		return false
	}
	for idx, v := range m.GetSniDomains() {

		if strings.Compare(v, target.GetSniDomains()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetVerifySubjectAltName()) != len(target.GetVerifySubjectAltName()) {
		return false
	}
	for idx, v := range m.GetVerifySubjectAltName() {

		if strings.Compare(v, target.GetVerifySubjectAltName()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetAlpnProtocols()) != len(target.GetAlpnProtocols()) {
		return false
	}
	for idx, v := range m.GetAlpnProtocols() {

		if strings.Compare(v, target.GetAlpnProtocols()[idx]) != 0 {
			return false
		}

	}

	if m.GetOneWayTls() != target.GetOneWayTls() {
		return false
	}

	switch m.SslConfigOptions.(type) {

	case *LocalSslConfig_A:

		if strings.Compare(m.GetA(), target.GetA()) != 0 {
			return false
		}

	case *LocalSslConfig_B:

		if strings.Compare(m.GetB(), target.GetB()) != 0 {
			return false
		}

	}

	return true
}
