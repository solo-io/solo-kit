// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-kit/test/mocks/api/v1/mock_resources.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_kit_pkg_api_v1_resources_core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *MockResource) Clone() proto.Message {
	var target *MockResource
	if m == nil {
		return target
	}
	target = &MockResource{}

	if h, ok := interface{}(m.GetStatus()).(clone.Cloner); ok {
		target.Status = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Status)
	} else {
		target.Status = proto.Clone(m.GetStatus()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Status)
	}

	if h, ok := interface{}(m.GetMetadata()).(clone.Cloner); ok {
		target.Metadata = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Metadata)
	} else {
		target.Metadata = proto.Clone(m.GetMetadata()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Metadata)
	}

	target.Data = m.GetData()

	target.SomeDumbField = m.GetSomeDumbField()

	switch m.TestOneofFields.(type) {

	case *MockResource_OneofOne:

		target.TestOneofFields = &MockResource_OneofOne{
			OneofOne: m.GetOneofOne(),
		}

	case *MockResource_OneofTwo:

		target.TestOneofFields = &MockResource_OneofTwo{
			OneofTwo: m.GetOneofTwo(),
		}

	}

	switch m.NestedOneofOptions.(type) {

	case *MockResource_OneofNestedoneof:

		if h, ok := interface{}(m.GetOneofNestedoneof()).(clone.Cloner); ok {
			target.NestedOneofOptions = &MockResource_OneofNestedoneof{
				OneofNestedoneof: h.Clone().(*NestedOneOf),
			}
		} else {
			target.NestedOneofOptions = &MockResource_OneofNestedoneof{
				OneofNestedoneof: proto.Clone(m.GetOneofNestedoneof()).(*NestedOneOf),
			}
		}

	}

	return target
}

// Clone function
func (m *NestedOneOf) Clone() proto.Message {
	var target *NestedOneOf
	if m == nil {
		return target
	}
	target = &NestedOneOf{}

	switch m.Option.(type) {

	case *NestedOneOf_OptionA:

		target.Option = &NestedOneOf_OptionA{
			OptionA: m.GetOptionA(),
		}

	case *NestedOneOf_OptionB:

		target.Option = &NestedOneOf_OptionB{
			OptionB: m.GetOptionB(),
		}

	}

	switch m.AnotherOption.(type) {

	case *NestedOneOf_AnotherOptionA:

		target.AnotherOption = &NestedOneOf_AnotherOptionA{
			AnotherOptionA: m.GetAnotherOptionA(),
		}

	case *NestedOneOf_AnotherOptionB:

		target.AnotherOption = &NestedOneOf_AnotherOptionB{
			AnotherOptionB: m.GetAnotherOptionB(),
		}

	}

	switch m.NestedOneof.(type) {

	case *NestedOneOf_AnotherNestedOneofOne:

		if h, ok := interface{}(m.GetAnotherNestedOneofOne()).(clone.Cloner); ok {
			target.NestedOneof = &NestedOneOf_AnotherNestedOneofOne{
				AnotherNestedOneofOne: h.Clone().(*InternalOneOf),
			}
		} else {
			target.NestedOneof = &NestedOneOf_AnotherNestedOneofOne{
				AnotherNestedOneofOne: proto.Clone(m.GetAnotherNestedOneofOne()).(*InternalOneOf),
			}
		}

	case *NestedOneOf_AnotherNestedOneofTwo:

		if h, ok := interface{}(m.GetAnotherNestedOneofTwo()).(clone.Cloner); ok {
			target.NestedOneof = &NestedOneOf_AnotherNestedOneofTwo{
				AnotherNestedOneofTwo: h.Clone().(*InternalOneOf),
			}
		} else {
			target.NestedOneof = &NestedOneOf_AnotherNestedOneofTwo{
				AnotherNestedOneofTwo: proto.Clone(m.GetAnotherNestedOneofTwo()).(*InternalOneOf),
			}
		}

	}

	return target
}

// Clone function
func (m *InternalOneOf) Clone() proto.Message {
	var target *InternalOneOf
	if m == nil {
		return target
	}
	target = &InternalOneOf{}

	switch m.Option.(type) {

	case *InternalOneOf_OptionA:

		target.Option = &InternalOneOf_OptionA{
			OptionA: m.GetOptionA(),
		}

	case *InternalOneOf_OptionB:

		target.Option = &InternalOneOf_OptionB{
			OptionB: m.GetOptionB(),
		}

	}

	return target
}

// Clone function
func (m *FakeResource) Clone() proto.Message {
	var target *FakeResource
	if m == nil {
		return target
	}
	target = &FakeResource{}

	target.Count = m.GetCount()

	if h, ok := interface{}(m.GetMetadata()).(clone.Cloner); ok {
		target.Metadata = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Metadata)
	} else {
		target.Metadata = proto.Clone(m.GetMetadata()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Metadata)
	}

	return target
}

// Clone function
func (m *MockXdsResourceConfig) Clone() proto.Message {
	var target *MockXdsResourceConfig
	if m == nil {
		return target
	}
	target = &MockXdsResourceConfig{}

	target.Domain = m.GetDomain()

	return target
}
