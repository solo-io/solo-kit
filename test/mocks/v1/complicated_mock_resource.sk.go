// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"log"
	"sort"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewComplicatedMockResource(namespace, name string) *ComplicatedMockResource {
	complicatedmockresource := &ComplicatedMockResource{}
	complicatedmockresource.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return complicatedmockresource
}

func (r *ComplicatedMockResource) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *ComplicatedMockResource) SetStatus(status core.Status) {
	r.Status = status
}

func (r *ComplicatedMockResource) MustHash() uint64 {
	hashVal, err := r.Hash(nil)
	if err != nil {
		log.Panicf("error while hashing: (%s) this should never happen", err)
	}
	return hashVal
}

func (r *ComplicatedMockResource) GroupVersionKind() schema.GroupVersionKind {
	return ComplicatedMockResourceGVK
}

type ComplicatedMockResourceList []*ComplicatedMockResource

func (list ComplicatedMockResourceList) Find(namespace, name string) (*ComplicatedMockResource, error) {
	for _, complicatedMockResource := range list {
		if complicatedMockResource.GetMetadata().Name == name && complicatedMockResource.GetMetadata().Namespace == namespace {
			return complicatedMockResource, nil
		}
	}
	return nil, errors.Errorf("list did not find complicatedMockResource %v.%v", namespace, name)
}

func (list ComplicatedMockResourceList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, complicatedMockResource := range list {
		ress = append(ress, complicatedMockResource)
	}
	return ress
}

func (list ComplicatedMockResourceList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, complicatedMockResource := range list {
		ress = append(ress, complicatedMockResource)
	}
	return ress
}

func (list ComplicatedMockResourceList) Names() []string {
	var names []string
	for _, complicatedMockResource := range list {
		names = append(names, complicatedMockResource.GetMetadata().Name)
	}
	return names
}

func (list ComplicatedMockResourceList) NamespacesDotNames() []string {
	var names []string
	for _, complicatedMockResource := range list {
		names = append(names, complicatedMockResource.GetMetadata().Namespace+"."+complicatedMockResource.GetMetadata().Name)
	}
	return names
}

func (list ComplicatedMockResourceList) Sort() ComplicatedMockResourceList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list ComplicatedMockResourceList) Clone() ComplicatedMockResourceList {
	var complicatedMockResourceList ComplicatedMockResourceList
	for _, complicatedMockResource := range list {
		complicatedMockResourceList = append(complicatedMockResourceList, resources.Clone(complicatedMockResource).(*ComplicatedMockResource))
	}
	return complicatedMockResourceList
}

func (list ComplicatedMockResourceList) Each(f func(element *ComplicatedMockResource)) {
	for _, complicatedMockResource := range list {
		f(complicatedMockResource)
	}
}

func (list ComplicatedMockResourceList) EachResource(f func(element resources.Resource)) {
	for _, complicatedMockResource := range list {
		f(complicatedMockResource)
	}
}

func (list ComplicatedMockResourceList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *ComplicatedMockResource) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for ComplicatedMockResource

func (o *ComplicatedMockResource) GetObjectKind() schema.ObjectKind {
	t := ComplicatedMockResourceCrd.TypeMeta()
	return &t
}

func (o *ComplicatedMockResource) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*ComplicatedMockResource)
}

func (o *ComplicatedMockResource) DeepCopyInto(out *ComplicatedMockResource) {
	clone := resources.Clone(o).(*ComplicatedMockResource)
	*out = *clone
}

var (
	ComplicatedMockResourceCrd = crd.NewCrd(
		"complicatedmockresources",
		ComplicatedMockResourceGVK.Group,
		ComplicatedMockResourceGVK.Version,
		ComplicatedMockResourceGVK.Kind,
		"cmr",
		false,
		&ComplicatedMockResource{})
)

func init() {
	if err := crd.AddCrd(ComplicatedMockResourceCrd); err != nil {
		log.Fatalf("could not add crd to global registry")
	}
}

var (
	ComplicatedMockResourceGVK = schema.GroupVersionKind{
		Version: "v1",
		Group:   "testing.solo.io",
		Kind:    "ComplicatedMockResource",
	}
)
