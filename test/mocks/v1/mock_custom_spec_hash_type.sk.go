// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"encoding/binary"
	"hash"
	"hash/fnv"
	"log"
	"sort"

	github_com_solo_io_solo_kit_test_mocks_api_v1_customtype "github.com/solo-io/solo-kit/test/mocks/api/v1/customtype"

	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

var (
	// Compile-time assertion
	_ resources.Resource = new(MockCustomSpecHashType)
)

func NewMockCustomSpecHashTypeHashableResource() resources.HashableResource {
	return new(MockCustomSpecHashType)
}

func NewMockCustomSpecHashType(namespace, name string) *MockCustomSpecHashType {
	mockcustomspechashtype := &MockCustomSpecHashType{}
	mockcustomspechashtype.MockCustomSpecHashType.SetMetadata(&core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return mockcustomspechashtype
}

// require custom resource to implement Clone() as well as resources.Resource interface

type CloneableMockCustomSpecHashType interface {
	resources.Resource
	Clone() *github_com_solo_io_solo_kit_test_mocks_api_v1_customtype.MockCustomSpecHashType
}

var _ CloneableMockCustomSpecHashType = &github_com_solo_io_solo_kit_test_mocks_api_v1_customtype.MockCustomSpecHashType{}

type MockCustomSpecHashType struct {
	github_com_solo_io_solo_kit_test_mocks_api_v1_customtype.MockCustomSpecHashType
}

func (r *MockCustomSpecHashType) Clone() resources.Resource {
	return &MockCustomSpecHashType{MockCustomSpecHashType: *r.MockCustomSpecHashType.Clone()}
}

func (r *MockCustomSpecHashType) Hash(hasher hash.Hash64) (uint64, error) {
	if hasher == nil {
		hasher = fnv.New64()
	}

	_, err := hasher.Write([]byte(r.MockCustomSpecHashType.Namespace))
	if err != nil {
		return 0, err
	}
	_, err = hasher.Write([]byte(r.MockCustomSpecHashType.Name))
	if err != nil {
		return 0, err
	}
	_, err = hasher.Write([]byte(r.MockCustomSpecHashType.UID))
	if err != nil {
		return 0, err
	}

	{
		var result uint64
		innerHash := fnv.New64()
		for k, v := range r.Labels {
			innerHash.Reset()

			if _, err = innerHash.Write([]byte(v)); err != nil {
				return 0, err
			}

			if _, err = innerHash.Write([]byte(k)); err != nil {
				return 0, err
			}

			result = result ^ innerHash.Sum64()
		}
		err = binary.Write(hasher, binary.LittleEndian, result)
		if err != nil {
			return 0, err
		}
	}
	{
		var result uint64
		innerHash := fnv.New64()
		for k, v := range r.Annotations {
			innerHash.Reset()

			if _, err = innerHash.Write([]byte(v)); err != nil {
				return 0, err
			}

			if _, err = innerHash.Write([]byte(k)); err != nil {
				return 0, err
			}

			result = result ^ innerHash.Sum64()
		}
		err = binary.Write(hasher, binary.LittleEndian, result)
		if err != nil {
			return 0, err
		}
	}

	_, err = r.MockCustomSpecHashType.Spec.Hash(hasher)
	if err != nil {
		return 0, err
	}
	return hasher.Sum64(), nil
}

func (r *MockCustomSpecHashType) MustHash() uint64 {
	hashVal, err := r.Hash(nil)
	if err != nil {
		log.Panicf("error while hashing: (%s) this should never happen", err)
	}
	return hashVal
}

func (r *MockCustomSpecHashType) GroupVersionKind() schema.GroupVersionKind {
	return MockCustomSpecHashTypeGVK
}

type MockCustomSpecHashTypeList []*MockCustomSpecHashType

func (list MockCustomSpecHashTypeList) Find(namespace, name string) (*MockCustomSpecHashType, error) {
	for _, mockCustomSpecHashType := range list {
		if mockCustomSpecHashType.GetMetadata().Name == name && mockCustomSpecHashType.GetMetadata().Namespace == namespace {
			return mockCustomSpecHashType, nil
		}
	}
	return nil, errors.Errorf("list did not find mockCustomSpecHashType %v.%v", namespace, name)
}

func (list MockCustomSpecHashTypeList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, mockCustomSpecHashType := range list {
		ress = append(ress, mockCustomSpecHashType)
	}
	return ress
}

func (list MockCustomSpecHashTypeList) Names() []string {
	var names []string
	for _, mockCustomSpecHashType := range list {
		names = append(names, mockCustomSpecHashType.GetMetadata().Name)
	}
	return names
}

func (list MockCustomSpecHashTypeList) NamespacesDotNames() []string {
	var names []string
	for _, mockCustomSpecHashType := range list {
		names = append(names, mockCustomSpecHashType.GetMetadata().Namespace+"."+mockCustomSpecHashType.GetMetadata().Name)
	}
	return names
}

func (list MockCustomSpecHashTypeList) Sort() MockCustomSpecHashTypeList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list MockCustomSpecHashTypeList) Clone() MockCustomSpecHashTypeList {
	var mockCustomSpecHashTypeList MockCustomSpecHashTypeList
	for _, mockCustomSpecHashType := range list {
		mockCustomSpecHashTypeList = append(mockCustomSpecHashTypeList, resources.Clone(mockCustomSpecHashType).(*MockCustomSpecHashType))
	}
	return mockCustomSpecHashTypeList
}

func (list MockCustomSpecHashTypeList) Each(f func(element *MockCustomSpecHashType)) {
	for _, mockCustomSpecHashType := range list {
		f(mockCustomSpecHashType)
	}
}

func (list MockCustomSpecHashTypeList) EachResource(f func(element resources.Resource)) {
	for _, mockCustomSpecHashType := range list {
		f(mockCustomSpecHashType)
	}
}

func (list MockCustomSpecHashTypeList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *MockCustomSpecHashType) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

var (
	MockCustomSpecHashTypeGVK = schema.GroupVersionKind{
		Version: "v1",
		Group:   "testing.solo.io",
		Kind:    "MockCustomSpecHashType",
	}
)
