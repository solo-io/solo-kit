// Code generated by MockGen. DO NOT EDIT.
// Source: ./test/mocks/v1/testing_snapshot_simple_emitter.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/solo-kit/test/mocks/v1"
)

// MockTestingSimpleEmitter is a mock of TestingSimpleEmitter interface
type MockTestingSimpleEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockTestingSimpleEmitterMockRecorder
}

// MockTestingSimpleEmitterMockRecorder is the mock recorder for MockTestingSimpleEmitter
type MockTestingSimpleEmitterMockRecorder struct {
	mock *MockTestingSimpleEmitter
}

// NewMockTestingSimpleEmitter creates a new mock instance
func NewMockTestingSimpleEmitter(ctrl *gomock.Controller) *MockTestingSimpleEmitter {
	mock := &MockTestingSimpleEmitter{ctrl: ctrl}
	mock.recorder = &MockTestingSimpleEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTestingSimpleEmitter) EXPECT() *MockTestingSimpleEmitterMockRecorder {
	return m.recorder
}

// Snapshots mocks base method
func (m *MockTestingSimpleEmitter) Snapshots(ctx context.Context) (<-chan *v1.TestingSnapshot, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", ctx)
	ret0, _ := ret[0].(<-chan *v1.TestingSnapshot)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockTestingSimpleEmitterMockRecorder) Snapshots(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockTestingSimpleEmitter)(nil).Snapshots), ctx)
}
