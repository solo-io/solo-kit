// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/eitanya/go/src/github.com/solo-io/solo-kit/test/mocks/v1/mock_custom_type.sk.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	customtype "github.com/solo-io/solo-kit/test/mocks/api/v1/customtype"
	reflect "reflect"
)

// MockCloneableMockCustomType is a mock of CloneableMockCustomType interface
type MockCloneableMockCustomType struct {
	ctrl     *gomock.Controller
	recorder *MockCloneableMockCustomTypeMockRecorder
}

// MockCloneableMockCustomTypeMockRecorder is the mock recorder for MockCloneableMockCustomType
type MockCloneableMockCustomTypeMockRecorder struct {
	mock *MockCloneableMockCustomType
}

// NewMockCloneableMockCustomType creates a new mock instance
func NewMockCloneableMockCustomType(ctrl *gomock.Controller) *MockCloneableMockCustomType {
	mock := &MockCloneableMockCustomType{ctrl: ctrl}
	mock.recorder = &MockCloneableMockCustomTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloneableMockCustomType) EXPECT() *MockCloneableMockCustomTypeMockRecorder {
	return m.recorder
}

// GetMetadata mocks base method
func (m *MockCloneableMockCustomType) GetMetadata() core.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(core.Metadata)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockCloneableMockCustomTypeMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockCloneableMockCustomType)(nil).GetMetadata))
}

// SetMetadata mocks base method
func (m *MockCloneableMockCustomType) SetMetadata(meta core.Metadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMetadata", meta)
}

// SetMetadata indicates an expected call of SetMetadata
func (mr *MockCloneableMockCustomTypeMockRecorder) SetMetadata(meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetadata", reflect.TypeOf((*MockCloneableMockCustomType)(nil).SetMetadata), meta)
}

// Equal mocks base method
func (m *MockCloneableMockCustomType) Equal(that interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", that)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockCloneableMockCustomTypeMockRecorder) Equal(that interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockCloneableMockCustomType)(nil).Equal), that)
}

// Clone mocks base method
func (m *MockCloneableMockCustomType) Clone() *customtype.MockCustomType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(*customtype.MockCustomType)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockCloneableMockCustomTypeMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockCloneableMockCustomType)(nil).Clone))
}
