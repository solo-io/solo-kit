// Code generated by MockGen. DO NOT EDIT.
// Source: ./test/mocks/v1/cluster_resource_client.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v1 "github.com/solo-io/solo-kit/test/mocks/v1"
)

// MockClusterResourceWatcher is a mock of ClusterResourceWatcher interface
type MockClusterResourceWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockClusterResourceWatcherMockRecorder
}

// MockClusterResourceWatcherMockRecorder is the mock recorder for MockClusterResourceWatcher
type MockClusterResourceWatcherMockRecorder struct {
	mock *MockClusterResourceWatcher
}

// NewMockClusterResourceWatcher creates a new mock instance
func NewMockClusterResourceWatcher(ctrl *gomock.Controller) *MockClusterResourceWatcher {
	mock := &MockClusterResourceWatcher{ctrl: ctrl}
	mock.recorder = &MockClusterResourceWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterResourceWatcher) EXPECT() *MockClusterResourceWatcherMockRecorder {
	return m.recorder
}

// Watch mocks base method
func (m *MockClusterResourceWatcher) Watch(opts clients.WatchOpts) (<-chan v1.ClusterResourceList, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", opts)
	ret0, _ := ret[0].(<-chan v1.ClusterResourceList)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Watch indicates an expected call of Watch
func (mr *MockClusterResourceWatcherMockRecorder) Watch(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterResourceWatcher)(nil).Watch), opts)
}

// MockClusterResourceClient is a mock of ClusterResourceClient interface
type MockClusterResourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterResourceClientMockRecorder
}

// MockClusterResourceClientMockRecorder is the mock recorder for MockClusterResourceClient
type MockClusterResourceClientMockRecorder struct {
	mock *MockClusterResourceClient
}

// NewMockClusterResourceClient creates a new mock instance
func NewMockClusterResourceClient(ctrl *gomock.Controller) *MockClusterResourceClient {
	mock := &MockClusterResourceClient{ctrl: ctrl}
	mock.recorder = &MockClusterResourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterResourceClient) EXPECT() *MockClusterResourceClientMockRecorder {
	return m.recorder
}

// BaseClient mocks base method
func (m *MockClusterResourceClient) BaseClient() clients.ResourceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseClient")
	ret0, _ := ret[0].(clients.ResourceClient)
	return ret0
}

// BaseClient indicates an expected call of BaseClient
func (mr *MockClusterResourceClientMockRecorder) BaseClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseClient", reflect.TypeOf((*MockClusterResourceClient)(nil).BaseClient))
}

// Register mocks base method
func (m *MockClusterResourceClient) Register() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockClusterResourceClientMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockClusterResourceClient)(nil).Register))
}

// Read mocks base method
func (m *MockClusterResourceClient) Read(name string, opts clients.ReadOpts) (*v1.ClusterResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", name, opts)
	ret0, _ := ret[0].(*v1.ClusterResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockClusterResourceClientMockRecorder) Read(name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockClusterResourceClient)(nil).Read), name, opts)
}

// Write mocks base method
func (m *MockClusterResourceClient) Write(resource *v1.ClusterResource, opts clients.WriteOpts) (*v1.ClusterResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", resource, opts)
	ret0, _ := ret[0].(*v1.ClusterResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockClusterResourceClientMockRecorder) Write(resource, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockClusterResourceClient)(nil).Write), resource, opts)
}

// Delete mocks base method
func (m *MockClusterResourceClient) Delete(name string, opts clients.DeleteOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockClusterResourceClientMockRecorder) Delete(name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterResourceClient)(nil).Delete), name, opts)
}

// List mocks base method
func (m *MockClusterResourceClient) List(opts clients.ListOpts) (v1.ClusterResourceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(v1.ClusterResourceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClusterResourceClientMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterResourceClient)(nil).List), opts)
}

// Watch mocks base method
func (m *MockClusterResourceClient) Watch(opts clients.WatchOpts) (<-chan v1.ClusterResourceList, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", opts)
	ret0, _ := ret[0].(<-chan v1.ClusterResourceList)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Watch indicates an expected call of Watch
func (mr *MockClusterResourceClientMockRecorder) Watch(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterResourceClient)(nil).Watch), opts)
}
