// Code generated by solo-kit. DO NOT EDIT.

// +build solokit

package v1

import (
	"context"
	"os"
	"time"

	github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes "github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes"
	"github.com/solo-io/solo-kit/pkg/utils/statusutils"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/solo-io/go-utils/log"
	"github.com/solo-io/k8s-utils/kubeutils"
	"github.com/solo-io/solo-kit/pkg/api/external/kubernetes/namespace"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	kuberc "github.com/solo-io/solo-kit/pkg/api/v1/clients/kube"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/cache"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/memory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/test/helpers"
	v1 "k8s.io/api/core/v1"
	apiext "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"

	// Needed to run tests in GKE
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"

	// From https://github.com/kubernetes/client-go/blob/53c7adfd0294caa142d961e1f780f74081d5b15f/examples/out-of-cluster-client-configuration/main.go#L31
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
)

var _ = Describe("V1Emitter", func() {
	if os.Getenv("RUN_KUBE_TESTS") != "1" {
		log.Printf("This test creates kubernetes resources and is disabled by default. To enable, set RUN_KUBE_TESTS=1 in your env.")
		return
	}
	var (
		ctx                       context.Context
		namespace1, namespace2    string
		namespace3, namespace4    string
		namespace5, namespace6    string
		name1, name2              = "angela" + helpers.RandString(3), "bob" + helpers.RandString(3)
		name3, name4              = "susan" + helpers.RandString(3), "jim" + helpers.RandString(3)
		labels1                   = map[string]string{"env": "test"}
		labels2                   = map[string]string{"env": "testenv", "owner": "foo"}
		labelExpression1          = "env in (test)"
		cfg                       *rest.Config
		clientset                 *apiext.Clientset
		kube                      kubernetes.Interface
		emitter                   TestingEmitter
		simpleMockResourceClient  SimpleMockResourceClient
		mockResourceClient        MockResourceClient
		fakeResourceClient        FakeResourceClient
		anotherMockResourceClient AnotherMockResourceClient
		clusterResourceClient     ClusterResourceClient
		mockCustomTypeClient      MockCustomTypeClient
		podClient                 github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodClient
		resourceNamespaceLister   resources.ResourceNamespaceLister
		kubeCache                 cache.KubeCoreCache
	)
	const (
		TIME_BETWEEN_MESSAGES = 5
	)
	NewSimpleMockResourceWithLabels := func(namespace, name string, labels map[string]string) *SimpleMockResource {
		resource := NewSimpleMockResource(namespace, name)
		resource.Metadata.Labels = labels
		return resource
	}
	NewMockResourceWithLabels := func(namespace, name string, labels map[string]string) *MockResource {
		resource := NewMockResource(namespace, name)
		resource.Metadata.Labels = labels
		return resource
	}
	NewFakeResourceWithLabels := func(namespace, name string, labels map[string]string) *FakeResource {
		resource := NewFakeResource(namespace, name)
		resource.Metadata.Labels = labels
		return resource
	}
	NewAnotherMockResourceWithLabels := func(namespace, name string, labels map[string]string) *AnotherMockResource {
		resource := NewAnotherMockResource(namespace, name)
		resource.Metadata.Labels = labels
		return resource
	}
	NewClusterResourceWithLabels := func(namespace, name string, labels map[string]string) *ClusterResource {
		resource := NewClusterResource(namespace, name)
		resource.Metadata.Labels = labels
		return resource
	}
	NewMockCustomTypeWithLabels := func(namespace, name string, labels map[string]string) *MockCustomType {
		resource := NewMockCustomType(namespace, name)
		resource.Metadata.Labels = labels
		return resource
	}
	NewPodWithLabels := func(namespace, name string, labels map[string]string) *github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.Pod {
		resource := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace, name)
		resource.Metadata.Labels = labels
		return resource
	}

	createNamespaces := func(ctx context.Context, kube kubernetes.Interface, namespaces ...string) {
		err := kubeutils.CreateNamespacesInParallel(ctx, kube, namespaces...)
		Expect(err).NotTo(HaveOccurred())
	}

	createNamespaceWithLabel := func(ctx context.Context, kube kubernetes.Interface, namespace string, labels map[string]string) {
		_, err := kube.CoreV1().Namespaces().Create(ctx, &v1.Namespace{
			ObjectMeta: metav1.ObjectMeta{
				Name:   namespace,
				Labels: labels,
			},
		}, metav1.CreateOptions{})
		Expect(err).ToNot(HaveOccurred())
	}

	deleteNonDefaultKubeNamespaces := func(ctx context.Context, kube kubernetes.Interface) {
		// clean up your local environment
		namespaces, err := kube.CoreV1().Namespaces().List(ctx, metav1.ListOptions{})
		Expect(err).ToNot(HaveOccurred())
		defaultNamespaces := map[string]bool{"kube-node-lease": true, "kube-public": true, "kube-system": true, "local-path-storage": true, "default": true}
		var namespacesToDelete []string
		for _, ns := range namespaces.Items {
			if _, hit := defaultNamespaces[ns.Name]; !hit {
				namespacesToDelete = append(namespacesToDelete, ns.Name)
			}
		}
		err = kubeutils.DeleteNamespacesInParallelBlocking(ctx, kube, namespacesToDelete...)
		Expect(err).ToNot(HaveOccurred())
	}

	deleteNamespaces := func(ctx context.Context, kube kubernetes.Interface, namespaces ...string) {
		err := kubeutils.DeleteNamespacesInParallelBlocking(ctx, kube, namespaces...)
		Expect(err).NotTo(HaveOccurred())
	}

	runNamespacedSelectorsWithWatchNamespaces := func() {
		ctx := context.Background()
		err := emitter.Register()
		Expect(err).NotTo(HaveOccurred())

		// There is an error here in the code.
		snapshots, errs, err := emitter.Snapshots([]string{namespace1, namespace2}, clients.WatchOpts{
			Ctx:                ctx,
			RefreshRate:        time.Second,
			ExpressionSelector: labelExpression1,
		})
		Expect(err).NotTo(HaveOccurred())

		var snap *TestingSnapshot

		assertNoMessageSent := func() {
			for {
				select {
				case snap = <-snapshots:
					Fail("expected that no snapshots would be recieved " + log.Sprintf("%v", snap))
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 5):
					// this means that we have not recieved any mocks that we are not expecting
					return
				}
			}
		}

		/*
			SimpleMockResource
		*/
		assertSnapshotSimplemocks := func(expectSimplemocks SimpleMockResourceList, unexpectSimplemocks SimpleMockResourceList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectSimplemocks {
						if _, err := snap.Simplemocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectSimplemocks {
						if _, err := snap.Simplemocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := simpleMockResourceClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := simpleMockResourceClient.List(namespace2, clients.ListOpts{})
					combined := append(nsList1, nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}

		simpleMockResource1a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResource1b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched := SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}
		assertSnapshotSimplemocks(watched, nil)

		simpleMockResource2a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResource2b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, SimpleMockResourceList{simpleMockResource2a, simpleMockResource2b}...)
		assertSnapshotMocks(watched, nil)

		simpleMockResource3a, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResource3b, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace2, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, SimpleMockResourceList{simpleMockResource3a, simpleMockResource3b}...)
		assertSnapshotMocks(watched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		simpleMockResource4a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResource4b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, simpleMockResource4a)
		notWatched := SimpleMockResourceList{simpleMockResource4b}
		assertSnapshotMocks(watched, notWatched)

		simpleMockResource5a, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResource5b, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, simpleMockResource5a)
		notWatched = append(notWatched, simpleMockResource5b)
		assertSnapshotMocks(watched, notWatched)

		simpleMockResource6a, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace3, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResource6b, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace4, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, simpleMockResource6a)
		notWatched = append(notWatched, simpleMockResource6b)
		assertSnapshotMocks(watched, notWatched)

		createNamespaceWithLabel(ctx, kube, namespace5, labels1)
		createNamespaces(ctx, kube, namespace6)

		simpleMockResource7a, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace5, name1, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResource7b, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace6, name1, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, simpleMockResource7a)
		notWatched = append(notWatched, simpleMockResource7b)
		assertSnapshotMocks(watched, notWatched)

		simpleMockResource8a, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace6, name2, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResource8b, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace6, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, SimpleMockResourceList{simpleMockResource8a, simpleMockResource8b}...)
		assertNoMessageSent()

		for _, r := range notWatched {
			err = simpleMockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
		}
		assertNoMessageSent()

		err = simpleMockResourceClient.Delete(simpleMockResource1a.GetMetadata().Namespace, simpleMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = simpleMockResourceClient.Delete(simpleMockResource1b.GetMetadata().Namespace, simpleMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}...)
		watched = SimpleMockResourceList{simpleMockResource2a, simpleMockResource2b, simpleMockResource3a, simpleMockResource3b, simpleMockResource4a, simpleMockResource5a, simpleMockResource6a, simpleMockResource7a}
		assertSnapshotSimplemocks(watched, notWatched)

		err = simpleMockResourceClient.Delete(simpleMockResource2a.GetMetadata().Namespace, simpleMockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = simpleMockResourceClient.Delete(simpleMockResource2b.GetMetadata().Namespace, simpleMockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, SimpleMockResourceList{simpleMockResource2a, simpleMockResource2b}...)
		watched = SimpleMockResourceList{simpleMockResource3a, simpleMockResource3b, simpleMockResource4a, simpleMockResource5a, simpleMockResource6a, simpleMockResource7a}
		assertSnapshotSimplemocks(watched, notWatched)

		err = simpleMockResourceClient.Delete(simpleMockResource3a.GetMetadata().Namespace, simpleMockResource3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = simpleMockResourceClient.Delete(simpleMockResource3b.GetMetadata().Namespace, simpleMockResource3b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, SimpleMockResourceList{simpleMockResource3a, simpleMockResource3b}...)
		watched = SimpleMockResourceList{simpleMockResource4a, simpleMockResource5a, simpleMockResource6a, simpleMockResource7a}
		assertSnapshotSimplemocks(watched, notWatched)

		err = simpleMockResourceClient.Delete(simpleMockResource4a.GetMetadata().Namespace, simpleMockResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = simpleMockResourceClient.Delete(simpleMockResource5a.GetMetadata().Namespace, simpleMockResource5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, SimpleMockResourceList{simpleMockResource5a, simpleMockResource5b}...)
		watched = SimpleMockResourceList{simpleMockResource6a, simpleMockResource7a}
		assertSnapshotSimplemocks(watched, notWatched)

		err = simpleMockResourceClient.Delete(simpleMockResource6a.GetMetadata().Namespace, simpleMockResource6a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = simpleMockResourceClient.Delete(simpleMockResource7a.GetMetadata().Namespace, simpleMockResource7a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, SimpleMockResourceList{simpleMockResource6a, simpleMockResource7a}...)
		assertSnapshotSimplemocks(nil, notWatched)

		/*
			MockResource
		*/
		assertSnapshotMocks := func(expectMocks MockResourceList, unexpectMocks MockResourceList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectMocks {
						if _, err := snap.Mocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectMocks {
						if _, err := snap.Mocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := mockResourceClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := mockResourceClient.List(namespace2, clients.ListOpts{})
					combined := append(nsList1, nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}

		mockResource1a, err := mockResourceClient.Write(NewMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResource1b, err := mockResourceClient.Write(NewMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched := MockResourceList{mockResource1a, mockResource1b}
		assertSnapshotMocks(watched, nil)

		mockResource2a, err := mockResourceClient.Write(NewMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResource2b, err := mockResourceClient.Write(NewMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, MockResourceList{mockResource2a, mockResource2b}...)
		assertSnapshotMocks(watched, nil)

		mockResource3a, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResource3b, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace2, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, MockResourceList{mockResource3a, mockResource3b}...)
		assertSnapshotMocks(watched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		mockResource4a, err := mockResourceClient.Write(NewMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResource4b, err := mockResourceClient.Write(NewMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, mockResource4a)
		notWatched := MockResourceList{mockResource4b}
		assertSnapshotMocks(watched, notWatched)

		mockResource5a, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResource5b, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, mockResource5a)
		notWatched = append(notWatched, mockResource5b)
		assertSnapshotMocks(watched, notWatched)

		mockResource6a, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace3, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResource6b, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace4, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, mockResource6a)
		notWatched = append(notWatched, mockResource6b)
		assertSnapshotMocks(watched, notWatched)

		createNamespaceWithLabel(ctx, kube, namespace5, labels1)
		createNamespaces(ctx, kube, namespace6)

		mockResource7a, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace5, name1, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResource7b, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace6, name1, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, mockResource7a)
		notWatched = append(notWatched, mockResource7b)
		assertSnapshotMocks(watched, notWatched)

		mockResource8a, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace6, name2, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResource8b, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace6, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, MockResourceList{mockResource8a, mockResource8b}...)
		assertNoMessageSent()

		for _, r := range notWatched {
			err = mockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
		}
		assertNoMessageSent()

		err = mockResourceClient.Delete(mockResource1a.GetMetadata().Namespace, mockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockResourceClient.Delete(mockResource1b.GetMetadata().Namespace, mockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, MockResourceList{mockResource1a, mockResource1b}...)
		watched = MockResourceList{mockResource2a, mockResource2b, mockResource3a, mockResource3b, mockResource4a, mockResource5a, mockResource6a, mockResource7a}
		assertSnapshotMocks(watched, notWatched)

		err = mockResourceClient.Delete(mockResource2a.GetMetadata().Namespace, mockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockResourceClient.Delete(mockResource2b.GetMetadata().Namespace, mockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, MockResourceList{mockResource2a, mockResource2b}...)
		watched = MockResourceList{mockResource3a, mockResource3b, mockResource4a, mockResource5a, mockResource6a, mockResource7a}
		assertSnapshotMocks(watched, notWatched)

		err = mockResourceClient.Delete(mockResource3a.GetMetadata().Namespace, mockResource3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockResourceClient.Delete(mockResource3b.GetMetadata().Namespace, mockResource3b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, MockResourceList{mockResource3a, mockResource3b}...)
		watched = MockResourceList{mockResource4a, mockResource5a, mockResource6a, mockResource7a}
		assertSnapshotMocks(watched, notWatched)

		err = mockResourceClient.Delete(mockResource4a.GetMetadata().Namespace, mockResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockResourceClient.Delete(mockResource5a.GetMetadata().Namespace, mockResource5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, MockResourceList{mockResource5a, mockResource5b}...)
		watched = MockResourceList{mockResource6a, mockResource7a}
		assertSnapshotMocks(watched, notWatched)

		err = mockResourceClient.Delete(mockResource6a.GetMetadata().Namespace, mockResource6a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockResourceClient.Delete(mockResource7a.GetMetadata().Namespace, mockResource7a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, MockResourceList{mockResource6a, mockResource7a}...)
		assertSnapshotMocks(nil, notWatched)

		/*
			FakeResource
		*/
		assertSnapshotFakes := func(expectFakes FakeResourceList, unexpectFakes FakeResourceList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectFakes {
						if _, err := snap.Fakes.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectFakes {
						if _, err := snap.Fakes.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := fakeResourceClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := fakeResourceClient.List(namespace2, clients.ListOpts{})
					combined := append(nsList1, nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}

		fakeResource1a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResource1b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched := FakeResourceList{fakeResource1a, fakeResource1b}
		assertSnapshotFakes(watched, nil)

		fakeResource2a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResource2b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, FakeResourceList{fakeResource2a, fakeResource2b}...)
		assertSnapshotMocks(watched, nil)

		fakeResource3a, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResource3b, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace2, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, FakeResourceList{fakeResource3a, fakeResource3b}...)
		assertSnapshotMocks(watched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		fakeResource4a, err := fakeResourceClient.Write(NewFakeResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResource4b, err := fakeResourceClient.Write(NewFakeResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, fakeResource4a)
		notWatched := FakeResourceList{fakeResource4b}
		assertSnapshotMocks(watched, notWatched)

		fakeResource5a, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResource5b, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, fakeResource5a)
		notWatched = append(notWatched, fakeResource5b)
		assertSnapshotMocks(watched, notWatched)

		fakeResource6a, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace3, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResource6b, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace4, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, fakeResource6a)
		notWatched = append(notWatched, fakeResource6b)
		assertSnapshotMocks(watched, notWatched)

		createNamespaceWithLabel(ctx, kube, namespace5, labels1)
		createNamespaces(ctx, kube, namespace6)

		fakeResource7a, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace5, name1, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResource7b, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace6, name1, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, fakeResource7a)
		notWatched = append(notWatched, fakeResource7b)
		assertSnapshotMocks(watched, notWatched)

		fakeResource8a, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace6, name2, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResource8b, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace6, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, FakeResourceList{fakeResource8a, fakeResource8b}...)
		assertNoMessageSent()

		for _, r := range notWatched {
			err = fakeResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
		}
		assertNoMessageSent()

		err = fakeResourceClient.Delete(fakeResource1a.GetMetadata().Namespace, fakeResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = fakeResourceClient.Delete(fakeResource1b.GetMetadata().Namespace, fakeResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, FakeResourceList{fakeResource1a, fakeResource1b}...)
		watched = FakeResourceList{fakeResource2a, fakeResource2b, fakeResource3a, fakeResource3b, fakeResource4a, fakeResource5a, fakeResource6a, fakeResource7a}
		assertSnapshotFakes(watched, notWatched)

		err = fakeResourceClient.Delete(fakeResource2a.GetMetadata().Namespace, fakeResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = fakeResourceClient.Delete(fakeResource2b.GetMetadata().Namespace, fakeResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, FakeResourceList{fakeResource2a, fakeResource2b}...)
		watched = FakeResourceList{fakeResource3a, fakeResource3b, fakeResource4a, fakeResource5a, fakeResource6a, fakeResource7a}
		assertSnapshotFakes(watched, notWatched)

		err = fakeResourceClient.Delete(fakeResource3a.GetMetadata().Namespace, fakeResource3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = fakeResourceClient.Delete(fakeResource3b.GetMetadata().Namespace, fakeResource3b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, FakeResourceList{fakeResource3a, fakeResource3b}...)
		watched = FakeResourceList{fakeResource4a, fakeResource5a, fakeResource6a, fakeResource7a}
		assertSnapshotFakes(watched, notWatched)

		err = fakeResourceClient.Delete(fakeResource4a.GetMetadata().Namespace, fakeResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = fakeResourceClient.Delete(fakeResource5a.GetMetadata().Namespace, fakeResource5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, FakeResourceList{fakeResource5a, fakeResource5b}...)
		watched = FakeResourceList{fakeResource6a, fakeResource7a}
		assertSnapshotFakes(watched, notWatched)

		err = fakeResourceClient.Delete(fakeResource6a.GetMetadata().Namespace, fakeResource6a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = fakeResourceClient.Delete(fakeResource7a.GetMetadata().Namespace, fakeResource7a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, FakeResourceList{fakeResource6a, fakeResource7a}...)
		assertSnapshotFakes(nil, notWatched)

		/*
			AnotherMockResource
		*/
		assertSnapshotAnothermockresources := func(expectAnothermockresources AnotherMockResourceList, unexpectAnothermockresources AnotherMockResourceList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectAnothermockresources {
						if _, err := snap.Anothermockresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectAnothermockresources {
						if _, err := snap.Anothermockresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := anotherMockResourceClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := anotherMockResourceClient.List(namespace2, clients.ListOpts{})
					combined := append(nsList1, nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}

		anotherMockResource1a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResource1b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched := AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}
		assertSnapshotAnothermockresources(watched, nil)

		anotherMockResource2a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResource2b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, AnotherMockResourceList{anotherMockResource2a, anotherMockResource2b}...)
		assertSnapshotMocks(watched, nil)

		anotherMockResource3a, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResource3b, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace2, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, AnotherMockResourceList{anotherMockResource3a, anotherMockResource3b}...)
		assertSnapshotMocks(watched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		anotherMockResource4a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResource4b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, anotherMockResource4a)
		notWatched := AnotherMockResourceList{anotherMockResource4b}
		assertSnapshotMocks(watched, notWatched)

		anotherMockResource5a, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResource5b, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, anotherMockResource5a)
		notWatched = append(notWatched, anotherMockResource5b)
		assertSnapshotMocks(watched, notWatched)

		anotherMockResource6a, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace3, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResource6b, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace4, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, anotherMockResource6a)
		notWatched = append(notWatched, anotherMockResource6b)
		assertSnapshotMocks(watched, notWatched)

		createNamespaceWithLabel(ctx, kube, namespace5, labels1)
		createNamespaces(ctx, kube, namespace6)

		anotherMockResource7a, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace5, name1, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResource7b, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace6, name1, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, anotherMockResource7a)
		notWatched = append(notWatched, anotherMockResource7b)
		assertSnapshotMocks(watched, notWatched)

		anotherMockResource8a, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace6, name2, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResource8b, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace6, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, AnotherMockResourceList{anotherMockResource8a, anotherMockResource8b}...)
		assertNoMessageSent()

		for _, r := range notWatched {
			err = anotherMockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
		}
		assertNoMessageSent()

		err = anotherMockResourceClient.Delete(anotherMockResource1a.GetMetadata().Namespace, anotherMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = anotherMockResourceClient.Delete(anotherMockResource1b.GetMetadata().Namespace, anotherMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}...)
		watched = AnotherMockResourceList{anotherMockResource2a, anotherMockResource2b, anotherMockResource3a, anotherMockResource3b, anotherMockResource4a, anotherMockResource5a, anotherMockResource6a, anotherMockResource7a}
		assertSnapshotAnothermockresources(watched, notWatched)

		err = anotherMockResourceClient.Delete(anotherMockResource2a.GetMetadata().Namespace, anotherMockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = anotherMockResourceClient.Delete(anotherMockResource2b.GetMetadata().Namespace, anotherMockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, AnotherMockResourceList{anotherMockResource2a, anotherMockResource2b}...)
		watched = AnotherMockResourceList{anotherMockResource3a, anotherMockResource3b, anotherMockResource4a, anotherMockResource5a, anotherMockResource6a, anotherMockResource7a}
		assertSnapshotAnothermockresources(watched, notWatched)

		err = anotherMockResourceClient.Delete(anotherMockResource3a.GetMetadata().Namespace, anotherMockResource3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = anotherMockResourceClient.Delete(anotherMockResource3b.GetMetadata().Namespace, anotherMockResource3b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, AnotherMockResourceList{anotherMockResource3a, anotherMockResource3b}...)
		watched = AnotherMockResourceList{anotherMockResource4a, anotherMockResource5a, anotherMockResource6a, anotherMockResource7a}
		assertSnapshotAnothermockresources(watched, notWatched)

		err = anotherMockResourceClient.Delete(anotherMockResource4a.GetMetadata().Namespace, anotherMockResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = anotherMockResourceClient.Delete(anotherMockResource5a.GetMetadata().Namespace, anotherMockResource5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, AnotherMockResourceList{anotherMockResource5a, anotherMockResource5b}...)
		watched = AnotherMockResourceList{anotherMockResource6a, anotherMockResource7a}
		assertSnapshotAnothermockresources(watched, notWatched)

		err = anotherMockResourceClient.Delete(anotherMockResource6a.GetMetadata().Namespace, anotherMockResource6a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = anotherMockResourceClient.Delete(anotherMockResource7a.GetMetadata().Namespace, anotherMockResource7a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, AnotherMockResourceList{anotherMockResource6a, anotherMockResource7a}...)
		assertSnapshotAnothermockresources(nil, notWatched)

		/*
			ClusterResource
		*/
		assertSnapshotClusterresources := func(expectClusterresources ClusterResourceList, unexpectClusterresources ClusterResourceList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectClusterresources {
						if _, err := snap.Clusterresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectClusterresources {
						if _, err := snap.Clusterresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					combined, _ := clusterResourceClient.List(clients.ListOpts{})
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}

		clusterResource1a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched := ClusterResourceList{clusterResource1a}
		assertSnapshotClusterresources(watched, nil)

		clusterResource2a, err := clusterResourceClient.Write(NewClusterResourceWithLabels(namespace1, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, clusterResource2a)
		assertSnapshotClusterresources(watched, nil)

		clusterResource3a, err := clusterResourceClient.Write(NewClusterResourceWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, clusterResource3a)
		assertSnapshotClusterresources(watched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		clusterResource4a, err := clusterResourceClient.Write(NewClusterResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, clusterResource4a)
		assertSnapshotClusterresources(watched, nil)

		clusterResource5a, err := clusterResourceClient.Write(NewClusterResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, clusterResource5a)
		assertSnapshotClusterresources(watched, nil)

		clusterResource6a, err := clusterResourceClient.Write(NewClusterResourceWithLabels(namespace3, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, clusterResource6a)
		assertSnapshotClusterresources(watched, nil)

		createNamespaceWithLabel(ctx, kube, namespace5, labels1)
		createNamespaces(ctx, kube, namespace6)

		clusterResource7a, err := clusterResourceClient.Write(NewClusterResourceWithLabels(namespace5, name2, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, clusterResource7a)
		assertSnapshotClusterresources(watched, nil)

		clusterResource8a, err := clusterResourceClient.Write(NewClusterResourceWithLabels(namespace5, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, clusterResource8a)
		assertSnapshotClusterresources(watched, nil)

		err = clusterResourceClient.Delete(clusterResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = clusterResourceClient.Delete(clusterResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = clusterResourceClient.Delete(clusterResource3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = ClusterResourceList{clusterResource1a, clusterResource2a, clusterResource3a}
		watched = ClusterResourceList{clusterResource4a, clusterResource5a, clusterResource6a, clusterResource7a, clusterResource8a}
		assertSnapshotClusterresources(watched, notWatched)

		err = clusterResourceClient.Delete(clusterResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = clusterResourceClient.Delete(clusterResource5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, ClusterResourceList{clusterResource4a, clusterResource5a}...)
		watched = ClusterResourceList{clusterResource6a, clusterResource7a, clusterResource8a}
		assertSnapshotClusterresources(watched, notWatched)

		err = clusterResourceClient.Delete(clusterResource6a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, ClusterResourceList{clusterResource6a}...)
		watched = ClusterResourceList{clusterResource7a, clusterResource8a}
		assertSnapshotClusterresources(watched, notWatched)

		err = clusterResourceClient.Delete(clusterResource7a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, ClusterResourceList{clusterResource7a}...)
		watched = ClusterResourceList{clusterResource8a}
		assertSnapshotClusterresources(watched, notWatched)

		err = clusterResourceClient.Delete(clusterResource8a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, ClusterResourceList{clusterResource8a}...)
		assertSnapshotClusterresources(nil, notWatched)

		/*
			MockCustomType
		*/
		assertSnapshotmcts := func(expectmcts MockCustomTypeList, unexpectmcts MockCustomTypeList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectmcts {
						if _, err := snap.Mcts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectmcts {
						if _, err := snap.Mcts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := mockCustomTypeClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := mockCustomTypeClient.List(namespace2, clients.ListOpts{})
					combined := append(nsList1, nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}

		mockCustomType1a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomType1b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched := MockCustomTypeList{mockCustomType1a, mockCustomType1b}
		assertSnapshotmcts(watched, nil)

		mockCustomType2a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomType2b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, MockCustomTypeList{mockCustomType2a, mockCustomType2b}...)
		assertSnapshotMocks(watched, nil)

		mockCustomType3a, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomType3b, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace2, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, MockCustomTypeList{mockCustomType3a, mockCustomType3b}...)
		assertSnapshotMocks(watched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		mockCustomType4a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomType4b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace4, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, mockCustomType4a)
		notWatched := MockCustomTypeList{mockCustomType4b}
		assertSnapshotMocks(watched, notWatched)

		mockCustomType5a, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomType5b, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, mockCustomType5a)
		notWatched = append(notWatched, mockCustomType5b)
		assertSnapshotMocks(watched, notWatched)

		mockCustomType6a, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace3, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomType6b, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace4, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, mockCustomType6a)
		notWatched = append(notWatched, mockCustomType6b)
		assertSnapshotMocks(watched, notWatched)

		createNamespaceWithLabel(ctx, kube, namespace5, labels1)
		createNamespaces(ctx, kube, namespace6)

		mockCustomType7a, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace5, name1, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomType7b, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace6, name1, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, mockCustomType7a)
		notWatched = append(notWatched, mockCustomType7b)
		assertSnapshotMocks(watched, notWatched)

		mockCustomType8a, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace6, name2, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomType8b, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace6, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, MockCustomTypeList{mockCustomType8a, mockCustomType8b}...)
		assertNoMessageSent()

		for _, r := range notWatched {
			err = mockCustomTypeClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
		}
		assertNoMessageSent()

		err = mockCustomTypeClient.Delete(mockCustomType1a.GetMetadata().Namespace, mockCustomType1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockCustomTypeClient.Delete(mockCustomType1b.GetMetadata().Namespace, mockCustomType1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, MockCustomTypeList{mockCustomType1a, mockCustomType1b}...)
		watched = MockCustomTypeList{mockCustomType2a, mockCustomType2b, mockCustomType3a, mockCustomType3b, mockCustomType4a, mockCustomType5a, mockCustomType6a, mockCustomType7a}
		assertSnapshotmcts(watched, notWatched)

		err = mockCustomTypeClient.Delete(mockCustomType2a.GetMetadata().Namespace, mockCustomType2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockCustomTypeClient.Delete(mockCustomType2b.GetMetadata().Namespace, mockCustomType2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, MockCustomTypeList{mockCustomType2a, mockCustomType2b}...)
		watched = MockCustomTypeList{mockCustomType3a, mockCustomType3b, mockCustomType4a, mockCustomType5a, mockCustomType6a, mockCustomType7a}
		assertSnapshotmcts(watched, notWatched)

		err = mockCustomTypeClient.Delete(mockCustomType3a.GetMetadata().Namespace, mockCustomType3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockCustomTypeClient.Delete(mockCustomType3b.GetMetadata().Namespace, mockCustomType3b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, MockCustomTypeList{mockCustomType3a, mockCustomType3b}...)
		watched = MockCustomTypeList{mockCustomType4a, mockCustomType5a, mockCustomType6a, mockCustomType7a}
		assertSnapshotmcts(watched, notWatched)

		err = mockCustomTypeClient.Delete(mockCustomType4a.GetMetadata().Namespace, mockCustomType4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockCustomTypeClient.Delete(mockCustomType5a.GetMetadata().Namespace, mockCustomType5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, MockCustomTypeList{mockCustomType5a, mockCustomType5b}...)
		watched = MockCustomTypeList{mockCustomType6a, mockCustomType7a}
		assertSnapshotmcts(watched, notWatched)

		err = mockCustomTypeClient.Delete(mockCustomType6a.GetMetadata().Namespace, mockCustomType6a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockCustomTypeClient.Delete(mockCustomType7a.GetMetadata().Namespace, mockCustomType7a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, MockCustomTypeList{mockCustomType6a, mockCustomType7a}...)
		assertSnapshotmcts(nil, notWatched)

		/*
			Pod
		*/
		assertSnapshotpods := func(expectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList, unexpectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					for _, expected := range expectpods {
						if _, err := snap.Pods.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectpods {
						if _, err := snap.Pods.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					nsList1, _ := podClient.List(namespace1, clients.ListOpts{})
					nsList2, _ := podClient.List(namespace2, clients.ListOpts{})
					combined := append(nsList1, nsList2...)
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}

		pod1a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod1b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}
		assertSnapshotpods(watched, nil)

		pod2a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod2b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2a, pod2b}...)
		assertSnapshotMocks(watched, nil)

		pod3a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod3b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace2, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod3a, pod3b}...)
		assertSnapshotMocks(watched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		pod4a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod4b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace4, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, pod4a)
		notWatched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod4b}
		assertSnapshotMocks(watched, notWatched)

		pod5a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod5b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, pod5a)
		notWatched = append(notWatched, pod5b)
		assertSnapshotMocks(watched, notWatched)

		pod6a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace3, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod6b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace4, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, pod6a)
		notWatched = append(notWatched, pod6b)
		assertSnapshotMocks(watched, notWatched)

		createNamespaceWithLabel(ctx, kube, namespace5, labels1)
		createNamespaces(ctx, kube, namespace6)

		pod7a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace5, name1, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod7b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace6, name1, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		watched = append(watched, pod7a)
		notWatched = append(notWatched, pod7b)
		assertSnapshotMocks(watched, notWatched)

		pod8a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace6, name2, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod8b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace6, name3, labels2), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod8a, pod8b}...)
		assertNoMessageSent()

		for _, r := range notWatched {
			err = podClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
		}
		assertNoMessageSent()

		err = podClient.Delete(pod1a.GetMetadata().Namespace, pod1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = podClient.Delete(pod1b.GetMetadata().Namespace, pod1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}...)
		watched = github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2a, pod2b, pod3a, pod3b, pod4a, pod5a, pod6a, pod7a}
		assertSnapshotpods(watched, notWatched)

		err = podClient.Delete(pod2a.GetMetadata().Namespace, pod2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = podClient.Delete(pod2b.GetMetadata().Namespace, pod2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2a, pod2b}...)
		watched = github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod3a, pod3b, pod4a, pod5a, pod6a, pod7a}
		assertSnapshotpods(watched, notWatched)

		err = podClient.Delete(pod3a.GetMetadata().Namespace, pod3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = podClient.Delete(pod3b.GetMetadata().Namespace, pod3b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod3a, pod3b}...)
		watched = github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod4a, pod5a, pod6a, pod7a}
		assertSnapshotpods(watched, notWatched)

		err = podClient.Delete(pod4a.GetMetadata().Namespace, pod4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = podClient.Delete(pod5a.GetMetadata().Namespace, pod5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod5a, pod5b}...)
		watched = github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod6a, pod7a}
		assertSnapshotpods(watched, notWatched)

		err = podClient.Delete(pod6a.GetMetadata().Namespace, pod6a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = podClient.Delete(pod7a.GetMetadata().Namespace, pod7a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		notWatched = append(notWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod6a, pod7a}...)
		assertSnapshotpods(nil, notWatched)
	}

	BeforeEach(func() {
		err := os.Setenv(statusutils.PodNamespaceEnvName, "default")
		Expect(err).NotTo(HaveOccurred())

		ctx = context.Background()
		namespace1 = helpers.RandString(8)
		namespace2 = helpers.RandString(8)
		namespace3 = helpers.RandString(8)
		namespace4 = helpers.RandString(8)
		namespace5 = helpers.RandString(8)
		namespace6 = helpers.RandString(8)

		kube = helpers.MustKubeClient()
		kubeCache, err = cache.NewKubeCoreCache(context.TODO(), kube)
		Expect(err).NotTo(HaveOccurred())
		resourceNamespaceLister = namespace.NewKubeClientCacheResourceNamespaceLister(kube, kubeCache)

		createNamespaces(ctx, kube, namespace1, namespace2)

		cfg, err = kubeutils.GetConfig("", "")
		Expect(err).NotTo(HaveOccurred())

		clientset, err = apiext.NewForConfig(cfg)
		Expect(err).NotTo(HaveOccurred())
		// SimpleMockResource Constructor
		simpleMockResourceClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}

		simpleMockResourceClient, err = NewSimpleMockResourceClient(ctx, simpleMockResourceClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// MockResource Constructor
		mockResourceClientFactory := &factory.KubeResourceClientFactory{
			Crd:         MockResourceCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(context.TODO()),
		}

		err = helpers.AddAndRegisterCrd(ctx, MockResourceCrd, clientset)
		Expect(err).NotTo(HaveOccurred())

		mockResourceClient, err = NewMockResourceClient(ctx, mockResourceClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// FakeResource Constructor
		fakeResourceClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}

		fakeResourceClient, err = NewFakeResourceClient(ctx, fakeResourceClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// AnotherMockResource Constructor
		anotherMockResourceClientFactory := &factory.KubeResourceClientFactory{
			Crd:         AnotherMockResourceCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(context.TODO()),
		}

		err = helpers.AddAndRegisterCrd(ctx, AnotherMockResourceCrd, clientset)
		Expect(err).NotTo(HaveOccurred())

		anotherMockResourceClient, err = NewAnotherMockResourceClient(ctx, anotherMockResourceClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// ClusterResource Constructor
		clusterResourceClientFactory := &factory.KubeResourceClientFactory{
			Crd:         ClusterResourceCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(context.TODO()),
		}

		err = helpers.AddAndRegisterCrd(ctx, ClusterResourceCrd, clientset)
		Expect(err).NotTo(HaveOccurred())

		clusterResourceClient, err = NewClusterResourceClient(ctx, clusterResourceClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// MockCustomType Constructor
		mockCustomTypeClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}

		mockCustomTypeClient, err = NewMockCustomTypeClient(ctx, mockCustomTypeClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// Pod Constructor
		podClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}

		podClient, err = github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodClient(ctx, podClientFactory)
		Expect(err).NotTo(HaveOccurred())
		emitter = NewTestingEmitter(simpleMockResourceClient, mockResourceClient, fakeResourceClient, anotherMockResourceClient, clusterResourceClient, mockCustomTypeClient, podClient, resourceNamespaceLister)
	})
	AfterEach(func() {
		err := os.Unsetenv(statusutils.PodNamespaceEnvName)
		Expect(err).NotTo(HaveOccurred())

		deleteNonDefaultKubeNamespaces(ctx, kube)
		clusterResourceClient.Delete(name1, clients.DeleteOpts{})
		clusterResourceClient.Delete(name2, clients.DeleteOpts{})
	})

	Context("Tracking watched namespaces", func() {
		It("tracks snapshots on changes to any resource", func() {
			ctx := context.Background()
			err := emitter.Register()
			Expect(err).NotTo(HaveOccurred())

			snapshots, errs, err := emitter.Snapshots([]string{namespace1, namespace2}, clients.WatchOpts{
				Ctx:         ctx,
				RefreshRate: time.Second,
			})
			Expect(err).NotTo(HaveOccurred())

			var snap *TestingSnapshot

			/*
				SimpleMockResource
			*/

			assertSnapshotSimplemocks := func(expectSimplemocks SimpleMockResourceList, unexpectSimplemocks SimpleMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectSimplemocks {
							if _, err := snap.Simplemocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectSimplemocks {
							if _, err := snap.Simplemocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := simpleMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := simpleMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			simpleMockResource1a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource1b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotSimplemocks(SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}, nil)
			simpleMockResource2a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource2b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotSimplemocks(SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b, simpleMockResource2a, simpleMockResource2b}, nil)

			err = simpleMockResourceClient.Delete(simpleMockResource2a.GetMetadata().Namespace, simpleMockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = simpleMockResourceClient.Delete(simpleMockResource2b.GetMetadata().Namespace, simpleMockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotSimplemocks(SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}, SimpleMockResourceList{simpleMockResource2a, simpleMockResource2b})

			err = simpleMockResourceClient.Delete(simpleMockResource1a.GetMetadata().Namespace, simpleMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = simpleMockResourceClient.Delete(simpleMockResource1b.GetMetadata().Namespace, simpleMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotSimplemocks(nil, SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b, simpleMockResource2a, simpleMockResource2b})

			/*
				MockResource
			*/

			assertSnapshotMocks := func(expectMocks MockResourceList, unexpectMocks MockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectMocks {
							if _, err := snap.Mocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectMocks {
							if _, err := snap.Mocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			mockResource1a, err := mockResourceClient.Write(NewMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource1b, err := mockResourceClient.Write(NewMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotMocks(MockResourceList{mockResource1a, mockResource1b}, nil)
			mockResource2a, err := mockResourceClient.Write(NewMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource2b, err := mockResourceClient.Write(NewMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotMocks(MockResourceList{mockResource1a, mockResource1b, mockResource2a, mockResource2b}, nil)

			err = mockResourceClient.Delete(mockResource2a.GetMetadata().Namespace, mockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockResourceClient.Delete(mockResource2b.GetMetadata().Namespace, mockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotMocks(MockResourceList{mockResource1a, mockResource1b}, MockResourceList{mockResource2a, mockResource2b})

			err = mockResourceClient.Delete(mockResource1a.GetMetadata().Namespace, mockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockResourceClient.Delete(mockResource1b.GetMetadata().Namespace, mockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotMocks(nil, MockResourceList{mockResource1a, mockResource1b, mockResource2a, mockResource2b})

			/*
				FakeResource
			*/

			assertSnapshotFakes := func(expectFakes FakeResourceList, unexpectFakes FakeResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectFakes {
							if _, err := snap.Fakes.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectFakes {
							if _, err := snap.Fakes.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := fakeResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := fakeResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			fakeResource1a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource1b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotFakes(FakeResourceList{fakeResource1a, fakeResource1b}, nil)
			fakeResource2a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource2b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotFakes(FakeResourceList{fakeResource1a, fakeResource1b, fakeResource2a, fakeResource2b}, nil)

			err = fakeResourceClient.Delete(fakeResource2a.GetMetadata().Namespace, fakeResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = fakeResourceClient.Delete(fakeResource2b.GetMetadata().Namespace, fakeResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotFakes(FakeResourceList{fakeResource1a, fakeResource1b}, FakeResourceList{fakeResource2a, fakeResource2b})

			err = fakeResourceClient.Delete(fakeResource1a.GetMetadata().Namespace, fakeResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = fakeResourceClient.Delete(fakeResource1b.GetMetadata().Namespace, fakeResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotFakes(nil, FakeResourceList{fakeResource1a, fakeResource1b, fakeResource2a, fakeResource2b})

			/*
				AnotherMockResource
			*/

			assertSnapshotAnothermockresources := func(expectAnothermockresources AnotherMockResourceList, unexpectAnothermockresources AnotherMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := anotherMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := anotherMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			anotherMockResource1a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource1b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}, nil)
			anotherMockResource2a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource2b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b, anotherMockResource2a, anotherMockResource2b}, nil)

			err = anotherMockResourceClient.Delete(anotherMockResource2a.GetMetadata().Namespace, anotherMockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = anotherMockResourceClient.Delete(anotherMockResource2b.GetMetadata().Namespace, anotherMockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}, AnotherMockResourceList{anotherMockResource2a, anotherMockResource2b})

			err = anotherMockResourceClient.Delete(anotherMockResource1a.GetMetadata().Namespace, anotherMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = anotherMockResourceClient.Delete(anotherMockResource1b.GetMetadata().Namespace, anotherMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotAnothermockresources(nil, AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b, anotherMockResource2a, anotherMockResource2b})

			/*
				ClusterResource
			*/

			assertSnapshotClusterresources := func(expectClusterresources ClusterResourceList, unexpectClusterresources ClusterResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectClusterresources {
							if _, err := snap.Clusterresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectClusterresources {
							if _, err := snap.Clusterresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						combined, _ := clusterResourceClient.List(clients.ListOpts{})
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			clusterResource1a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotClusterresources(ClusterResourceList{clusterResource1a}, nil)
			clusterResource2a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotClusterresources(ClusterResourceList{clusterResource1a, clusterResource2a}, nil)

			err = clusterResourceClient.Delete(clusterResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotClusterresources(ClusterResourceList{clusterResource1a}, ClusterResourceList{clusterResource2a})

			err = clusterResourceClient.Delete(clusterResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotClusterresources(nil, ClusterResourceList{clusterResource1a, clusterResource2a})

			/*
				MockCustomType
			*/

			assertSnapshotmcts := func(expectmcts MockCustomTypeList, unexpectmcts MockCustomTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectmcts {
							if _, err := snap.Mcts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcts {
							if _, err := snap.Mcts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockCustomTypeClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockCustomTypeClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			mockCustomType1a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType1b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcts(MockCustomTypeList{mockCustomType1a, mockCustomType1b}, nil)
			mockCustomType2a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType2b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcts(MockCustomTypeList{mockCustomType1a, mockCustomType1b, mockCustomType2a, mockCustomType2b}, nil)

			err = mockCustomTypeClient.Delete(mockCustomType2a.GetMetadata().Namespace, mockCustomType2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomTypeClient.Delete(mockCustomType2b.GetMetadata().Namespace, mockCustomType2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcts(MockCustomTypeList{mockCustomType1a, mockCustomType1b}, MockCustomTypeList{mockCustomType2a, mockCustomType2b})

			err = mockCustomTypeClient.Delete(mockCustomType1a.GetMetadata().Namespace, mockCustomType1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomTypeClient.Delete(mockCustomType1b.GetMetadata().Namespace, mockCustomType1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcts(nil, MockCustomTypeList{mockCustomType1a, mockCustomType1b, mockCustomType2a, mockCustomType2b})

			/*
				Pod
			*/

			assertSnapshotpods := func(expectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList, unexpectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectpods {
							if _, err := snap.Pods.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectpods {
							if _, err := snap.Pods.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := podClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := podClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			pod1a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod1b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotpods(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}, nil)
			pod2a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod2b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotpods(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b, pod2a, pod2b}, nil)

			err = podClient.Delete(pod2a.GetMetadata().Namespace, pod2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = podClient.Delete(pod2b.GetMetadata().Namespace, pod2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotpods(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2a, pod2b})

			err = podClient.Delete(pod1a.GetMetadata().Namespace, pod1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = podClient.Delete(pod1b.GetMetadata().Namespace, pod1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotpods(nil, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b, pod2a, pod2b})
		})

		It("should be able to track all resources that are on labeled namespaces", func() {
			runNamespacedSelectorsWithWatchNamespaces()
		})
	})

	Context("Tracking empty watched namespaces", func() {
		It("tracks snapshots on changes to any resource using AllNamespace", func() {
			ctx := context.Background()
			err := emitter.Register()
			Expect(err).NotTo(HaveOccurred())

			snapshots, errs, err := emitter.Snapshots([]string{""}, clients.WatchOpts{
				Ctx:         ctx,
				RefreshRate: time.Second,
			})
			Expect(err).NotTo(HaveOccurred())

			var snap *TestingSnapshot

			/*
				SimpleMockResource
			*/

			assertSnapshotSimplemocks := func(expectSimplemocks SimpleMockResourceList, unexpectSimplemocks SimpleMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectSimplemocks {
							if _, err := snap.Simplemocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectSimplemocks {
							if _, err := snap.Simplemocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := simpleMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := simpleMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			simpleMockResource1a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource1b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotSimplemocks(SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}, nil)
			simpleMockResource2a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource2b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotSimplemocks(SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b, simpleMockResource2a, simpleMockResource2b}, nil)

			err = simpleMockResourceClient.Delete(simpleMockResource2a.GetMetadata().Namespace, simpleMockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = simpleMockResourceClient.Delete(simpleMockResource2b.GetMetadata().Namespace, simpleMockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotSimplemocks(SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}, SimpleMockResourceList{simpleMockResource2a, simpleMockResource2b})

			err = simpleMockResourceClient.Delete(simpleMockResource1a.GetMetadata().Namespace, simpleMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = simpleMockResourceClient.Delete(simpleMockResource1b.GetMetadata().Namespace, simpleMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotSimplemocks(nil, SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b, simpleMockResource2a, simpleMockResource2b})

			/*
				MockResource
			*/

			assertSnapshotMocks := func(expectMocks MockResourceList, unexpectMocks MockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectMocks {
							if _, err := snap.Mocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectMocks {
							if _, err := snap.Mocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			mockResource1a, err := mockResourceClient.Write(NewMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource1b, err := mockResourceClient.Write(NewMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotMocks(MockResourceList{mockResource1a, mockResource1b}, nil)
			mockResource2a, err := mockResourceClient.Write(NewMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource2b, err := mockResourceClient.Write(NewMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotMocks(MockResourceList{mockResource1a, mockResource1b, mockResource2a, mockResource2b}, nil)

			err = mockResourceClient.Delete(mockResource2a.GetMetadata().Namespace, mockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockResourceClient.Delete(mockResource2b.GetMetadata().Namespace, mockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotMocks(MockResourceList{mockResource1a, mockResource1b}, MockResourceList{mockResource2a, mockResource2b})

			err = mockResourceClient.Delete(mockResource1a.GetMetadata().Namespace, mockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockResourceClient.Delete(mockResource1b.GetMetadata().Namespace, mockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotMocks(nil, MockResourceList{mockResource1a, mockResource1b, mockResource2a, mockResource2b})

			/*
				FakeResource
			*/

			assertSnapshotFakes := func(expectFakes FakeResourceList, unexpectFakes FakeResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectFakes {
							if _, err := snap.Fakes.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectFakes {
							if _, err := snap.Fakes.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := fakeResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := fakeResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			fakeResource1a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource1b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotFakes(FakeResourceList{fakeResource1a, fakeResource1b}, nil)
			fakeResource2a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource2b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotFakes(FakeResourceList{fakeResource1a, fakeResource1b, fakeResource2a, fakeResource2b}, nil)

			err = fakeResourceClient.Delete(fakeResource2a.GetMetadata().Namespace, fakeResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = fakeResourceClient.Delete(fakeResource2b.GetMetadata().Namespace, fakeResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotFakes(FakeResourceList{fakeResource1a, fakeResource1b}, FakeResourceList{fakeResource2a, fakeResource2b})

			err = fakeResourceClient.Delete(fakeResource1a.GetMetadata().Namespace, fakeResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = fakeResourceClient.Delete(fakeResource1b.GetMetadata().Namespace, fakeResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotFakes(nil, FakeResourceList{fakeResource1a, fakeResource1b, fakeResource2a, fakeResource2b})

			/*
				AnotherMockResource
			*/

			assertSnapshotAnothermockresources := func(expectAnothermockresources AnotherMockResourceList, unexpectAnothermockresources AnotherMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := anotherMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := anotherMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			anotherMockResource1a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource1b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}, nil)
			anotherMockResource2a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource2b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b, anotherMockResource2a, anotherMockResource2b}, nil)

			err = anotherMockResourceClient.Delete(anotherMockResource2a.GetMetadata().Namespace, anotherMockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = anotherMockResourceClient.Delete(anotherMockResource2b.GetMetadata().Namespace, anotherMockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}, AnotherMockResourceList{anotherMockResource2a, anotherMockResource2b})

			err = anotherMockResourceClient.Delete(anotherMockResource1a.GetMetadata().Namespace, anotherMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = anotherMockResourceClient.Delete(anotherMockResource1b.GetMetadata().Namespace, anotherMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotAnothermockresources(nil, AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b, anotherMockResource2a, anotherMockResource2b})

			/*
				ClusterResource
			*/

			assertSnapshotClusterresources := func(expectClusterresources ClusterResourceList, unexpectClusterresources ClusterResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectClusterresources {
							if _, err := snap.Clusterresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectClusterresources {
							if _, err := snap.Clusterresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						combined, _ := clusterResourceClient.List(clients.ListOpts{})
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			clusterResource1a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotClusterresources(ClusterResourceList{clusterResource1a}, nil)
			clusterResource2a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotClusterresources(ClusterResourceList{clusterResource1a, clusterResource2a}, nil)

			err = clusterResourceClient.Delete(clusterResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotClusterresources(ClusterResourceList{clusterResource1a}, ClusterResourceList{clusterResource2a})

			err = clusterResourceClient.Delete(clusterResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotClusterresources(nil, ClusterResourceList{clusterResource1a, clusterResource2a})

			/*
				MockCustomType
			*/

			assertSnapshotmcts := func(expectmcts MockCustomTypeList, unexpectmcts MockCustomTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectmcts {
							if _, err := snap.Mcts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcts {
							if _, err := snap.Mcts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockCustomTypeClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockCustomTypeClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			mockCustomType1a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType1b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcts(MockCustomTypeList{mockCustomType1a, mockCustomType1b}, nil)
			mockCustomType2a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType2b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcts(MockCustomTypeList{mockCustomType1a, mockCustomType1b, mockCustomType2a, mockCustomType2b}, nil)

			err = mockCustomTypeClient.Delete(mockCustomType2a.GetMetadata().Namespace, mockCustomType2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomTypeClient.Delete(mockCustomType2b.GetMetadata().Namespace, mockCustomType2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcts(MockCustomTypeList{mockCustomType1a, mockCustomType1b}, MockCustomTypeList{mockCustomType2a, mockCustomType2b})

			err = mockCustomTypeClient.Delete(mockCustomType1a.GetMetadata().Namespace, mockCustomType1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomTypeClient.Delete(mockCustomType1b.GetMetadata().Namespace, mockCustomType1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcts(nil, MockCustomTypeList{mockCustomType1a, mockCustomType1b, mockCustomType2a, mockCustomType2b})

			/*
				Pod
			*/

			assertSnapshotpods := func(expectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList, unexpectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectpods {
							if _, err := snap.Pods.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectpods {
							if _, err := snap.Pods.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := podClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := podClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			pod1a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod1b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotpods(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}, nil)
			pod2a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod2b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotpods(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b, pod2a, pod2b}, nil)

			err = podClient.Delete(pod2a.GetMetadata().Namespace, pod2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = podClient.Delete(pod2b.GetMetadata().Namespace, pod2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotpods(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2a, pod2b})

			err = podClient.Delete(pod1a.GetMetadata().Namespace, pod1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = podClient.Delete(pod1b.GetMetadata().Namespace, pod1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotpods(nil, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b, pod2a, pod2b})
		})

		It("should be able to track resources only made with the matching labels", func() {
			ctx := context.Background()
			err := emitter.Register()
			Expect(err).NotTo(HaveOccurred())

			snapshots, errs, err := emitter.Snapshots([]string{""}, clients.WatchOpts{
				Ctx:                ctx,
				RefreshRate:        time.Second,
				ExpressionSelector: labelExpression1,
			})
			Expect(err).NotTo(HaveOccurred())

			var snap *TestingSnapshot

			assertNoMessageSent := func() {
				for {
					select {
					case snap = <-snapshots:
						Fail("expected that no snapshots wouldbe recieved " + log.Sprintf("%v", snap))
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 5):
						// this means that we have not recieved any mocks that we are not expecting
						return
					}
				}
			}

			assertNoMocksSent := func() {
			drain:
				for {
					select {
					case snap = <-snapshots:
						if len(snap.Mocks) == 0 {
							continue drain
						}
						Fail("expected that no snapshots containing resources would be recieved " + log.Sprintf("%v", snap))
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 5):
						// this means that we have not recieved any mocks that we are not expecting
						return
					}
				}
			}

			/*
				SimpleMockResource
			*/
			assertSnapshotSimplemocks := func(expectSimplemocks SimpleMockResourceList, unexpectSimplemocks SimpleMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectSimplemocks {
							if _, err := snap.Simplemocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectSimplemocks {
							if _, err := snap.Simplemocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := simpleMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := simpleMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			simpleMockResource1a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource1b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched := SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}
			assertNoMocksSent()

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			simpleMockResource2a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource2b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := SimpleMockResourceList{simpleMockResource2a, simpleMockResource2b}
			assertSnapshotMocks(watched, notWatched)

			simpleMockResource3a, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace1, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource3b, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace2, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, SimpleMockResourceList{simpleMockResource3a, simpleMockResource3b}...)
			assertNoMocksSent()

			simpleMockResource4a, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource4b, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, SimpleMockResourceList{simpleMockResource4a, simpleMockResource4b}...)
			assertSnapshotMocks(watched, notWatched)

			createNamespaces(ctx, kube, namespace5, namespace6)

			simpleMockResource5a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace5, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource5b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace6, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, SimpleMockResourceList{simpleMockResource5a, simpleMockResource5b}...)
			assertNoMessageSent()

			simpleMockResource6a, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace5, name3, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource6b, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace6, name3, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, SimpleMockResourceList{simpleMockResource6a, simpleMockResource6b}...)
			assertNoMessageSent()

			simpleMockResource7a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace5, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource7b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace6, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, SimpleMockResourceList{simpleMockResource7a, simpleMockResource7b}...)
			assertNoMessageSent()

			for _, r := range notWatched {
				err = mockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}
			assertNoMessageSent()

			err = simpleMockResourceClient.Delete(simpleMockResource2a.GetMetadata().Namespace, simpleMockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = simpleMockResourceClient.Delete(simpleMockResource2b.GetMetadata().Namespace, simpleMockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, SimpleMockResourceList{simpleMockResource2a, simpleMockResource2b}...)
			watched = SimpleMockResourceList{simpleMockResource4a, simpleMockResource4b}
			assertSnapshotSimplemocks(watched, notWatched)

			err = simpleMockResourceClient.Delete(simpleMockResource4a.GetMetadata().Namespace, simpleMockResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = simpleMockResourceClient.Delete(simpleMockResource4b.GetMetadata().Namespace, simpleMockResource4b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, SimpleMockResourceList{simpleMockResource4a, simpleMockResource4b}...)
			assertSnapshotSimplemocks(nil, notWatched)

			/*
				MockResource
			*/
			assertSnapshotMocks := func(expectMocks MockResourceList, unexpectMocks MockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectMocks {
							if _, err := snap.Mocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectMocks {
							if _, err := snap.Mocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			mockResource1a, err := mockResourceClient.Write(NewMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource1b, err := mockResourceClient.Write(NewMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched := MockResourceList{mockResource1a, mockResource1b}
			assertNoMocksSent()

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			mockResource2a, err := mockResourceClient.Write(NewMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource2b, err := mockResourceClient.Write(NewMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := MockResourceList{mockResource2a, mockResource2b}
			assertSnapshotMocks(watched, notWatched)

			mockResource3a, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace1, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource3b, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace2, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, MockResourceList{mockResource3a, mockResource3b}...)
			assertNoMocksSent()

			mockResource4a, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource4b, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, MockResourceList{mockResource4a, mockResource4b}...)
			assertSnapshotMocks(watched, notWatched)

			createNamespaces(ctx, kube, namespace5, namespace6)

			mockResource5a, err := mockResourceClient.Write(NewMockResource(namespace5, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource5b, err := mockResourceClient.Write(NewMockResource(namespace6, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, MockResourceList{mockResource5a, mockResource5b}...)
			assertNoMessageSent()

			mockResource6a, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace5, name3, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource6b, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace6, name3, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, MockResourceList{mockResource6a, mockResource6b}...)
			assertNoMessageSent()

			mockResource7a, err := mockResourceClient.Write(NewMockResource(namespace5, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource7b, err := mockResourceClient.Write(NewMockResource(namespace6, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, MockResourceList{mockResource7a, mockResource7b}...)
			assertNoMessageSent()

			for _, r := range notWatched {
				err = mockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}
			assertNoMessageSent()

			err = mockResourceClient.Delete(mockResource2a.GetMetadata().Namespace, mockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockResourceClient.Delete(mockResource2b.GetMetadata().Namespace, mockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, MockResourceList{mockResource2a, mockResource2b}...)
			watched = MockResourceList{mockResource4a, mockResource4b}
			assertSnapshotMocks(watched, notWatched)

			err = mockResourceClient.Delete(mockResource4a.GetMetadata().Namespace, mockResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockResourceClient.Delete(mockResource4b.GetMetadata().Namespace, mockResource4b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, MockResourceList{mockResource4a, mockResource4b}...)
			assertSnapshotMocks(nil, notWatched)

			/*
				FakeResource
			*/
			assertSnapshotFakes := func(expectFakes FakeResourceList, unexpectFakes FakeResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectFakes {
							if _, err := snap.Fakes.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectFakes {
							if _, err := snap.Fakes.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := fakeResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := fakeResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			fakeResource1a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource1b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched := FakeResourceList{fakeResource1a, fakeResource1b}
			assertNoMocksSent()

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			fakeResource2a, err := fakeResourceClient.Write(NewFakeResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource2b, err := fakeResourceClient.Write(NewFakeResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := FakeResourceList{fakeResource2a, fakeResource2b}
			assertSnapshotMocks(watched, notWatched)

			fakeResource3a, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace1, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource3b, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace2, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, FakeResourceList{fakeResource3a, fakeResource3b}...)
			assertNoMocksSent()

			fakeResource4a, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource4b, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, FakeResourceList{fakeResource4a, fakeResource4b}...)
			assertSnapshotMocks(watched, notWatched)

			createNamespaces(ctx, kube, namespace5, namespace6)

			fakeResource5a, err := fakeResourceClient.Write(NewFakeResource(namespace5, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource5b, err := fakeResourceClient.Write(NewFakeResource(namespace6, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, FakeResourceList{fakeResource5a, fakeResource5b}...)
			assertNoMessageSent()

			fakeResource6a, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace5, name3, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource6b, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace6, name3, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, FakeResourceList{fakeResource6a, fakeResource6b}...)
			assertNoMessageSent()

			fakeResource7a, err := fakeResourceClient.Write(NewFakeResource(namespace5, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource7b, err := fakeResourceClient.Write(NewFakeResource(namespace6, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, FakeResourceList{fakeResource7a, fakeResource7b}...)
			assertNoMessageSent()

			for _, r := range notWatched {
				err = mockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}
			assertNoMessageSent()

			err = fakeResourceClient.Delete(fakeResource2a.GetMetadata().Namespace, fakeResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = fakeResourceClient.Delete(fakeResource2b.GetMetadata().Namespace, fakeResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, FakeResourceList{fakeResource2a, fakeResource2b}...)
			watched = FakeResourceList{fakeResource4a, fakeResource4b}
			assertSnapshotFakes(watched, notWatched)

			err = fakeResourceClient.Delete(fakeResource4a.GetMetadata().Namespace, fakeResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = fakeResourceClient.Delete(fakeResource4b.GetMetadata().Namespace, fakeResource4b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, FakeResourceList{fakeResource4a, fakeResource4b}...)
			assertSnapshotFakes(nil, notWatched)

			/*
				AnotherMockResource
			*/
			assertSnapshotAnothermockresources := func(expectAnothermockresources AnotherMockResourceList, unexpectAnothermockresources AnotherMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := anotherMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := anotherMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			anotherMockResource1a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource1b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched := AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}
			assertNoMocksSent()

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			anotherMockResource2a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource2b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := AnotherMockResourceList{anotherMockResource2a, anotherMockResource2b}
			assertSnapshotMocks(watched, notWatched)

			anotherMockResource3a, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace1, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource3b, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace2, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, AnotherMockResourceList{anotherMockResource3a, anotherMockResource3b}...)
			assertNoMocksSent()

			anotherMockResource4a, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource4b, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, AnotherMockResourceList{anotherMockResource4a, anotherMockResource4b}...)
			assertSnapshotMocks(watched, notWatched)

			createNamespaces(ctx, kube, namespace5, namespace6)

			anotherMockResource5a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace5, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource5b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace6, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, AnotherMockResourceList{anotherMockResource5a, anotherMockResource5b}...)
			assertNoMessageSent()

			anotherMockResource6a, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace5, name3, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource6b, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace6, name3, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, AnotherMockResourceList{anotherMockResource6a, anotherMockResource6b}...)
			assertNoMessageSent()

			anotherMockResource7a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace5, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource7b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace6, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, AnotherMockResourceList{anotherMockResource7a, anotherMockResource7b}...)
			assertNoMessageSent()

			for _, r := range notWatched {
				err = mockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}
			assertNoMessageSent()

			err = anotherMockResourceClient.Delete(anotherMockResource2a.GetMetadata().Namespace, anotherMockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = anotherMockResourceClient.Delete(anotherMockResource2b.GetMetadata().Namespace, anotherMockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, AnotherMockResourceList{anotherMockResource2a, anotherMockResource2b}...)
			watched = AnotherMockResourceList{anotherMockResource4a, anotherMockResource4b}
			assertSnapshotAnothermockresources(watched, notWatched)

			err = anotherMockResourceClient.Delete(anotherMockResource4a.GetMetadata().Namespace, anotherMockResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = anotherMockResourceClient.Delete(anotherMockResource4b.GetMetadata().Namespace, anotherMockResource4b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, AnotherMockResourceList{anotherMockResource4a, anotherMockResource4b}...)
			assertSnapshotAnothermockresources(nil, notWatched)

			/*
				ClusterResource
			*/
			assertSnapshotClusterresources := func(expectClusterresources ClusterResourceList, unexpectClusterresources ClusterResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectClusterresources {
							if _, err := snap.Clusterresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectClusterresources {
							if _, err := snap.Clusterresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						combined, _ := clusterResourceClient.List(clients.ListOpts{})
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			clusterResource1a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := ClusterResourceList{clusterResource1a}
			assertSnapshotMocks(watched, nil)

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			clusterResource2a, err := clusterResourceClient.Write(NewClusterResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, clusterResource2a)
			assertSnapshotMocks(watched, nil)

			clusterResource3a, err := clusterResourceClient.Write(NewClusterResourceWithLabels(namespace1, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := ClusterResourceList{clusterResource3a}
			assertSnapshotMocks(watched, nil)

			clusterResource4a, err := clusterResourceClient.Write(NewClusterResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, clusterResource4a)
			assertSnapshotMocks(watched, nil)

			createNamespaces(ctx, kube, namespace5, namespace6)

			clusterResource5a, err := clusterResourceClient.Write(NewClusterResource(namespace5, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, clusterResource5a)
			assertSnapshotMocks(watched, nil)

			clusterResource6a, err := clusterResourceClient.Write(NewClusterResourceWithLabels(namespace5, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, clusterResource6a)
			assertSnapshotMocks(watched, nil)

			clusterResource7a, err := clusterResourceClient.Write(NewClusterResource(namespace5, name3), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, clusterResource7a)
			assertSnapshotMocks(watched, nil)

			err = clusterResourceClient.Delete(clusterResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = ClusterResourceList{clusterResource2a, clusterResource3a, clusterResource4a, clusterResource5a, clusterResource6a, clusterResource7a}
			notWatched = ClusterResourceList{clusterResource1a}
			assertSnapshotClusterresources(watched, notWatched)
			err = clusterResourceClient.Delete(clusterResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = ClusterResourceList{clusterResource3a, clusterResource4a, clusterResource5a, clusterResource6a, clusterResource7a}
			notWatched = append(notWatched, clusterResource2a)
			assertSnapshotClusterresources(watched, notWatched)

			err = clusterResourceClient.Delete(clusterResource3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = ClusterResourceList{clusterResource4a, clusterResource5a, clusterResource6a, clusterResource7a}
			notWatched = append(notWatched, clusterResource3a)
			assertSnapshotClusterresources(watched, notWatched)

			err = clusterResourceClient.Delete(clusterResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = ClusterResourceList{clusterResource5a, clusterResource6a, clusterResource7a}
			notWatched = ClusterResourceList{clusterResource4a}
			assertSnapshotClusterresources(watched, notWatched)

			err = clusterResourceClient.Delete(clusterResource5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = ClusterResourceList{clusterResource6a, clusterResource7a}
			notWatched = ClusterResourceList{clusterResource5a}
			assertSnapshotClusterresources(watched, notWatched)

			err = clusterResourceClient.Delete(clusterResource6a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = ClusterResourceList{clusterResource7a}
			notWatched = ClusterResourceList{clusterResource6a}
			assertSnapshotClusterresources(watched, notWatched)

			err = clusterResourceClient.Delete(clusterResource7a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = ClusterResourceList{clusterResource7a}
			assertSnapshotClusterresources(nil, notWatched)

			/*
				MockCustomType
			*/
			assertSnapshotmcts := func(expectmcts MockCustomTypeList, unexpectmcts MockCustomTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectmcts {
							if _, err := snap.Mcts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcts {
							if _, err := snap.Mcts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockCustomTypeClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockCustomTypeClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			mockCustomType1a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType1b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched := MockCustomTypeList{mockCustomType1a, mockCustomType1b}
			assertNoMocksSent()

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			mockCustomType2a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType2b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := MockCustomTypeList{mockCustomType2a, mockCustomType2b}
			assertSnapshotMocks(watched, notWatched)

			mockCustomType3a, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace1, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType3b, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace2, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, MockCustomTypeList{mockCustomType3a, mockCustomType3b}...)
			assertNoMocksSent()

			mockCustomType4a, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType4b, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, MockCustomTypeList{mockCustomType4a, mockCustomType4b}...)
			assertSnapshotMocks(watched, notWatched)

			createNamespaces(ctx, kube, namespace5, namespace6)

			mockCustomType5a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace5, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType5b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace6, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, MockCustomTypeList{mockCustomType5a, mockCustomType5b}...)
			assertNoMessageSent()

			mockCustomType6a, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace5, name3, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType6b, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace6, name3, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, MockCustomTypeList{mockCustomType6a, mockCustomType6b}...)
			assertNoMessageSent()

			mockCustomType7a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace5, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType7b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace6, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, MockCustomTypeList{mockCustomType7a, mockCustomType7b}...)
			assertNoMessageSent()

			for _, r := range notWatched {
				err = mockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}
			assertNoMessageSent()

			err = mockCustomTypeClient.Delete(mockCustomType2a.GetMetadata().Namespace, mockCustomType2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomTypeClient.Delete(mockCustomType2b.GetMetadata().Namespace, mockCustomType2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, MockCustomTypeList{mockCustomType2a, mockCustomType2b}...)
			watched = MockCustomTypeList{mockCustomType4a, mockCustomType4b}
			assertSnapshotmcts(watched, notWatched)

			err = mockCustomTypeClient.Delete(mockCustomType4a.GetMetadata().Namespace, mockCustomType4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomTypeClient.Delete(mockCustomType4b.GetMetadata().Namespace, mockCustomType4b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, MockCustomTypeList{mockCustomType4a, mockCustomType4b}...)
			assertSnapshotmcts(nil, notWatched)

			/*
				Pod
			*/
			assertSnapshotpods := func(expectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList, unexpectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectpods {
							if _, err := snap.Pods.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectpods {
							if _, err := snap.Pods.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := podClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := podClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			pod1a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod1b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}
			assertNoMocksSent()

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			pod2a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod2b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2a, pod2b}
			assertSnapshotMocks(watched, notWatched)

			pod3a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace1, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod3b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace2, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod3a, pod3b}...)
			assertNoMocksSent()

			pod4a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod4b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod4a, pod4b}...)
			assertSnapshotMocks(watched, notWatched)

			createNamespaces(ctx, kube, namespace5, namespace6)

			pod5a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace5, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod5b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace6, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod5a, pod5b}...)
			assertNoMessageSent()

			pod6a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace5, name3, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod6b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodWithLabels(namespace6, name3, labels1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod6a, pod6b}...)
			assertNoMessageSent()

			pod7a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace5, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod7b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace6, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod7a, pod7b}...)
			assertNoMessageSent()

			for _, r := range notWatched {
				err = mockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}
			assertNoMessageSent()

			err = podClient.Delete(pod2a.GetMetadata().Namespace, pod2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = podClient.Delete(pod2b.GetMetadata().Namespace, pod2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2a, pod2b}...)
			watched = github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod4a, pod4b}
			assertSnapshotpods(watched, notWatched)

			err = podClient.Delete(pod4a.GetMetadata().Namespace, pod4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = podClient.Delete(pod4b.GetMetadata().Namespace, pod4b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched = append(notWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod4a, pod4b}...)
			assertSnapshotpods(nil, notWatched)
		})
	})

	Context("Tracking resources on namespaces that are deleted", func() {
		It("Should not contain resources from a deleted namespace", func() {
			ctx := context.Background()
			err := emitter.Register()
			Expect(err).NotTo(HaveOccurred())

			snapshots, errs, err := emitter.Snapshots([]string{""}, clients.WatchOpts{
				Ctx:         ctx,
				RefreshRate: time.Second,
			})
			Expect(err).NotTo(HaveOccurred())

			var snap *TestingSnapshot

			/*
				SimpleMockResource
			*/
			assertSnapshotSimplemocks := func(expectSimplemocks SimpleMockResourceList, unexpectSimplemocks SimpleMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectSimplemocks {
							if _, err := snap.Simplemocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectSimplemocks {
							if _, err := snap.Simplemocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := simpleMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := simpleMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			simpleMockResource1a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource1b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := MockResourceList{simpleMockResource1a, simpleMockResource1b}
			assertSnapshotMocks(watched, nil)

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			notWatched := MockResourceList{simpleMockResource1a, simpleMockResource1b}
			assertSnapshotMocks(nil, notWatched)

			/*
				MockResource
			*/
			assertSnapshotMocks := func(expectMocks MockResourceList, unexpectMocks MockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectMocks {
							if _, err := snap.Mocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectMocks {
							if _, err := snap.Mocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			mockResource1a, err := mockResourceClient.Write(NewMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource1b, err := mockResourceClient.Write(NewMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := MockResourceList{mockResource1a, mockResource1b}
			assertSnapshotMocks(watched, nil)

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			notWatched := MockResourceList{mockResource1a, mockResource1b}
			assertSnapshotMocks(nil, notWatched)

			/*
				FakeResource
			*/
			assertSnapshotFakes := func(expectFakes FakeResourceList, unexpectFakes FakeResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectFakes {
							if _, err := snap.Fakes.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectFakes {
							if _, err := snap.Fakes.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := fakeResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := fakeResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			fakeResource1a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource1b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := MockResourceList{fakeResource1a, fakeResource1b}
			assertSnapshotMocks(watched, nil)

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			notWatched := MockResourceList{fakeResource1a, fakeResource1b}
			assertSnapshotMocks(nil, notWatched)

			/*
				AnotherMockResource
			*/
			assertSnapshotAnothermockresources := func(expectAnothermockresources AnotherMockResourceList, unexpectAnothermockresources AnotherMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := anotherMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := anotherMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			anotherMockResource1a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource1b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := MockResourceList{anotherMockResource1a, anotherMockResource1b}
			assertSnapshotMocks(watched, nil)

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			notWatched := MockResourceList{anotherMockResource1a, anotherMockResource1b}
			assertSnapshotMocks(nil, notWatched)

			/*
				ClusterResource
			*/
			assertSnapshotClusterresources := func(expectClusterresources ClusterResourceList, unexpectClusterresources ClusterResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectClusterresources {
							if _, err := snap.Clusterresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectClusterresources {
							if _, err := snap.Clusterresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						combined, _ := clusterResourceClient.List(clients.ListOpts{})
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			clusterResource1a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			clusterResource1b, err := clusterResourceClient.Write(NewClusterResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := MockResourceList{clusterResource1a, clusterResource1b}
			assertSnapshotMocks(watched, nil)

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			notWatched := MockResourceList{clusterResource1a, clusterResource1b}
			assertSnapshotMocks(nil, notWatched)

			/*
				MockCustomType
			*/
			assertSnapshotmcts := func(expectmcts MockCustomTypeList, unexpectmcts MockCustomTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectmcts {
							if _, err := snap.Mcts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcts {
							if _, err := snap.Mcts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockCustomTypeClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockCustomTypeClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			mockCustomType1a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType1b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := MockResourceList{mockCustomType1a, mockCustomType1b}
			assertSnapshotMocks(watched, nil)

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			notWatched := MockResourceList{mockCustomType1a, mockCustomType1b}
			assertSnapshotMocks(nil, notWatched)

			/*
				Pod
			*/
			assertSnapshotpods := func(expectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList, unexpectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectpods {
							if _, err := snap.Pods.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectpods {
							if _, err := snap.Pods.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := podClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := podClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			pod1a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod1b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := MockResourceList{pod1a, pod1b}
			assertSnapshotMocks(watched, nil)

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			notWatched := MockResourceList{pod1a, pod1b}
			assertSnapshotMocks(nil, notWatched)
		})

		It("Should not contain resources from a deleted namespace, that is filtered", func() {
			ctx := context.Background()
			err := emitter.Register()
			Expect(err).NotTo(HaveOccurred())

			snapshots, errs, err := emitter.Snapshots([]string{""}, clients.WatchOpts{
				Ctx:                ctx,
				RefreshRate:        time.Second,
				ExpressionSelector: labelExpression1,
			})
			Expect(err).NotTo(HaveOccurred())

			var snap *TestingSnapshot

			assertNoMocksSent := func() {
			drain:
				for {
					select {
					case snap = <-snapshots:
						if len(snap.Mocks) == 0 {
							continue drain
						}
						Fail("expected that no snapshots containing resources would be recieved " + log.Sprintf("%v", snap))
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 5):
						// this means that we have not recieved any mocks that we are not expecting
						return
					}
				}
			}

			/*
				SimpleMockResource
			*/

			assertSnapshotSimplemocks := func(expectSimplemocks SimpleMockResourceList, unexpectSimplemocks SimpleMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectSimplemocks {
							if _, err := snap.Simplemocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectSimplemocks {
							if _, err := snap.Simplemocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := simpleMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := simpleMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			simpleMockResource1a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource1b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched := SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}
			assertNoMocksSent()

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			assertNoMocksSent()

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			simpleMockResource2a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource2b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := SimpleMockResourceList{simpleMockResource2a, simpleMockResource2b}
			assertSnapshotMocks(watched, notWatched)

			deleteNamespaces(ctx, kube, namespace3)
			notWatched = append(notWatched, simpleMockResource2a)
			watched = SimpleMockResourceList{simpleMockResource2b}
			assertSnapshotMocks(watched, notWatched)

			createNamespaceWithLabel(ctx, kube, namespace5, labels1)

			simpleMockResource3a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace5, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, simpleMockResource3a)
			assertSnapshotMocks(watched, notWatched)

			deleteNamespaces(ctx, kube, namespace4)
			notWatched = append(notWatched, simpleMockResource2b)
			watched = SimpleMockResourceList{simpleMockResource3a}
			assertSnapshotMocks(watched, notWatched)

			for _, r := range watched {
				err = simpleMockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}
			assertNoMocksSent()

			deleteNamespaces(ctx, kube, namespace5)

			createNamespaces(ctx, kube, namespace1, namespace2)

			/*
				MockResource
			*/

			assertSnapshotMocks := func(expectMocks MockResourceList, unexpectMocks MockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectMocks {
							if _, err := snap.Mocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectMocks {
							if _, err := snap.Mocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			mockResource1a, err := mockResourceClient.Write(NewMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource1b, err := mockResourceClient.Write(NewMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched := MockResourceList{mockResource1a, mockResource1b}
			assertNoMocksSent()

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			assertNoMocksSent()

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			mockResource2a, err := mockResourceClient.Write(NewMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource2b, err := mockResourceClient.Write(NewMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := MockResourceList{mockResource2a, mockResource2b}
			assertSnapshotMocks(watched, notWatched)

			deleteNamespaces(ctx, kube, namespace3)
			notWatched = append(notWatched, mockResource2a)
			watched = MockResourceList{mockResource2b}
			assertSnapshotMocks(watched, notWatched)

			createNamespaceWithLabel(ctx, kube, namespace5, labels1)

			mockResource3a, err := mockResourceClient.Write(NewMockResource(namespace5, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, mockResource3a)
			assertSnapshotMocks(watched, notWatched)

			deleteNamespaces(ctx, kube, namespace4)
			notWatched = append(notWatched, mockResource2b)
			watched = MockResourceList{mockResource3a}
			assertSnapshotMocks(watched, notWatched)

			for _, r := range watched {
				err = mockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}
			assertNoMocksSent()

			deleteNamespaces(ctx, kube, namespace5)

			createNamespaces(ctx, kube, namespace1, namespace2)

			/*
				FakeResource
			*/

			assertSnapshotFakes := func(expectFakes FakeResourceList, unexpectFakes FakeResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectFakes {
							if _, err := snap.Fakes.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectFakes {
							if _, err := snap.Fakes.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := fakeResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := fakeResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			fakeResource1a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource1b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched := FakeResourceList{fakeResource1a, fakeResource1b}
			assertNoMocksSent()

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			assertNoMocksSent()

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			fakeResource2a, err := fakeResourceClient.Write(NewFakeResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource2b, err := fakeResourceClient.Write(NewFakeResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := FakeResourceList{fakeResource2a, fakeResource2b}
			assertSnapshotMocks(watched, notWatched)

			deleteNamespaces(ctx, kube, namespace3)
			notWatched = append(notWatched, fakeResource2a)
			watched = FakeResourceList{fakeResource2b}
			assertSnapshotMocks(watched, notWatched)

			createNamespaceWithLabel(ctx, kube, namespace5, labels1)

			fakeResource3a, err := fakeResourceClient.Write(NewFakeResource(namespace5, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, fakeResource3a)
			assertSnapshotMocks(watched, notWatched)

			deleteNamespaces(ctx, kube, namespace4)
			notWatched = append(notWatched, fakeResource2b)
			watched = FakeResourceList{fakeResource3a}
			assertSnapshotMocks(watched, notWatched)

			for _, r := range watched {
				err = fakeResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}
			assertNoMocksSent()

			deleteNamespaces(ctx, kube, namespace5)

			createNamespaces(ctx, kube, namespace1, namespace2)

			/*
				AnotherMockResource
			*/

			assertSnapshotAnothermockresources := func(expectAnothermockresources AnotherMockResourceList, unexpectAnothermockresources AnotherMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := anotherMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := anotherMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			anotherMockResource1a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource1b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched := AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}
			assertNoMocksSent()

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			assertNoMocksSent()

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			anotherMockResource2a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource2b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := AnotherMockResourceList{anotherMockResource2a, anotherMockResource2b}
			assertSnapshotMocks(watched, notWatched)

			deleteNamespaces(ctx, kube, namespace3)
			notWatched = append(notWatched, anotherMockResource2a)
			watched = AnotherMockResourceList{anotherMockResource2b}
			assertSnapshotMocks(watched, notWatched)

			createNamespaceWithLabel(ctx, kube, namespace5, labels1)

			anotherMockResource3a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace5, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, anotherMockResource3a)
			assertSnapshotMocks(watched, notWatched)

			deleteNamespaces(ctx, kube, namespace4)
			notWatched = append(notWatched, anotherMockResource2b)
			watched = AnotherMockResourceList{anotherMockResource3a}
			assertSnapshotMocks(watched, notWatched)

			for _, r := range watched {
				err = anotherMockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}
			assertNoMocksSent()

			deleteNamespaces(ctx, kube, namespace5)

			createNamespaces(ctx, kube, namespace1, namespace2)

			/*
				ClusterResource
			*/

			assertSnapshotClusterresources := func(expectClusterresources ClusterResourceList, unexpectClusterresources ClusterResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectClusterresources {
							if _, err := snap.Clusterresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectClusterresources {
							if _, err := snap.Clusterresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						combined, _ := clusterResourceClient.List(clients.ListOpts{})
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			clusterResource1a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := ClusterResourceList{clusterResource1a}
			assertSnapshotMocks(watched, nil)

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			assertNoMocksSent()

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			clusterResource2a, err := clusterResourceClient.Write(NewClusterResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = ClusterResourceList{clusterResource2a}
			assertSnapshotMocks(watched, nil)

			deleteNamespaces(ctx, kube, namespace3)
			notWatched = append(notWatched, clusterResource2a)
			watched = ClusterResourceList{clusterResource2b}
			assertSnapshotMocks(watched, notWatched)

			createNamespaceWithLabel(ctx, kube, namespace5, labels1)

			clusterResource3a, err := clusterResourceClient.Write(NewClusterResource(namespace5, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = ClusterResourceList{clusterResource3a}
			assertSnapshotMocks(watched, nil)

			deleteNamespaces(ctx, kube, namespace4)
			assertSnapshotMocks(watched, nil)

			deleteNamespaces(ctx, kube, namespace5)

			createNamespaces(ctx, kube, namespace1, namespace2)

			/*
				MockCustomType
			*/

			assertSnapshotmcts := func(expectmcts MockCustomTypeList, unexpectmcts MockCustomTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectmcts {
							if _, err := snap.Mcts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcts {
							if _, err := snap.Mcts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockCustomTypeClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockCustomTypeClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			mockCustomType1a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType1b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched := MockCustomTypeList{mockCustomType1a, mockCustomType1b}
			assertNoMocksSent()

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			assertNoMocksSent()

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			mockCustomType2a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType2b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := MockCustomTypeList{mockCustomType2a, mockCustomType2b}
			assertSnapshotMocks(watched, notWatched)

			deleteNamespaces(ctx, kube, namespace3)
			notWatched = append(notWatched, mockCustomType2a)
			watched = MockCustomTypeList{mockCustomType2b}
			assertSnapshotMocks(watched, notWatched)

			createNamespaceWithLabel(ctx, kube, namespace5, labels1)

			mockCustomType3a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace5, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, mockCustomType3a)
			assertSnapshotMocks(watched, notWatched)

			deleteNamespaces(ctx, kube, namespace4)
			notWatched = append(notWatched, mockCustomType2b)
			watched = MockCustomTypeList{mockCustomType3a}
			assertSnapshotMocks(watched, notWatched)

			for _, r := range watched {
				err = mockCustomTypeClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}
			assertNoMocksSent()

			deleteNamespaces(ctx, kube, namespace5)

			createNamespaces(ctx, kube, namespace1, namespace2)

			/*
				Pod
			*/

			assertSnapshotpods := func(expectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList, unexpectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectpods {
							if _, err := snap.Pods.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectpods {
							if _, err := snap.Pods.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := podClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := podClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			pod1a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod1b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			notWatched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}
			assertNoMocksSent()

			deleteNamespaces(ctx, kube, namespace1, namespace2)
			assertNoMocksSent()

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			pod2a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod2b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2a, pod2b}
			assertSnapshotMocks(watched, notWatched)

			deleteNamespaces(ctx, kube, namespace3)
			notWatched = append(notWatched, pod2a)
			watched = github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2b}
			assertSnapshotMocks(watched, notWatched)

			createNamespaceWithLabel(ctx, kube, namespace5, labels1)

			pod3a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace5, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			watched = append(watched, pod3a)
			assertSnapshotMocks(watched, notWatched)

			deleteNamespaces(ctx, kube, namespace4)
			notWatched = append(notWatched, pod2b)
			watched = github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod3a}
			assertSnapshotMocks(watched, notWatched)

			for _, r := range watched {
				err = podClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}
			assertNoMocksSent()

			deleteNamespaces(ctx, kube, namespace5)

		})
	})

	Context("use different resource namespace listers", func() {
		BeforeEach(func() {
			resourceNamespaceLister = namespace.NewKubeClientResourceNamespaceLister(kube)
			emitter = NewTestingEmitter(mockResourceClient, resourceNamespaceLister)
		})

		It("Should work with the Kube Client Namespace Lister", func() {
			runNamespacedSelectorsWithWatchNamespaces()
		})
	})

})
