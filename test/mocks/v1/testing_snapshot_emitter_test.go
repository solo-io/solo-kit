// Code generated by solo-kit. DO NOT EDIT.

//go:build solokit
// +build solokit

package v1

import (
	"bytes"
	"context"
	"fmt"
	"os"
	"time"

	github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes "github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes"
	"github.com/solo-io/solo-kit/pkg/utils/statusutils"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/solo-io/go-utils/log"
	"github.com/solo-io/k8s-utils/kubeutils"
	"github.com/solo-io/solo-kit/pkg/api/external/kubernetes/namespace"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	kuberc "github.com/solo-io/solo-kit/pkg/api/v1/clients/kube"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/cache"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/memory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/test/helpers"
	corev1 "k8s.io/api/core/v1"
	apiext "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"

	// Needed to run tests in GKE
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"

	// From https://github.com/kubernetes/client-go/blob/53c7adfd0294caa142d961e1f780f74081d5b15f/examples/out-of-cluster-client-configuration/main.go#L31
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
)

var _ = Describe("V1Emitter", func() {
	if os.Getenv("RUN_KUBE_TESTS") != "1" {
		log.Printf("This test creates kubernetes resources and is disabled by default. To enable, set RUN_KUBE_TESTS=1 in your env.")
		return
	}

	type metadataGetter interface {
		GetMetadata() *core.Metadata
	}

	var (
		ctx                          context.Context
		namespace1, namespace2       string
		namespace3, namespace4       string
		namespace5, namespace6       string
		name1, name2                 = "angela" + helpers.RandString(3), "bob" + helpers.RandString(3)
		name3, name4                 = "susan" + helpers.RandString(3), "jim" + helpers.RandString(3)
		name5                        = "melisa" + helpers.RandString(3)
		labels1                      = map[string]string{"env": "test"}
		labelExpression1             = "env in (test)"
		cfg                          *rest.Config
		clientset                    *apiext.Clientset
		kube                         kubernetes.Interface
		emitter                      TestingEmitter
		simpleMockResourceClient     SimpleMockResourceClient
		mockResourceClient           MockResourceClient
		fakeResourceClient           FakeResourceClient
		anotherMockResourceClient    AnotherMockResourceClient
		clusterResourceClient        ClusterResourceClient
		mockCustomTypeClient         MockCustomTypeClient
		mockCustomSpecHashTypeClient MockCustomSpecHashTypeClient
		podClient                    github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodClient
		resourceNamespaceLister      resources.ResourceNamespaceLister
		kubeCache                    cache.KubeCoreCache
	)
	const (
		TIME_BETWEEN_MESSAGES = 5
	)
	NewSimpleMockResourceWithLabels := func(namespace, name string, labels map[string]string) *SimpleMockResource {
		resource := NewSimpleMockResource(namespace, name)
		resource.GetMetadata().Labels = labels
		return resource
	}
	NewMockResourceWithLabels := func(namespace, name string, labels map[string]string) *MockResource {
		resource := NewMockResource(namespace, name)
		resource.GetMetadata().Labels = labels
		return resource
	}
	NewFakeResourceWithLabels := func(namespace, name string, labels map[string]string) *FakeResource {
		resource := NewFakeResource(namespace, name)
		resource.GetMetadata().Labels = labels
		return resource
	}
	NewAnotherMockResourceWithLabels := func(namespace, name string, labels map[string]string) *AnotherMockResource {
		resource := NewAnotherMockResource(namespace, name)
		resource.GetMetadata().Labels = labels
		return resource
	}
	NewClusterResourceWithLabels := func(namespace, name string, labels map[string]string) *ClusterResource {
		resource := NewClusterResource(namespace, name)
		resource.GetMetadata().Labels = labels
		return resource
	}
	NewMockCustomTypeWithLabels := func(namespace, name string, labels map[string]string) *MockCustomType {
		resource := NewMockCustomType(namespace, name)
		resource.GetMetadata().Labels = labels
		return resource
	}
	NewMockCustomSpecHashTypeWithLabels := func(namespace, name string, labels map[string]string) *MockCustomSpecHashType {
		resource := NewMockCustomSpecHashType(namespace, name)
		resource.GetMetadata().Labels = labels
		return resource
	}
	NewPodWithLabels := func(namespace, name string, labels map[string]string) *github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.Pod {
		resource := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace, name)
		resource.GetMetadata().Labels = labels
		return resource
	}

	createNamespaces := func(ctx context.Context, kube kubernetes.Interface, namespaces ...string) {
		err := kubeutils.CreateNamespacesInParallel(ctx, kube, namespaces...)
		Expect(err).NotTo(HaveOccurred())
	}

	createNamespaceWithLabel := func(ctx context.Context, kube kubernetes.Interface, namespace string, labels map[string]string) {
		_, err := kube.CoreV1().Namespaces().Create(ctx, &corev1.Namespace{
			ObjectMeta: metav1.ObjectMeta{
				Name:   namespace,
				Labels: labels,
			},
		}, metav1.CreateOptions{})
		Expect(err).ToNot(HaveOccurred())
	}

	deleteNamespaces := func(ctx context.Context, kube kubernetes.Interface, namespaces ...string) {
		err := kubeutils.DeleteNamespacesInParallelBlocking(ctx, kube, namespaces...)
		Expect(err).NotTo(HaveOccurred())
	}

	// getNewNamespaces is used to generate new namespace names, so that we do not have to wait
	// when deleting namespaces in runNamespacedSelectorsWithWatchNamespaces. Since
	// runNamespacedSelectorsWithWatchNamespaces uses watchNamespaces set to namespace1 and
	// namespace2, this will work. Because the emitter willl only be watching namespaces that are
	// labeled.
	getNewNamespaces := func() {
		namespace3 = helpers.RandString(8)
		namespace4 = helpers.RandString(8)
		namespace5 = helpers.RandString(8)
		namespace6 = helpers.RandString(8)
	}

	// getNewNamespaces1and2 is used to generate new namespaces for namespace 1 and 2.
	// used for the same reason as getNewNamespaces() above
	getNewNamespaces1and2 := func() {
		namespace1 = helpers.RandString(8)
		namespace2 = helpers.RandString(8)
	}

	getMapOfNamespaceResources := func(getList func(string) ([]metadataGetter, error)) map[string][]string {
		namespaces := []string{namespace1, namespace2, namespace3, namespace4, namespace5, namespace6}
		namespaceResources := make(map[string][]string, len(namespaces))
		for _, ns := range namespaces {
			list, _ := getList(ns)
			for _, snap := range list {
				snapMeta := snap.GetMetadata()
				if _, hit := namespaceResources[snapMeta.Namespace]; hit {
					namespaceResources[snap.GetMetadata().Namespace] = make([]string, 1)
				}
				namespaceResources[snapMeta.Namespace] = append(namespaceResources[snapMeta.Namespace], snapMeta.Name)
			}
		}
		return namespaceResources
	}

	findNonMatchingResources := func(matchList, findList []metadataGetter) map[string][]string {
		nonMatching := make(map[string][]string)
		for _, snap := range matchList {
			snapMeta := snap.GetMetadata()
			matched := false
			for _, pre := range findList {
				preMeta := pre.GetMetadata()
				if preMeta.Namespace == snapMeta.Namespace && preMeta.Name == snapMeta.Name {
					matched = true
					break
				}
			}
			if !matched {
				if _, hit := nonMatching[snapMeta.Namespace]; hit {
					nonMatching[snap.GetMetadata().Namespace] = make([]string, 1)
				}
				nonMatching[snapMeta.Namespace] = append(nonMatching[snapMeta.Namespace], snapMeta.Name)
			}
		}
		return nonMatching
	}

	findMatchingResources := func(matchList, findList []metadataGetter) map[string][]string {
		matching := make(map[string][]string)
		for _, snap := range matchList {
			snapMeta := snap.GetMetadata()
			matched := false
			for _, pre := range findList {
				preMeta := pre.GetMetadata()
				if preMeta.Namespace == snapMeta.Namespace && preMeta.Name == snapMeta.Name {
					matched = true
					break
				}
			}
			if matched {
				if _, hit := matching[snapMeta.Namespace]; hit {
					matching[snap.GetMetadata().Namespace] = make([]string, 1)
				}
				matching[snapMeta.Namespace] = append(matching[snapMeta.Namespace], snapMeta.Name)
			}
		}
		return matching
	}

	getMapOfResources := func(listOfResources []metadataGetter) map[string][]string {
		resources := make(map[string][]string)
		for _, snap := range listOfResources {
			snapMeta := snap.GetMetadata()
			if _, hit := resources[snapMeta.Namespace]; hit {
				resources[snap.GetMetadata().Namespace] = make([]string, 1)
			}
			resources[snapMeta.Namespace] = append(resources[snapMeta.Namespace], snapMeta.Name)
		}
		return resources
	}
	convertSimplemocksToMetadataGetter := func(rl SimpleMockResourceList) []metadataGetter {
		listConv := make([]metadataGetter, len(rl))
		for i, r := range rl {
			listConv[i] = r
		}
		return listConv
	}
	convertMocksToMetadataGetter := func(rl MockResourceList) []metadataGetter {
		listConv := make([]metadataGetter, len(rl))
		for i, r := range rl {
			listConv[i] = r
		}
		return listConv
	}
	convertFakesToMetadataGetter := func(rl FakeResourceList) []metadataGetter {
		listConv := make([]metadataGetter, len(rl))
		for i, r := range rl {
			listConv[i] = r
		}
		return listConv
	}
	convertAnothermockresourcesToMetadataGetter := func(rl AnotherMockResourceList) []metadataGetter {
		listConv := make([]metadataGetter, len(rl))
		for i, r := range rl {
			listConv[i] = r
		}
		return listConv
	}
	convertmctsToMetadataGetter := func(rl MockCustomTypeList) []metadataGetter {
		listConv := make([]metadataGetter, len(rl))
		for i, r := range rl {
			listConv[i] = r
		}
		return listConv
	}
	convertmcshtsToMetadataGetter := func(rl MockCustomSpecHashTypeList) []metadataGetter {
		listConv := make([]metadataGetter, len(rl))
		for i, r := range rl {
			listConv[i] = r
		}
		return listConv
	}
	convertpodsToMetadataGetter := func(rl github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList) []metadataGetter {
		listConv := make([]metadataGetter, len(rl))
		for i, r := range rl {
			listConv[i] = r
		}
		return listConv
	}

	runNamespacedSelectorsWithWatchNamespaces := func() {
		ctx := context.Background()
		err := emitter.Register()
		Expect(err).NotTo(HaveOccurred())

		// There is an error here in the code.
		snapshots, errs, err := emitter.Snapshots([]string{namespace1, namespace2}, clients.WatchOpts{
			Ctx:                ctx,
			RefreshRate:        time.Second,
			ExpressionSelector: labelExpression1,
		})
		Expect(err).NotTo(HaveOccurred())

		var snap *TestingSnapshot
		var previous *TestingSnapshot

		/*
			SimpleMockResource
		*/
		assertSnapshotSimplemocks := func(expectSimplemocks SimpleMockResourceList, unexpectSimplemocks SimpleMockResourceList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					previous = snap
					for _, expected := range expectSimplemocks {
						if _, err := snap.Simplemocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectSimplemocks {
						if _, err := snap.Simplemocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					var expectedResources map[string][]string
					var unexpectedResource map[string][]string

					if previous != nil {
						expectedResources = findNonMatchingResources(convertSimplemocksToMetadataGetter(expectSimplemocks), convertSimplemocksToMetadataGetter(previous.Simplemocks))
						unexpectedResource = findMatchingResources(convertSimplemocksToMetadataGetter(unexpectSimplemocks), convertSimplemocksToMetadataGetter(previous.Simplemocks))
					} else {
						expectedResources = getMapOfResources(convertSimplemocksToMetadataGetter(expectSimplemocks))
						unexpectedResource = getMapOfResources(convertSimplemocksToMetadataGetter(unexpectSimplemocks))
					}
					getList := func(ns string) ([]metadataGetter, error) {
						l, err := simpleMockResourceClient.List(ns, clients.ListOpts{})
						return convertSimplemocksToMetadataGetter(l), err
					}
					namespaceResources := getMapOfNamespaceResources(getList)
					Fail(fmt.Sprintf("expected final snapshot before 10 seconds. expected \nExpected:\n%#v\n\nUnexpected:\n%#v\n\nnamespaces:\n%#v", expectedResources, unexpectedResource, namespaceResources))
				}
			}
		}

		simpleMockResource1a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResource1b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResourceWatched := SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}
		assertSnapshotSimplemocks(simpleMockResourceWatched, nil)

		simpleMockResource3a, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResource3b, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace2, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResourceWatched = append(simpleMockResourceWatched, SimpleMockResourceList{simpleMockResource3a, simpleMockResource3b}...)
		assertSnapshotSimplemocks(simpleMockResourceWatched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		simpleMockResource4a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResource4b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResourceWatched = append(simpleMockResourceWatched, simpleMockResource4a)
		simpleMockResourceNotWatched := SimpleMockResourceList{simpleMockResource4b}
		assertSnapshotSimplemocks(simpleMockResourceWatched, simpleMockResourceNotWatched)

		simpleMockResource5a, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResource5b, err := simpleMockResourceClient.Write(NewSimpleMockResourceWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResourceWatched = append(simpleMockResourceWatched, simpleMockResource5a)
		simpleMockResourceNotWatched = append(simpleMockResourceNotWatched, simpleMockResource5b)
		assertSnapshotSimplemocks(simpleMockResourceWatched, simpleMockResourceNotWatched)

		for _, r := range simpleMockResourceNotWatched {
			err = simpleMockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
		}

		err = simpleMockResourceClient.Delete(simpleMockResource1a.GetMetadata().Namespace, simpleMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = simpleMockResourceClient.Delete(simpleMockResource1b.GetMetadata().Namespace, simpleMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResourceNotWatched = append(simpleMockResourceNotWatched, SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}...)
		simpleMockResourceWatched = SimpleMockResourceList{simpleMockResource3a, simpleMockResource3b, simpleMockResource4a, simpleMockResource5a}
		assertSnapshotSimplemocks(simpleMockResourceWatched, simpleMockResourceNotWatched)

		err = simpleMockResourceClient.Delete(simpleMockResource3a.GetMetadata().Namespace, simpleMockResource3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = simpleMockResourceClient.Delete(simpleMockResource3b.GetMetadata().Namespace, simpleMockResource3b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResourceNotWatched = append(simpleMockResourceNotWatched, SimpleMockResourceList{simpleMockResource3a, simpleMockResource3b}...)
		simpleMockResourceWatched = SimpleMockResourceList{simpleMockResource4a, simpleMockResource5a}
		assertSnapshotSimplemocks(simpleMockResourceWatched, simpleMockResourceNotWatched)

		err = simpleMockResourceClient.Delete(simpleMockResource4a.GetMetadata().Namespace, simpleMockResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = simpleMockResourceClient.Delete(simpleMockResource5a.GetMetadata().Namespace, simpleMockResource5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		simpleMockResourceNotWatched = append(simpleMockResourceNotWatched, SimpleMockResourceList{simpleMockResource5a, simpleMockResource5b}...)
		assertSnapshotSimplemocks(nil, simpleMockResourceNotWatched)

		// clean up environment
		deleteNamespaces(ctx, kube, namespace3, namespace4)
		getNewNamespaces()

		/*
			MockResource
		*/
		assertSnapshotMocks := func(expectMocks MockResourceList, unexpectMocks MockResourceList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					previous = snap
					for _, expected := range expectMocks {
						if _, err := snap.Mocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectMocks {
						if _, err := snap.Mocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					var expectedResources map[string][]string
					var unexpectedResource map[string][]string

					if previous != nil {
						expectedResources = findNonMatchingResources(convertMocksToMetadataGetter(expectMocks), convertMocksToMetadataGetter(previous.Mocks))
						unexpectedResource = findMatchingResources(convertMocksToMetadataGetter(unexpectMocks), convertMocksToMetadataGetter(previous.Mocks))
					} else {
						expectedResources = getMapOfResources(convertMocksToMetadataGetter(expectMocks))
						unexpectedResource = getMapOfResources(convertMocksToMetadataGetter(unexpectMocks))
					}
					getList := func(ns string) ([]metadataGetter, error) {
						l, err := mockResourceClient.List(ns, clients.ListOpts{})
						return convertMocksToMetadataGetter(l), err
					}
					namespaceResources := getMapOfNamespaceResources(getList)
					Fail(fmt.Sprintf("expected final snapshot before 10 seconds. expected \nExpected:\n%#v\n\nUnexpected:\n%#v\n\nnamespaces:\n%#v", expectedResources, unexpectedResource, namespaceResources))
				}
			}
		}

		mockResource1a, err := mockResourceClient.Write(NewMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResource1b, err := mockResourceClient.Write(NewMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResourceWatched := MockResourceList{mockResource1a, mockResource1b}
		assertSnapshotMocks(mockResourceWatched, nil)

		mockResource3a, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResource3b, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace2, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResourceWatched = append(mockResourceWatched, MockResourceList{mockResource3a, mockResource3b}...)
		assertSnapshotMocks(mockResourceWatched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		mockResource4a, err := mockResourceClient.Write(NewMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResource4b, err := mockResourceClient.Write(NewMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResourceWatched = append(mockResourceWatched, mockResource4a)
		mockResourceNotWatched := MockResourceList{mockResource4b}
		assertSnapshotMocks(mockResourceWatched, mockResourceNotWatched)

		mockResource5a, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResource5b, err := mockResourceClient.Write(NewMockResourceWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResourceWatched = append(mockResourceWatched, mockResource5a)
		mockResourceNotWatched = append(mockResourceNotWatched, mockResource5b)
		assertSnapshotMocks(mockResourceWatched, mockResourceNotWatched)

		for _, r := range mockResourceNotWatched {
			err = mockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
		}

		err = mockResourceClient.Delete(mockResource1a.GetMetadata().Namespace, mockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockResourceClient.Delete(mockResource1b.GetMetadata().Namespace, mockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResourceNotWatched = append(mockResourceNotWatched, MockResourceList{mockResource1a, mockResource1b}...)
		mockResourceWatched = MockResourceList{mockResource3a, mockResource3b, mockResource4a, mockResource5a}
		assertSnapshotMocks(mockResourceWatched, mockResourceNotWatched)

		err = mockResourceClient.Delete(mockResource3a.GetMetadata().Namespace, mockResource3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockResourceClient.Delete(mockResource3b.GetMetadata().Namespace, mockResource3b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResourceNotWatched = append(mockResourceNotWatched, MockResourceList{mockResource3a, mockResource3b}...)
		mockResourceWatched = MockResourceList{mockResource4a, mockResource5a}
		assertSnapshotMocks(mockResourceWatched, mockResourceNotWatched)

		err = mockResourceClient.Delete(mockResource4a.GetMetadata().Namespace, mockResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockResourceClient.Delete(mockResource5a.GetMetadata().Namespace, mockResource5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockResourceNotWatched = append(mockResourceNotWatched, MockResourceList{mockResource5a, mockResource5b}...)
		assertSnapshotMocks(nil, mockResourceNotWatched)

		// clean up environment
		deleteNamespaces(ctx, kube, namespace3, namespace4)
		getNewNamespaces()

		/*
			FakeResource
		*/
		assertSnapshotFakes := func(expectFakes FakeResourceList, unexpectFakes FakeResourceList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					previous = snap
					for _, expected := range expectFakes {
						if _, err := snap.Fakes.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectFakes {
						if _, err := snap.Fakes.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					var expectedResources map[string][]string
					var unexpectedResource map[string][]string

					if previous != nil {
						expectedResources = findNonMatchingResources(convertFakesToMetadataGetter(expectFakes), convertFakesToMetadataGetter(previous.Fakes))
						unexpectedResource = findMatchingResources(convertFakesToMetadataGetter(unexpectFakes), convertFakesToMetadataGetter(previous.Fakes))
					} else {
						expectedResources = getMapOfResources(convertFakesToMetadataGetter(expectFakes))
						unexpectedResource = getMapOfResources(convertFakesToMetadataGetter(unexpectFakes))
					}
					getList := func(ns string) ([]metadataGetter, error) {
						l, err := fakeResourceClient.List(ns, clients.ListOpts{})
						return convertFakesToMetadataGetter(l), err
					}
					namespaceResources := getMapOfNamespaceResources(getList)
					Fail(fmt.Sprintf("expected final snapshot before 10 seconds. expected \nExpected:\n%#v\n\nUnexpected:\n%#v\n\nnamespaces:\n%#v", expectedResources, unexpectedResource, namespaceResources))
				}
			}
		}

		fakeResource1a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResource1b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResourceWatched := FakeResourceList{fakeResource1a, fakeResource1b}
		assertSnapshotFakes(fakeResourceWatched, nil)

		fakeResource3a, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResource3b, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace2, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResourceWatched = append(fakeResourceWatched, FakeResourceList{fakeResource3a, fakeResource3b}...)
		assertSnapshotFakes(fakeResourceWatched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		fakeResource4a, err := fakeResourceClient.Write(NewFakeResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResource4b, err := fakeResourceClient.Write(NewFakeResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResourceWatched = append(fakeResourceWatched, fakeResource4a)
		fakeResourceNotWatched := FakeResourceList{fakeResource4b}
		assertSnapshotFakes(fakeResourceWatched, fakeResourceNotWatched)

		fakeResource5a, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResource5b, err := fakeResourceClient.Write(NewFakeResourceWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResourceWatched = append(fakeResourceWatched, fakeResource5a)
		fakeResourceNotWatched = append(fakeResourceNotWatched, fakeResource5b)
		assertSnapshotFakes(fakeResourceWatched, fakeResourceNotWatched)

		for _, r := range fakeResourceNotWatched {
			err = fakeResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
		}

		err = fakeResourceClient.Delete(fakeResource1a.GetMetadata().Namespace, fakeResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = fakeResourceClient.Delete(fakeResource1b.GetMetadata().Namespace, fakeResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResourceNotWatched = append(fakeResourceNotWatched, FakeResourceList{fakeResource1a, fakeResource1b}...)
		fakeResourceWatched = FakeResourceList{fakeResource3a, fakeResource3b, fakeResource4a, fakeResource5a}
		assertSnapshotFakes(fakeResourceWatched, fakeResourceNotWatched)

		err = fakeResourceClient.Delete(fakeResource3a.GetMetadata().Namespace, fakeResource3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = fakeResourceClient.Delete(fakeResource3b.GetMetadata().Namespace, fakeResource3b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResourceNotWatched = append(fakeResourceNotWatched, FakeResourceList{fakeResource3a, fakeResource3b}...)
		fakeResourceWatched = FakeResourceList{fakeResource4a, fakeResource5a}
		assertSnapshotFakes(fakeResourceWatched, fakeResourceNotWatched)

		err = fakeResourceClient.Delete(fakeResource4a.GetMetadata().Namespace, fakeResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = fakeResourceClient.Delete(fakeResource5a.GetMetadata().Namespace, fakeResource5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		fakeResourceNotWatched = append(fakeResourceNotWatched, FakeResourceList{fakeResource5a, fakeResource5b}...)
		assertSnapshotFakes(nil, fakeResourceNotWatched)

		// clean up environment
		deleteNamespaces(ctx, kube, namespace3, namespace4)
		getNewNamespaces()

		/*
			AnotherMockResource
		*/
		assertSnapshotAnothermockresources := func(expectAnothermockresources AnotherMockResourceList, unexpectAnothermockresources AnotherMockResourceList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					previous = snap
					for _, expected := range expectAnothermockresources {
						if _, err := snap.Anothermockresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectAnothermockresources {
						if _, err := snap.Anothermockresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					var expectedResources map[string][]string
					var unexpectedResource map[string][]string

					if previous != nil {
						expectedResources = findNonMatchingResources(convertAnothermockresourcesToMetadataGetter(expectAnothermockresources), convertAnothermockresourcesToMetadataGetter(previous.Anothermockresources))
						unexpectedResource = findMatchingResources(convertAnothermockresourcesToMetadataGetter(unexpectAnothermockresources), convertAnothermockresourcesToMetadataGetter(previous.Anothermockresources))
					} else {
						expectedResources = getMapOfResources(convertAnothermockresourcesToMetadataGetter(expectAnothermockresources))
						unexpectedResource = getMapOfResources(convertAnothermockresourcesToMetadataGetter(unexpectAnothermockresources))
					}
					getList := func(ns string) ([]metadataGetter, error) {
						l, err := anotherMockResourceClient.List(ns, clients.ListOpts{})
						return convertAnothermockresourcesToMetadataGetter(l), err
					}
					namespaceResources := getMapOfNamespaceResources(getList)
					Fail(fmt.Sprintf("expected final snapshot before 10 seconds. expected \nExpected:\n%#v\n\nUnexpected:\n%#v\n\nnamespaces:\n%#v", expectedResources, unexpectedResource, namespaceResources))
				}
			}
		}

		anotherMockResource1a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResource1b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResourceWatched := AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}
		assertSnapshotAnothermockresources(anotherMockResourceWatched, nil)

		anotherMockResource3a, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResource3b, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace2, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResourceWatched = append(anotherMockResourceWatched, AnotherMockResourceList{anotherMockResource3a, anotherMockResource3b}...)
		assertSnapshotAnothermockresources(anotherMockResourceWatched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		anotherMockResource4a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResource4b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResourceWatched = append(anotherMockResourceWatched, anotherMockResource4a)
		anotherMockResourceNotWatched := AnotherMockResourceList{anotherMockResource4b}
		assertSnapshotAnothermockresources(anotherMockResourceWatched, anotherMockResourceNotWatched)

		anotherMockResource5a, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResource5b, err := anotherMockResourceClient.Write(NewAnotherMockResourceWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResourceWatched = append(anotherMockResourceWatched, anotherMockResource5a)
		anotherMockResourceNotWatched = append(anotherMockResourceNotWatched, anotherMockResource5b)
		assertSnapshotAnothermockresources(anotherMockResourceWatched, anotherMockResourceNotWatched)

		for _, r := range anotherMockResourceNotWatched {
			err = anotherMockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
		}

		err = anotherMockResourceClient.Delete(anotherMockResource1a.GetMetadata().Namespace, anotherMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = anotherMockResourceClient.Delete(anotherMockResource1b.GetMetadata().Namespace, anotherMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResourceNotWatched = append(anotherMockResourceNotWatched, AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}...)
		anotherMockResourceWatched = AnotherMockResourceList{anotherMockResource3a, anotherMockResource3b, anotherMockResource4a, anotherMockResource5a}
		assertSnapshotAnothermockresources(anotherMockResourceWatched, anotherMockResourceNotWatched)

		err = anotherMockResourceClient.Delete(anotherMockResource3a.GetMetadata().Namespace, anotherMockResource3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = anotherMockResourceClient.Delete(anotherMockResource3b.GetMetadata().Namespace, anotherMockResource3b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResourceNotWatched = append(anotherMockResourceNotWatched, AnotherMockResourceList{anotherMockResource3a, anotherMockResource3b}...)
		anotherMockResourceWatched = AnotherMockResourceList{anotherMockResource4a, anotherMockResource5a}
		assertSnapshotAnothermockresources(anotherMockResourceWatched, anotherMockResourceNotWatched)

		err = anotherMockResourceClient.Delete(anotherMockResource4a.GetMetadata().Namespace, anotherMockResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = anotherMockResourceClient.Delete(anotherMockResource5a.GetMetadata().Namespace, anotherMockResource5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		anotherMockResourceNotWatched = append(anotherMockResourceNotWatched, AnotherMockResourceList{anotherMockResource5a, anotherMockResource5b}...)
		assertSnapshotAnothermockresources(nil, anotherMockResourceNotWatched)

		// clean up environment
		deleteNamespaces(ctx, kube, namespace3, namespace4)
		getNewNamespaces()

		/*
			ClusterResource
		*/
		assertSnapshotClusterresources := func(expectClusterresources ClusterResourceList, unexpectClusterresources ClusterResourceList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					previous = snap
					for _, expected := range expectClusterresources {
						if _, err := snap.Clusterresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectClusterresources {
						if _, err := snap.Clusterresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					combined, _ := clusterResourceClient.List(clients.ListOpts{})
					Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
				}
			}
		}

		clusterResource1a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		clusterResourceWatched := ClusterResourceList{clusterResource1a}
		assertSnapshotClusterresources(clusterResourceWatched, nil)

		clusterResource3a, err := clusterResourceClient.Write(NewClusterResourceWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		clusterResourceWatched = append(clusterResourceWatched, clusterResource3a)
		assertSnapshotClusterresources(clusterResourceWatched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		clusterResource4a, err := clusterResourceClient.Write(NewClusterResource(namespace3, name4), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		clusterResourceWatched = append(clusterResourceWatched, clusterResource4a)
		assertSnapshotClusterresources(clusterResourceWatched, nil)

		clusterResource5a, err := clusterResourceClient.Write(NewClusterResourceWithLabels(namespace3, name5, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		clusterResourceWatched = append(clusterResourceWatched, clusterResource5a)
		assertSnapshotClusterresources(clusterResourceWatched, nil)

		err = clusterResourceClient.Delete(clusterResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = clusterResourceClient.Delete(clusterResource3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		clusterResourceNotWatched := ClusterResourceList{clusterResource1a, clusterResource3a}
		clusterResourceWatched = ClusterResourceList{clusterResource4a, clusterResource5a}
		assertSnapshotClusterresources(clusterResourceWatched, clusterResourceNotWatched)

		err = clusterResourceClient.Delete(clusterResource4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = clusterResourceClient.Delete(clusterResource5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		clusterResourceNotWatched = append(clusterResourceNotWatched, ClusterResourceList{clusterResource4a, clusterResource5a}...)
		assertSnapshotClusterresources(nil, clusterResourceNotWatched)

		// clean up environment
		deleteNamespaces(ctx, kube, namespace3, namespace4)
		getNewNamespaces()

		/*
			MockCustomType
		*/
		assertSnapshotmcts := func(expectmcts MockCustomTypeList, unexpectmcts MockCustomTypeList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					previous = snap
					for _, expected := range expectmcts {
						if _, err := snap.Mcts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectmcts {
						if _, err := snap.Mcts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					var expectedResources map[string][]string
					var unexpectedResource map[string][]string

					if previous != nil {
						expectedResources = findNonMatchingResources(convertmctsToMetadataGetter(expectmcts), convertmctsToMetadataGetter(previous.Mcts))
						unexpectedResource = findMatchingResources(convertmctsToMetadataGetter(unexpectmcts), convertmctsToMetadataGetter(previous.Mcts))
					} else {
						expectedResources = getMapOfResources(convertmctsToMetadataGetter(expectmcts))
						unexpectedResource = getMapOfResources(convertmctsToMetadataGetter(unexpectmcts))
					}
					getList := func(ns string) ([]metadataGetter, error) {
						l, err := mockCustomTypeClient.List(ns, clients.ListOpts{})
						return convertmctsToMetadataGetter(l), err
					}
					namespaceResources := getMapOfNamespaceResources(getList)
					Fail(fmt.Sprintf("expected final snapshot before 10 seconds. expected \nExpected:\n%#v\n\nUnexpected:\n%#v\n\nnamespaces:\n%#v", expectedResources, unexpectedResource, namespaceResources))
				}
			}
		}

		mockCustomType1a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomType1b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomTypeWatched := MockCustomTypeList{mockCustomType1a, mockCustomType1b}
		assertSnapshotmcts(mockCustomTypeWatched, nil)

		mockCustomType3a, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomType3b, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace2, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomTypeWatched = append(mockCustomTypeWatched, MockCustomTypeList{mockCustomType3a, mockCustomType3b}...)
		assertSnapshotmcts(mockCustomTypeWatched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		mockCustomType4a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomType4b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace4, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomTypeWatched = append(mockCustomTypeWatched, mockCustomType4a)
		mockCustomTypeNotWatched := MockCustomTypeList{mockCustomType4b}
		assertSnapshotmcts(mockCustomTypeWatched, mockCustomTypeNotWatched)

		mockCustomType5a, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomType5b, err := mockCustomTypeClient.Write(NewMockCustomTypeWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomTypeWatched = append(mockCustomTypeWatched, mockCustomType5a)
		mockCustomTypeNotWatched = append(mockCustomTypeNotWatched, mockCustomType5b)
		assertSnapshotmcts(mockCustomTypeWatched, mockCustomTypeNotWatched)

		for _, r := range mockCustomTypeNotWatched {
			err = mockCustomTypeClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
		}

		err = mockCustomTypeClient.Delete(mockCustomType1a.GetMetadata().Namespace, mockCustomType1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockCustomTypeClient.Delete(mockCustomType1b.GetMetadata().Namespace, mockCustomType1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomTypeNotWatched = append(mockCustomTypeNotWatched, MockCustomTypeList{mockCustomType1a, mockCustomType1b}...)
		mockCustomTypeWatched = MockCustomTypeList{mockCustomType3a, mockCustomType3b, mockCustomType4a, mockCustomType5a}
		assertSnapshotmcts(mockCustomTypeWatched, mockCustomTypeNotWatched)

		err = mockCustomTypeClient.Delete(mockCustomType3a.GetMetadata().Namespace, mockCustomType3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockCustomTypeClient.Delete(mockCustomType3b.GetMetadata().Namespace, mockCustomType3b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomTypeNotWatched = append(mockCustomTypeNotWatched, MockCustomTypeList{mockCustomType3a, mockCustomType3b}...)
		mockCustomTypeWatched = MockCustomTypeList{mockCustomType4a, mockCustomType5a}
		assertSnapshotmcts(mockCustomTypeWatched, mockCustomTypeNotWatched)

		err = mockCustomTypeClient.Delete(mockCustomType4a.GetMetadata().Namespace, mockCustomType4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockCustomTypeClient.Delete(mockCustomType5a.GetMetadata().Namespace, mockCustomType5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomTypeNotWatched = append(mockCustomTypeNotWatched, MockCustomTypeList{mockCustomType5a, mockCustomType5b}...)
		assertSnapshotmcts(nil, mockCustomTypeNotWatched)

		// clean up environment
		deleteNamespaces(ctx, kube, namespace3, namespace4)
		getNewNamespaces()

		/*
			MockCustomSpecHashType
		*/
		assertSnapshotmcshts := func(expectmcshts MockCustomSpecHashTypeList, unexpectmcshts MockCustomSpecHashTypeList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					previous = snap
					for _, expected := range expectmcshts {
						if _, err := snap.Mcshts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectmcshts {
						if _, err := snap.Mcshts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					var expectedResources map[string][]string
					var unexpectedResource map[string][]string

					if previous != nil {
						expectedResources = findNonMatchingResources(convertmcshtsToMetadataGetter(expectmcshts), convertmcshtsToMetadataGetter(previous.Mcshts))
						unexpectedResource = findMatchingResources(convertmcshtsToMetadataGetter(unexpectmcshts), convertmcshtsToMetadataGetter(previous.Mcshts))
					} else {
						expectedResources = getMapOfResources(convertmcshtsToMetadataGetter(expectmcshts))
						unexpectedResource = getMapOfResources(convertmcshtsToMetadataGetter(unexpectmcshts))
					}
					getList := func(ns string) ([]metadataGetter, error) {
						l, err := mockCustomSpecHashTypeClient.List(ns, clients.ListOpts{})
						return convertmcshtsToMetadataGetter(l), err
					}
					namespaceResources := getMapOfNamespaceResources(getList)
					Fail(fmt.Sprintf("expected final snapshot before 10 seconds. expected \nExpected:\n%#v\n\nUnexpected:\n%#v\n\nnamespaces:\n%#v", expectedResources, unexpectedResource, namespaceResources))
				}
			}
		}

		mockCustomSpecHashType1a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomSpecHashType1b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomSpecHashTypeWatched := MockCustomSpecHashTypeList{mockCustomSpecHashType1a, mockCustomSpecHashType1b}
		assertSnapshotmcshts(mockCustomSpecHashTypeWatched, nil)

		mockCustomSpecHashType3a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashTypeWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomSpecHashType3b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashTypeWithLabels(namespace2, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomSpecHashTypeWatched = append(mockCustomSpecHashTypeWatched, MockCustomSpecHashTypeList{mockCustomSpecHashType3a, mockCustomSpecHashType3b}...)
		assertSnapshotmcshts(mockCustomSpecHashTypeWatched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		mockCustomSpecHashType4a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomSpecHashType4b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace4, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomSpecHashTypeWatched = append(mockCustomSpecHashTypeWatched, mockCustomSpecHashType4a)
		mockCustomSpecHashTypeNotWatched := MockCustomSpecHashTypeList{mockCustomSpecHashType4b}
		assertSnapshotmcshts(mockCustomSpecHashTypeWatched, mockCustomSpecHashTypeNotWatched)

		mockCustomSpecHashType5a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashTypeWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomSpecHashType5b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashTypeWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomSpecHashTypeWatched = append(mockCustomSpecHashTypeWatched, mockCustomSpecHashType5a)
		mockCustomSpecHashTypeNotWatched = append(mockCustomSpecHashTypeNotWatched, mockCustomSpecHashType5b)
		assertSnapshotmcshts(mockCustomSpecHashTypeWatched, mockCustomSpecHashTypeNotWatched)

		for _, r := range mockCustomSpecHashTypeNotWatched {
			err = mockCustomSpecHashTypeClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
		}

		err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType1a.GetMetadata().Namespace, mockCustomSpecHashType1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType1b.GetMetadata().Namespace, mockCustomSpecHashType1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomSpecHashTypeNotWatched = append(mockCustomSpecHashTypeNotWatched, MockCustomSpecHashTypeList{mockCustomSpecHashType1a, mockCustomSpecHashType1b}...)
		mockCustomSpecHashTypeWatched = MockCustomSpecHashTypeList{mockCustomSpecHashType3a, mockCustomSpecHashType3b, mockCustomSpecHashType4a, mockCustomSpecHashType5a}
		assertSnapshotmcshts(mockCustomSpecHashTypeWatched, mockCustomSpecHashTypeNotWatched)

		err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType3a.GetMetadata().Namespace, mockCustomSpecHashType3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType3b.GetMetadata().Namespace, mockCustomSpecHashType3b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomSpecHashTypeNotWatched = append(mockCustomSpecHashTypeNotWatched, MockCustomSpecHashTypeList{mockCustomSpecHashType3a, mockCustomSpecHashType3b}...)
		mockCustomSpecHashTypeWatched = MockCustomSpecHashTypeList{mockCustomSpecHashType4a, mockCustomSpecHashType5a}
		assertSnapshotmcshts(mockCustomSpecHashTypeWatched, mockCustomSpecHashTypeNotWatched)

		err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType4a.GetMetadata().Namespace, mockCustomSpecHashType4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType5a.GetMetadata().Namespace, mockCustomSpecHashType5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		mockCustomSpecHashTypeNotWatched = append(mockCustomSpecHashTypeNotWatched, MockCustomSpecHashTypeList{mockCustomSpecHashType5a, mockCustomSpecHashType5b}...)
		assertSnapshotmcshts(nil, mockCustomSpecHashTypeNotWatched)

		// clean up environment
		deleteNamespaces(ctx, kube, namespace3, namespace4)
		getNewNamespaces()

		/*
			Pod
		*/
		assertSnapshotpods := func(expectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList, unexpectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList) {
		drain:
			for {
				select {
				case snap = <-snapshots:
					previous = snap
					for _, expected := range expectpods {
						if _, err := snap.Pods.Find(expected.GetMetadata().Ref().Strings()); err != nil {
							continue drain
						}
					}
					for _, unexpected := range unexpectpods {
						if _, err := snap.Pods.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
							continue drain
						}
					}
					break drain
				case err := <-errs:
					Expect(err).NotTo(HaveOccurred())
				case <-time.After(time.Second * 10):
					var expectedResources map[string][]string
					var unexpectedResource map[string][]string

					if previous != nil {
						expectedResources = findNonMatchingResources(convertpodsToMetadataGetter(expectpods), convertpodsToMetadataGetter(previous.Pods))
						unexpectedResource = findMatchingResources(convertpodsToMetadataGetter(unexpectpods), convertpodsToMetadataGetter(previous.Pods))
					} else {
						expectedResources = getMapOfResources(convertpodsToMetadataGetter(expectpods))
						unexpectedResource = getMapOfResources(convertpodsToMetadataGetter(unexpectpods))
					}
					getList := func(ns string) ([]metadataGetter, error) {
						l, err := podClient.List(ns, clients.ListOpts{})
						return convertpodsToMetadataGetter(l), err
					}
					namespaceResources := getMapOfNamespaceResources(getList)
					Fail(fmt.Sprintf("expected final snapshot before 10 seconds. expected \nExpected:\n%#v\n\nUnexpected:\n%#v\n\nnamespaces:\n%#v", expectedResources, unexpectedResource, namespaceResources))
				}
			}
		}

		pod1a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod1b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		podWatched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}
		assertSnapshotpods(podWatched, nil)

		pod3a, err := podClient.Write(NewPodWithLabels(namespace1, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod3b, err := podClient.Write(NewPodWithLabels(namespace2, name3, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		podWatched = append(podWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod3a, pod3b}...)
		assertSnapshotpods(podWatched, nil)

		createNamespaceWithLabel(ctx, kube, namespace3, labels1)
		createNamespaces(ctx, kube, namespace4)

		pod4a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace3, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod4b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace4, name1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		podWatched = append(podWatched, pod4a)
		podNotWatched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod4b}
		assertSnapshotpods(podWatched, podNotWatched)

		pod5a, err := podClient.Write(NewPodWithLabels(namespace3, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		pod5b, err := podClient.Write(NewPodWithLabels(namespace4, name2, labels1), clients.WriteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		podWatched = append(podWatched, pod5a)
		podNotWatched = append(podNotWatched, pod5b)
		assertSnapshotpods(podWatched, podNotWatched)

		for _, r := range podNotWatched {
			err = podClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
		}

		err = podClient.Delete(pod1a.GetMetadata().Namespace, pod1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = podClient.Delete(pod1b.GetMetadata().Namespace, pod1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		podNotWatched = append(podNotWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}...)
		podWatched = github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod3a, pod3b, pod4a, pod5a}
		assertSnapshotpods(podWatched, podNotWatched)

		err = podClient.Delete(pod3a.GetMetadata().Namespace, pod3a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = podClient.Delete(pod3b.GetMetadata().Namespace, pod3b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		podNotWatched = append(podNotWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod3a, pod3b}...)
		podWatched = github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod4a, pod5a}
		assertSnapshotpods(podWatched, podNotWatched)

		err = podClient.Delete(pod4a.GetMetadata().Namespace, pod4a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		err = podClient.Delete(pod5a.GetMetadata().Namespace, pod5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
		Expect(err).NotTo(HaveOccurred())
		podNotWatched = append(podNotWatched, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod5a, pod5b}...)
		assertSnapshotpods(nil, podNotWatched)

		// clean up environment
		deleteNamespaces(ctx, kube, namespace3, namespace4)
		getNewNamespaces()
	}

	BeforeEach(func() {
		err := os.Setenv(statusutils.PodNamespaceEnvName, "default")
		Expect(err).NotTo(HaveOccurred())

		ctx = context.Background()
		namespace1 = helpers.RandString(8)
		namespace2 = helpers.RandString(8)
		namespace3 = helpers.RandString(8)
		namespace4 = helpers.RandString(8)
		namespace5 = helpers.RandString(8)
		namespace6 = helpers.RandString(8)

		kube = helpers.MustKubeClient()
		kubeCache, err = cache.NewKubeCoreCache(context.TODO(), kube)
		Expect(err).NotTo(HaveOccurred())
		resourceNamespaceLister = namespace.NewKubeClientCacheResourceNamespaceLister(kube, kubeCache)

		createNamespaces(ctx, kube, namespace1, namespace2)

		cfg, err = kubeutils.GetConfig("", "")
		Expect(err).NotTo(HaveOccurred())

		clientset, err = apiext.NewForConfig(cfg)
		Expect(err).NotTo(HaveOccurred())
		// SimpleMockResource Constructor
		simpleMockResourceClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}

		simpleMockResourceClient, err = NewSimpleMockResourceClient(ctx, simpleMockResourceClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// MockResource Constructor
		mockResourceClientFactory := &factory.KubeResourceClientFactory{
			Crd:         MockResourceCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(context.TODO()),
		}

		err = helpers.AddAndRegisterCrd(ctx, MockResourceCrd, clientset)
		Expect(err).NotTo(HaveOccurred())

		mockResourceClient, err = NewMockResourceClient(ctx, mockResourceClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// FakeResource Constructor
		fakeResourceClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}

		fakeResourceClient, err = NewFakeResourceClient(ctx, fakeResourceClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// AnotherMockResource Constructor
		anotherMockResourceClientFactory := &factory.KubeResourceClientFactory{
			Crd:         AnotherMockResourceCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(context.TODO()),
		}

		err = helpers.AddAndRegisterCrd(ctx, AnotherMockResourceCrd, clientset)
		Expect(err).NotTo(HaveOccurred())

		anotherMockResourceClient, err = NewAnotherMockResourceClient(ctx, anotherMockResourceClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// ClusterResource Constructor
		clusterResourceClientFactory := &factory.KubeResourceClientFactory{
			Crd:         ClusterResourceCrd,
			Cfg:         cfg,
			SharedCache: kuberc.NewKubeCache(context.TODO()),
		}

		err = helpers.AddAndRegisterCrd(ctx, ClusterResourceCrd, clientset)
		Expect(err).NotTo(HaveOccurred())

		clusterResourceClient, err = NewClusterResourceClient(ctx, clusterResourceClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// MockCustomType Constructor
		mockCustomTypeClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}

		mockCustomTypeClient, err = NewMockCustomTypeClient(ctx, mockCustomTypeClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// MockCustomSpecHashType Constructor
		mockCustomSpecHashTypeClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}

		mockCustomSpecHashTypeClient, err = NewMockCustomSpecHashTypeClient(ctx, mockCustomSpecHashTypeClientFactory)
		Expect(err).NotTo(HaveOccurred())
		// Pod Constructor
		podClientFactory := &factory.MemoryResourceClientFactory{
			Cache: memory.NewInMemoryResourceCache(),
		}

		podClient, err = github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPodClient(ctx, podClientFactory)
		Expect(err).NotTo(HaveOccurred())
		emitter = NewTestingEmitter(simpleMockResourceClient, mockResourceClient, fakeResourceClient, anotherMockResourceClient, clusterResourceClient, mockCustomTypeClient, mockCustomSpecHashTypeClient, podClient, resourceNamespaceLister)
	})
	AfterEach(func() {
		err := os.Unsetenv(statusutils.PodNamespaceEnvName)
		Expect(err).NotTo(HaveOccurred())

		kubeutils.DeleteNamespacesInParallelBlocking(ctx, kube, namespace1, namespace2)
		clusterResourceClient.Delete(name1, clients.DeleteOpts{})
		clusterResourceClient.Delete(name2, clients.DeleteOpts{})
	})

	Context("Tracking watched namespaces", func() {
		It("tracks snapshots on changes to any resource", func() {
			ctx := context.Background()
			err := emitter.Register()
			Expect(err).NotTo(HaveOccurred())

			snapshots, errs, err := emitter.Snapshots([]string{namespace1, namespace2}, clients.WatchOpts{
				Ctx:         ctx,
				RefreshRate: time.Second,
			})
			Expect(err).NotTo(HaveOccurred())

			var snap *TestingSnapshot

			/*
				SimpleMockResource
			*/

			assertSnapshotSimplemocks := func(expectSimplemocks SimpleMockResourceList, unexpectSimplemocks SimpleMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectSimplemocks {
							if _, err := snap.Simplemocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectSimplemocks {
							if _, err := snap.Simplemocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := simpleMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := simpleMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			simpleMockResource1a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource1b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotSimplemocks(SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}, nil)
			simpleMockResource2a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource2b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotSimplemocks(SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b, simpleMockResource2a, simpleMockResource2b}, nil)

			err = simpleMockResourceClient.Delete(simpleMockResource2a.GetMetadata().Namespace, simpleMockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = simpleMockResourceClient.Delete(simpleMockResource2b.GetMetadata().Namespace, simpleMockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotSimplemocks(SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}, SimpleMockResourceList{simpleMockResource2a, simpleMockResource2b})

			err = simpleMockResourceClient.Delete(simpleMockResource1a.GetMetadata().Namespace, simpleMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = simpleMockResourceClient.Delete(simpleMockResource1b.GetMetadata().Namespace, simpleMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotSimplemocks(nil, SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b, simpleMockResource2a, simpleMockResource2b})

			/*
				MockResource
			*/

			assertSnapshotMocks := func(expectMocks MockResourceList, unexpectMocks MockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectMocks {
							if _, err := snap.Mocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectMocks {
							if _, err := snap.Mocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			mockResource1a, err := mockResourceClient.Write(NewMockResource(namespace1, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource1b, err := mockResourceClient.Write(NewMockResource(namespace2, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotMocks(MockResourceList{mockResource1a, mockResource1b}, nil)
			mockResource2a, err := mockResourceClient.Write(NewMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource2b, err := mockResourceClient.Write(NewMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotMocks(MockResourceList{mockResource1a, mockResource1b, mockResource2a, mockResource2b}, nil)

			err = mockResourceClient.Delete(mockResource2a.GetMetadata().Namespace, mockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockResourceClient.Delete(mockResource2b.GetMetadata().Namespace, mockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotMocks(MockResourceList{mockResource1a, mockResource1b}, MockResourceList{mockResource2a, mockResource2b})

			err = mockResourceClient.Delete(mockResource1a.GetMetadata().Namespace, mockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockResourceClient.Delete(mockResource1b.GetMetadata().Namespace, mockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotMocks(nil, MockResourceList{mockResource1a, mockResource1b, mockResource2a, mockResource2b})

			/*
				FakeResource
			*/

			assertSnapshotFakes := func(expectFakes FakeResourceList, unexpectFakes FakeResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectFakes {
							if _, err := snap.Fakes.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectFakes {
							if _, err := snap.Fakes.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := fakeResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := fakeResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			fakeResource1a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource1b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotFakes(FakeResourceList{fakeResource1a, fakeResource1b}, nil)
			fakeResource2a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource2b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotFakes(FakeResourceList{fakeResource1a, fakeResource1b, fakeResource2a, fakeResource2b}, nil)

			err = fakeResourceClient.Delete(fakeResource2a.GetMetadata().Namespace, fakeResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = fakeResourceClient.Delete(fakeResource2b.GetMetadata().Namespace, fakeResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotFakes(FakeResourceList{fakeResource1a, fakeResource1b}, FakeResourceList{fakeResource2a, fakeResource2b})

			err = fakeResourceClient.Delete(fakeResource1a.GetMetadata().Namespace, fakeResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = fakeResourceClient.Delete(fakeResource1b.GetMetadata().Namespace, fakeResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotFakes(nil, FakeResourceList{fakeResource1a, fakeResource1b, fakeResource2a, fakeResource2b})

			/*
				AnotherMockResource
			*/

			assertSnapshotAnothermockresources := func(expectAnothermockresources AnotherMockResourceList, unexpectAnothermockresources AnotherMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := anotherMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := anotherMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			anotherMockResource1a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource1b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}, nil)
			anotherMockResource2a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource2b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b, anotherMockResource2a, anotherMockResource2b}, nil)

			err = anotherMockResourceClient.Delete(anotherMockResource2a.GetMetadata().Namespace, anotherMockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = anotherMockResourceClient.Delete(anotherMockResource2b.GetMetadata().Namespace, anotherMockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}, AnotherMockResourceList{anotherMockResource2a, anotherMockResource2b})

			err = anotherMockResourceClient.Delete(anotherMockResource1a.GetMetadata().Namespace, anotherMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = anotherMockResourceClient.Delete(anotherMockResource1b.GetMetadata().Namespace, anotherMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotAnothermockresources(nil, AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b, anotherMockResource2a, anotherMockResource2b})

			/*
				ClusterResource
			*/

			assertSnapshotClusterresources := func(expectClusterresources ClusterResourceList, unexpectClusterresources ClusterResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectClusterresources {
							if _, err := snap.Clusterresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectClusterresources {
							if _, err := snap.Clusterresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						combined, _ := clusterResourceClient.List(clients.ListOpts{})
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			clusterResource1a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotClusterresources(ClusterResourceList{clusterResource1a}, nil)
			clusterResource2a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotClusterresources(ClusterResourceList{clusterResource1a, clusterResource2a}, nil)

			err = clusterResourceClient.Delete(clusterResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotClusterresources(ClusterResourceList{clusterResource1a}, ClusterResourceList{clusterResource2a})

			err = clusterResourceClient.Delete(clusterResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotClusterresources(nil, ClusterResourceList{clusterResource1a, clusterResource2a})

			/*
				MockCustomType
			*/

			assertSnapshotmcts := func(expectmcts MockCustomTypeList, unexpectmcts MockCustomTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectmcts {
							if _, err := snap.Mcts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcts {
							if _, err := snap.Mcts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockCustomTypeClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockCustomTypeClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			mockCustomType1a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType1b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcts(MockCustomTypeList{mockCustomType1a, mockCustomType1b}, nil)
			mockCustomType2a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType2b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcts(MockCustomTypeList{mockCustomType1a, mockCustomType1b, mockCustomType2a, mockCustomType2b}, nil)

			err = mockCustomTypeClient.Delete(mockCustomType2a.GetMetadata().Namespace, mockCustomType2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomTypeClient.Delete(mockCustomType2b.GetMetadata().Namespace, mockCustomType2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcts(MockCustomTypeList{mockCustomType1a, mockCustomType1b}, MockCustomTypeList{mockCustomType2a, mockCustomType2b})

			err = mockCustomTypeClient.Delete(mockCustomType1a.GetMetadata().Namespace, mockCustomType1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomTypeClient.Delete(mockCustomType1b.GetMetadata().Namespace, mockCustomType1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcts(nil, MockCustomTypeList{mockCustomType1a, mockCustomType1b, mockCustomType2a, mockCustomType2b})

			/*
				MockCustomSpecHashType
			*/

			assertSnapshotmcshts := func(expectmcshts MockCustomSpecHashTypeList, unexpectmcshts MockCustomSpecHashTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectmcshts {
							if _, err := snap.Mcshts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcshts {
							if _, err := snap.Mcshts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockCustomSpecHashTypeClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockCustomSpecHashTypeClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			mockCustomSpecHashType1a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace1, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashType1b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace2, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcshts(MockCustomSpecHashTypeList{mockCustomSpecHashType1a, mockCustomSpecHashType1b}, nil)
			mockCustomSpecHashType2a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashType2b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcshts(MockCustomSpecHashTypeList{mockCustomSpecHashType1a, mockCustomSpecHashType1b, mockCustomSpecHashType2a, mockCustomSpecHashType2b}, nil)

			err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType2a.GetMetadata().Namespace, mockCustomSpecHashType2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType2b.GetMetadata().Namespace, mockCustomSpecHashType2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcshts(MockCustomSpecHashTypeList{mockCustomSpecHashType1a, mockCustomSpecHashType1b}, MockCustomSpecHashTypeList{mockCustomSpecHashType2a, mockCustomSpecHashType2b})

			err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType1a.GetMetadata().Namespace, mockCustomSpecHashType1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType1b.GetMetadata().Namespace, mockCustomSpecHashType1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotmcshts(nil, MockCustomSpecHashTypeList{mockCustomSpecHashType1a, mockCustomSpecHashType1b, mockCustomSpecHashType2a, mockCustomSpecHashType2b})

			/*
				Pod
			*/

			assertSnapshotpods := func(expectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList, unexpectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectpods {
							if _, err := snap.Pods.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectpods {
							if _, err := snap.Pods.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := podClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := podClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}
			pod1a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod1b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotpods(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}, nil)
			pod2a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod2b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotpods(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b, pod2a, pod2b}, nil)

			err = podClient.Delete(pod2a.GetMetadata().Namespace, pod2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = podClient.Delete(pod2b.GetMetadata().Namespace, pod2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotpods(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2a, pod2b})

			err = podClient.Delete(pod1a.GetMetadata().Namespace, pod1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = podClient.Delete(pod1b.GetMetadata().Namespace, pod1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			assertSnapshotpods(nil, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b, pod2a, pod2b})
		})

		It("should be able to track all resources that are on labeled namespaces", func() {
			runNamespacedSelectorsWithWatchNamespaces()
		})
	})

	Context("Tracking empty watched namespaces", func() {
		It("tracks snapshots on changes to any resource using AllNamespace", func() {
			ctx := context.Background()
			err := emitter.Register()
			Expect(err).NotTo(HaveOccurred())

			snapshots, errs, err := emitter.Snapshots([]string{""}, clients.WatchOpts{
				Ctx:         ctx,
				RefreshRate: time.Second,
			})
			Expect(err).NotTo(HaveOccurred())

			var snap *TestingSnapshot

			/*
				SimpleMockResource
			*/

			assertSnapshotSimplemocks := func(expectSimplemocks SimpleMockResourceList, unexpectSimplemocks SimpleMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectSimplemocks {
							if _, err := snap.Simplemocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectSimplemocks {
							if _, err := snap.Simplemocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := simpleMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := simpleMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			simpleMockResource1a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource1b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotSimplemocks(SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}, nil)

			simpleMockResource2a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource2b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotSimplemocks(SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b, simpleMockResource2a, simpleMockResource2b}, nil)

			err = simpleMockResourceClient.Delete(simpleMockResource2a.GetMetadata().Namespace, simpleMockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = simpleMockResourceClient.Delete(simpleMockResource2b.GetMetadata().Namespace, simpleMockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotSimplemocks(SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}, SimpleMockResourceList{simpleMockResource2a, simpleMockResource2b})

			err = simpleMockResourceClient.Delete(simpleMockResource1a.GetMetadata().Namespace, simpleMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = simpleMockResourceClient.Delete(simpleMockResource1b.GetMetadata().Namespace, simpleMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotSimplemocks(nil, SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b, simpleMockResource2a, simpleMockResource2b})

			/*
				MockResource
			*/

			assertSnapshotMocks := func(expectMocks MockResourceList, unexpectMocks MockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectMocks {
							if _, err := snap.Mocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectMocks {
							if _, err := snap.Mocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			mockResource1a, err := mockResourceClient.Write(NewMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource1b, err := mockResourceClient.Write(NewMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotMocks(MockResourceList{mockResource1a, mockResource1b}, nil)

			mockResource2a, err := mockResourceClient.Write(NewMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource2b, err := mockResourceClient.Write(NewMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotMocks(MockResourceList{mockResource1a, mockResource1b, mockResource2a, mockResource2b}, nil)

			err = mockResourceClient.Delete(mockResource2a.GetMetadata().Namespace, mockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockResourceClient.Delete(mockResource2b.GetMetadata().Namespace, mockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotMocks(MockResourceList{mockResource1a, mockResource1b}, MockResourceList{mockResource2a, mockResource2b})

			err = mockResourceClient.Delete(mockResource1a.GetMetadata().Namespace, mockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockResourceClient.Delete(mockResource1b.GetMetadata().Namespace, mockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotMocks(nil, MockResourceList{mockResource1a, mockResource1b, mockResource2a, mockResource2b})

			/*
				FakeResource
			*/

			assertSnapshotFakes := func(expectFakes FakeResourceList, unexpectFakes FakeResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectFakes {
							if _, err := snap.Fakes.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectFakes {
							if _, err := snap.Fakes.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := fakeResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := fakeResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			fakeResource1a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource1b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotFakes(FakeResourceList{fakeResource1a, fakeResource1b}, nil)

			fakeResource2a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource2b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotFakes(FakeResourceList{fakeResource1a, fakeResource1b, fakeResource2a, fakeResource2b}, nil)

			err = fakeResourceClient.Delete(fakeResource2a.GetMetadata().Namespace, fakeResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = fakeResourceClient.Delete(fakeResource2b.GetMetadata().Namespace, fakeResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotFakes(FakeResourceList{fakeResource1a, fakeResource1b}, FakeResourceList{fakeResource2a, fakeResource2b})

			err = fakeResourceClient.Delete(fakeResource1a.GetMetadata().Namespace, fakeResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = fakeResourceClient.Delete(fakeResource1b.GetMetadata().Namespace, fakeResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotFakes(nil, FakeResourceList{fakeResource1a, fakeResource1b, fakeResource2a, fakeResource2b})

			/*
				AnotherMockResource
			*/

			assertSnapshotAnothermockresources := func(expectAnothermockresources AnotherMockResourceList, unexpectAnothermockresources AnotherMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := anotherMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := anotherMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			anotherMockResource1a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource1b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}, nil)

			anotherMockResource2a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource2b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b, anotherMockResource2a, anotherMockResource2b}, nil)

			err = anotherMockResourceClient.Delete(anotherMockResource2a.GetMetadata().Namespace, anotherMockResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = anotherMockResourceClient.Delete(anotherMockResource2b.GetMetadata().Namespace, anotherMockResource2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}, AnotherMockResourceList{anotherMockResource2a, anotherMockResource2b})

			err = anotherMockResourceClient.Delete(anotherMockResource1a.GetMetadata().Namespace, anotherMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = anotherMockResourceClient.Delete(anotherMockResource1b.GetMetadata().Namespace, anotherMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotAnothermockresources(nil, AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b, anotherMockResource2a, anotherMockResource2b})

			/*
				ClusterResource
			*/

			assertSnapshotClusterresources := func(expectClusterresources ClusterResourceList, unexpectClusterresources ClusterResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectClusterresources {
							if _, err := snap.Clusterresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectClusterresources {
							if _, err := snap.Clusterresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						combined, _ := clusterResourceClient.List(clients.ListOpts{})
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			clusterResource1a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotClusterresources(ClusterResourceList{clusterResource1a}, nil)

			clusterResource2a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotClusterresources(ClusterResourceList{clusterResource1a, clusterResource2a}, nil)

			err = clusterResourceClient.Delete(clusterResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotClusterresources(ClusterResourceList{clusterResource1a}, ClusterResourceList{clusterResource2a})

			err = clusterResourceClient.Delete(clusterResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotClusterresources(nil, ClusterResourceList{clusterResource1a, clusterResource2a})

			/*
				MockCustomType
			*/

			assertSnapshotmcts := func(expectmcts MockCustomTypeList, unexpectmcts MockCustomTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectmcts {
							if _, err := snap.Mcts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcts {
							if _, err := snap.Mcts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockCustomTypeClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockCustomTypeClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			mockCustomType1a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType1b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotmcts(MockCustomTypeList{mockCustomType1a, mockCustomType1b}, nil)

			mockCustomType2a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType2b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotmcts(MockCustomTypeList{mockCustomType1a, mockCustomType1b, mockCustomType2a, mockCustomType2b}, nil)

			err = mockCustomTypeClient.Delete(mockCustomType2a.GetMetadata().Namespace, mockCustomType2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomTypeClient.Delete(mockCustomType2b.GetMetadata().Namespace, mockCustomType2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotmcts(MockCustomTypeList{mockCustomType1a, mockCustomType1b}, MockCustomTypeList{mockCustomType2a, mockCustomType2b})

			err = mockCustomTypeClient.Delete(mockCustomType1a.GetMetadata().Namespace, mockCustomType1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomTypeClient.Delete(mockCustomType1b.GetMetadata().Namespace, mockCustomType1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotmcts(nil, MockCustomTypeList{mockCustomType1a, mockCustomType1b, mockCustomType2a, mockCustomType2b})

			/*
				MockCustomSpecHashType
			*/

			assertSnapshotmcshts := func(expectmcshts MockCustomSpecHashTypeList, unexpectmcshts MockCustomSpecHashTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectmcshts {
							if _, err := snap.Mcshts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcshts {
							if _, err := snap.Mcshts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockCustomSpecHashTypeClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockCustomSpecHashTypeClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			mockCustomSpecHashType1a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashType1b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotmcshts(MockCustomSpecHashTypeList{mockCustomSpecHashType1a, mockCustomSpecHashType1b}, nil)

			mockCustomSpecHashType2a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashType2b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotmcshts(MockCustomSpecHashTypeList{mockCustomSpecHashType1a, mockCustomSpecHashType1b, mockCustomSpecHashType2a, mockCustomSpecHashType2b}, nil)

			err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType2a.GetMetadata().Namespace, mockCustomSpecHashType2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType2b.GetMetadata().Namespace, mockCustomSpecHashType2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotmcshts(MockCustomSpecHashTypeList{mockCustomSpecHashType1a, mockCustomSpecHashType1b}, MockCustomSpecHashTypeList{mockCustomSpecHashType2a, mockCustomSpecHashType2b})

			err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType1a.GetMetadata().Namespace, mockCustomSpecHashType1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType1b.GetMetadata().Namespace, mockCustomSpecHashType1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotmcshts(nil, MockCustomSpecHashTypeList{mockCustomSpecHashType1a, mockCustomSpecHashType1b, mockCustomSpecHashType2a, mockCustomSpecHashType2b})

			/*
				Pod
			*/

			assertSnapshotpods := func(expectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList, unexpectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectpods {
							if _, err := snap.Pods.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectpods {
							if _, err := snap.Pods.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := podClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := podClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			pod1a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod1b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotpods(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}, nil)

			pod2a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod2b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotpods(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b, pod2a, pod2b}, nil)

			err = podClient.Delete(pod2a.GetMetadata().Namespace, pod2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = podClient.Delete(pod2b.GetMetadata().Namespace, pod2b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotpods(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2a, pod2b})

			err = podClient.Delete(pod1a.GetMetadata().Namespace, pod1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = podClient.Delete(pod1b.GetMetadata().Namespace, pod1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotpods(nil, github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b, pod2a, pod2b})
		})

		It("should be able to track resources only made with the matching labels", func() {
			ctx := context.Background()
			err := emitter.Register()
			Expect(err).NotTo(HaveOccurred())

			snapshots, errs, err := emitter.Snapshots([]string{""}, clients.WatchOpts{
				Ctx:                ctx,
				RefreshRate:        time.Second,
				ExpressionSelector: labelExpression1,
			})
			Expect(err).NotTo(HaveOccurred())

			var snap *TestingSnapshot
			var previous *TestingSnapshot

			/*
				SimpleMockResource
			*/

			assertSnapshotSimplemocks := func(expectSimplemocks SimpleMockResourceList, unexpectSimplemocks SimpleMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						previous = snap
						for _, expected := range expectSimplemocks {
							if _, err := snap.Simplemocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectSimplemocks {
							if _, err := snap.Simplemocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):

						var buffer bytes.Buffer
						if previous != nil {
							for _, sn := range previous.Simplemocks {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						} else {
							buffer.WriteString("****** NO PREVIOUS SNAP ********")
						}
						namespaces := []string{namespace1, namespace2, namespace3, namespace4, namespace5, namespace6}
						for i, ns := range namespaces {
							buffer.WriteString(fmt.Sprintf("*********** %d::%v ***********", i, ns))
							list, _ := simpleMockResourceClient.List(ns, clients.ListOpts{})
							for _, sn := range list {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v   ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						}
						buffer.WriteString("********** EXPECTED *********")
						for _, snap := range expectSimplemocks {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}
						buffer.WriteString("********* UNEXPECTED ***********")
						for _, snap := range unexpectSimplemocks {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}

						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", buffer.String()))
					}
				}
			}

			simpleMockResource1a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource1b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResourceNotWatched := SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			simpleMockResource2a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource2b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResourceWatched := SimpleMockResourceList{simpleMockResource2a, simpleMockResource2b}
			assertSnapshotSimplemocks(simpleMockResourceWatched, simpleMockResourceNotWatched)

			createNamespaces(ctx, kube, namespace5)
			createNamespaceWithLabel(ctx, kube, namespace6, labels1)

			simpleMockResource5a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace5, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource5b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace6, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResourceNotWatched = append(simpleMockResourceNotWatched, simpleMockResource5a)
			simpleMockResourceWatched = append(simpleMockResourceWatched, simpleMockResource5b)
			assertSnapshotSimplemocks(simpleMockResourceWatched, simpleMockResourceNotWatched)

			simpleMockResource7a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace5, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource7b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace6, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResourceNotWatched = append(simpleMockResourceNotWatched, simpleMockResource7a)
			simpleMockResourceWatched = append(simpleMockResourceWatched, simpleMockResource7b)
			assertSnapshotSimplemocks(simpleMockResourceWatched, simpleMockResourceNotWatched)

			for _, r := range simpleMockResourceNotWatched {
				err = simpleMockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}

			for _, r := range simpleMockResourceWatched {
				err = simpleMockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				simpleMockResourceNotWatched = append(simpleMockResourceNotWatched, r)
			}
			assertSnapshotSimplemocks(nil, simpleMockResourceNotWatched)

			// clean up environment
			deleteNamespaces(ctx, kube, namespace3, namespace4, namespace5, namespace6)
			getNewNamespaces()

			/*
				MockResource
			*/

			assertSnapshotMocks := func(expectMocks MockResourceList, unexpectMocks MockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						previous = snap
						for _, expected := range expectMocks {
							if _, err := snap.Mocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectMocks {
							if _, err := snap.Mocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):

						var buffer bytes.Buffer
						if previous != nil {
							for _, sn := range previous.Mocks {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						} else {
							buffer.WriteString("****** NO PREVIOUS SNAP ********")
						}
						namespaces := []string{namespace1, namespace2, namespace3, namespace4, namespace5, namespace6}
						for i, ns := range namespaces {
							buffer.WriteString(fmt.Sprintf("*********** %d::%v ***********", i, ns))
							list, _ := mockResourceClient.List(ns, clients.ListOpts{})
							for _, sn := range list {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v   ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						}
						buffer.WriteString("********** EXPECTED *********")
						for _, snap := range expectMocks {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}
						buffer.WriteString("********* UNEXPECTED ***********")
						for _, snap := range unexpectMocks {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}

						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", buffer.String()))
					}
				}
			}

			mockResource1a, err := mockResourceClient.Write(NewMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource1b, err := mockResourceClient.Write(NewMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResourceNotWatched := MockResourceList{mockResource1a, mockResource1b}

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			mockResource2a, err := mockResourceClient.Write(NewMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource2b, err := mockResourceClient.Write(NewMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResourceWatched := MockResourceList{mockResource2a, mockResource2b}
			assertSnapshotMocks(mockResourceWatched, mockResourceNotWatched)

			createNamespaces(ctx, kube, namespace5)
			createNamespaceWithLabel(ctx, kube, namespace6, labels1)

			mockResource5a, err := mockResourceClient.Write(NewMockResource(namespace5, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource5b, err := mockResourceClient.Write(NewMockResource(namespace6, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResourceNotWatched = append(mockResourceNotWatched, mockResource5a)
			mockResourceWatched = append(mockResourceWatched, mockResource5b)
			assertSnapshotMocks(mockResourceWatched, mockResourceNotWatched)

			mockResource7a, err := mockResourceClient.Write(NewMockResource(namespace5, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource7b, err := mockResourceClient.Write(NewMockResource(namespace6, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResourceNotWatched = append(mockResourceNotWatched, mockResource7a)
			mockResourceWatched = append(mockResourceWatched, mockResource7b)
			assertSnapshotMocks(mockResourceWatched, mockResourceNotWatched)

			for _, r := range mockResourceNotWatched {
				err = mockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}

			for _, r := range mockResourceWatched {
				err = mockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				mockResourceNotWatched = append(mockResourceNotWatched, r)
			}
			assertSnapshotMocks(nil, mockResourceNotWatched)

			// clean up environment
			deleteNamespaces(ctx, kube, namespace3, namespace4, namespace5, namespace6)
			getNewNamespaces()

			/*
				FakeResource
			*/

			assertSnapshotFakes := func(expectFakes FakeResourceList, unexpectFakes FakeResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						previous = snap
						for _, expected := range expectFakes {
							if _, err := snap.Fakes.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectFakes {
							if _, err := snap.Fakes.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):

						var buffer bytes.Buffer
						if previous != nil {
							for _, sn := range previous.Fakes {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						} else {
							buffer.WriteString("****** NO PREVIOUS SNAP ********")
						}
						namespaces := []string{namespace1, namespace2, namespace3, namespace4, namespace5, namespace6}
						for i, ns := range namespaces {
							buffer.WriteString(fmt.Sprintf("*********** %d::%v ***********", i, ns))
							list, _ := fakeResourceClient.List(ns, clients.ListOpts{})
							for _, sn := range list {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v   ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						}
						buffer.WriteString("********** EXPECTED *********")
						for _, snap := range expectFakes {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}
						buffer.WriteString("********* UNEXPECTED ***********")
						for _, snap := range unexpectFakes {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}

						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", buffer.String()))
					}
				}
			}

			fakeResource1a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource1b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResourceNotWatched := FakeResourceList{fakeResource1a, fakeResource1b}

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			fakeResource2a, err := fakeResourceClient.Write(NewFakeResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource2b, err := fakeResourceClient.Write(NewFakeResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResourceWatched := FakeResourceList{fakeResource2a, fakeResource2b}
			assertSnapshotFakes(fakeResourceWatched, fakeResourceNotWatched)

			createNamespaces(ctx, kube, namespace5)
			createNamespaceWithLabel(ctx, kube, namespace6, labels1)

			fakeResource5a, err := fakeResourceClient.Write(NewFakeResource(namespace5, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource5b, err := fakeResourceClient.Write(NewFakeResource(namespace6, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResourceNotWatched = append(fakeResourceNotWatched, fakeResource5a)
			fakeResourceWatched = append(fakeResourceWatched, fakeResource5b)
			assertSnapshotFakes(fakeResourceWatched, fakeResourceNotWatched)

			fakeResource7a, err := fakeResourceClient.Write(NewFakeResource(namespace5, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource7b, err := fakeResourceClient.Write(NewFakeResource(namespace6, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResourceNotWatched = append(fakeResourceNotWatched, fakeResource7a)
			fakeResourceWatched = append(fakeResourceWatched, fakeResource7b)
			assertSnapshotFakes(fakeResourceWatched, fakeResourceNotWatched)

			for _, r := range fakeResourceNotWatched {
				err = fakeResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}

			for _, r := range fakeResourceWatched {
				err = fakeResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				fakeResourceNotWatched = append(fakeResourceNotWatched, r)
			}
			assertSnapshotFakes(nil, fakeResourceNotWatched)

			// clean up environment
			deleteNamespaces(ctx, kube, namespace3, namespace4, namespace5, namespace6)
			getNewNamespaces()

			/*
				AnotherMockResource
			*/

			assertSnapshotAnothermockresources := func(expectAnothermockresources AnotherMockResourceList, unexpectAnothermockresources AnotherMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						previous = snap
						for _, expected := range expectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):

						var buffer bytes.Buffer
						if previous != nil {
							for _, sn := range previous.Anothermockresources {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						} else {
							buffer.WriteString("****** NO PREVIOUS SNAP ********")
						}
						namespaces := []string{namespace1, namespace2, namespace3, namespace4, namespace5, namespace6}
						for i, ns := range namespaces {
							buffer.WriteString(fmt.Sprintf("*********** %d::%v ***********", i, ns))
							list, _ := anotherMockResourceClient.List(ns, clients.ListOpts{})
							for _, sn := range list {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v   ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						}
						buffer.WriteString("********** EXPECTED *********")
						for _, snap := range expectAnothermockresources {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}
						buffer.WriteString("********* UNEXPECTED ***********")
						for _, snap := range unexpectAnothermockresources {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}

						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", buffer.String()))
					}
				}
			}

			anotherMockResource1a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource1b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResourceNotWatched := AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			anotherMockResource2a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource2b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResourceWatched := AnotherMockResourceList{anotherMockResource2a, anotherMockResource2b}
			assertSnapshotAnothermockresources(anotherMockResourceWatched, anotherMockResourceNotWatched)

			createNamespaces(ctx, kube, namespace5)
			createNamespaceWithLabel(ctx, kube, namespace6, labels1)

			anotherMockResource5a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace5, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource5b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace6, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResourceNotWatched = append(anotherMockResourceNotWatched, anotherMockResource5a)
			anotherMockResourceWatched = append(anotherMockResourceWatched, anotherMockResource5b)
			assertSnapshotAnothermockresources(anotherMockResourceWatched, anotherMockResourceNotWatched)

			anotherMockResource7a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace5, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource7b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace6, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResourceNotWatched = append(anotherMockResourceNotWatched, anotherMockResource7a)
			anotherMockResourceWatched = append(anotherMockResourceWatched, anotherMockResource7b)
			assertSnapshotAnothermockresources(anotherMockResourceWatched, anotherMockResourceNotWatched)

			for _, r := range anotherMockResourceNotWatched {
				err = anotherMockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}

			for _, r := range anotherMockResourceWatched {
				err = anotherMockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				anotherMockResourceNotWatched = append(anotherMockResourceNotWatched, r)
			}
			assertSnapshotAnothermockresources(nil, anotherMockResourceNotWatched)

			// clean up environment
			deleteNamespaces(ctx, kube, namespace3, namespace4, namespace5, namespace6)
			getNewNamespaces()

			/*
				ClusterResource
			*/

			assertSnapshotClusterresources := func(expectClusterresources ClusterResourceList, unexpectClusterresources ClusterResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						previous = snap
						for _, expected := range expectClusterresources {
							if _, err := snap.Clusterresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectClusterresources {
							if _, err := snap.Clusterresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						combined, _ := clusterResourceClient.List(clients.ListOpts{})
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			clusterResource1a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			clusterResourceWatched := ClusterResourceList{clusterResource1a}
			assertSnapshotClusterresources(clusterResourceWatched, nil)

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			clusterResource2a, err := clusterResourceClient.Write(NewClusterResource(namespace3, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			clusterResourceWatched = append(clusterResourceWatched, clusterResource2a)
			assertSnapshotClusterresources(clusterResourceWatched, nil)

			createNamespaces(ctx, kube, namespace5)
			createNamespaceWithLabel(ctx, kube, namespace6, labels1)

			clusterResource5a, err := clusterResourceClient.Write(NewClusterResource(namespace5, name5), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			clusterResourceWatched = append(clusterResourceWatched, clusterResource5a)
			assertSnapshotClusterresources(clusterResourceWatched, nil)

			err = clusterResourceClient.Delete(clusterResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			clusterResourceWatched = ClusterResourceList{clusterResource2a, clusterResource5a}
			clusterResourceNotWatched := ClusterResourceList{clusterResource1a}
			assertSnapshotClusterresources(clusterResourceWatched, clusterResourceNotWatched)

			err = clusterResourceClient.Delete(clusterResource2a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			clusterResourceWatched = ClusterResourceList{clusterResource5a}
			clusterResourceNotWatched = append(clusterResourceNotWatched, clusterResource2a)
			assertSnapshotClusterresources(clusterResourceWatched, clusterResourceNotWatched)

			err = clusterResourceClient.Delete(clusterResource5a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			clusterResourceNotWatched = append(clusterResourceNotWatched, clusterResource5a)
			assertSnapshotClusterresources(nil, clusterResourceNotWatched)

			// clean up environment
			deleteNamespaces(ctx, kube, namespace3, namespace4, namespace5, namespace6)
			getNewNamespaces()

			/*
				MockCustomType
			*/

			assertSnapshotmcts := func(expectmcts MockCustomTypeList, unexpectmcts MockCustomTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						previous = snap
						for _, expected := range expectmcts {
							if _, err := snap.Mcts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcts {
							if _, err := snap.Mcts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):

						var buffer bytes.Buffer
						if previous != nil {
							for _, sn := range previous.Mcts {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						} else {
							buffer.WriteString("****** NO PREVIOUS SNAP ********")
						}
						namespaces := []string{namespace1, namespace2, namespace3, namespace4, namespace5, namespace6}
						for i, ns := range namespaces {
							buffer.WriteString(fmt.Sprintf("*********** %d::%v ***********", i, ns))
							list, _ := mockCustomTypeClient.List(ns, clients.ListOpts{})
							for _, sn := range list {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v   ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						}
						buffer.WriteString("********** EXPECTED *********")
						for _, snap := range expectmcts {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}
						buffer.WriteString("********* UNEXPECTED ***********")
						for _, snap := range unexpectmcts {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}

						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", buffer.String()))
					}
				}
			}

			mockCustomType1a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType1b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomTypeNotWatched := MockCustomTypeList{mockCustomType1a, mockCustomType1b}

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			mockCustomType2a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType2b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomTypeWatched := MockCustomTypeList{mockCustomType2a, mockCustomType2b}
			assertSnapshotmcts(mockCustomTypeWatched, mockCustomTypeNotWatched)

			createNamespaces(ctx, kube, namespace5)
			createNamespaceWithLabel(ctx, kube, namespace6, labels1)

			mockCustomType5a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace5, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType5b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace6, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomTypeNotWatched = append(mockCustomTypeNotWatched, mockCustomType5a)
			mockCustomTypeWatched = append(mockCustomTypeWatched, mockCustomType5b)
			assertSnapshotmcts(mockCustomTypeWatched, mockCustomTypeNotWatched)

			mockCustomType7a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace5, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType7b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace6, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomTypeNotWatched = append(mockCustomTypeNotWatched, mockCustomType7a)
			mockCustomTypeWatched = append(mockCustomTypeWatched, mockCustomType7b)
			assertSnapshotmcts(mockCustomTypeWatched, mockCustomTypeNotWatched)

			for _, r := range mockCustomTypeNotWatched {
				err = mockCustomTypeClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}

			for _, r := range mockCustomTypeWatched {
				err = mockCustomTypeClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				mockCustomTypeNotWatched = append(mockCustomTypeNotWatched, r)
			}
			assertSnapshotmcts(nil, mockCustomTypeNotWatched)

			// clean up environment
			deleteNamespaces(ctx, kube, namespace3, namespace4, namespace5, namespace6)
			getNewNamespaces()

			/*
				MockCustomSpecHashType
			*/

			assertSnapshotmcshts := func(expectmcshts MockCustomSpecHashTypeList, unexpectmcshts MockCustomSpecHashTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						previous = snap
						for _, expected := range expectmcshts {
							if _, err := snap.Mcshts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcshts {
							if _, err := snap.Mcshts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):

						var buffer bytes.Buffer
						if previous != nil {
							for _, sn := range previous.Mcshts {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						} else {
							buffer.WriteString("****** NO PREVIOUS SNAP ********")
						}
						namespaces := []string{namespace1, namespace2, namespace3, namespace4, namespace5, namespace6}
						for i, ns := range namespaces {
							buffer.WriteString(fmt.Sprintf("*********** %d::%v ***********", i, ns))
							list, _ := mockCustomSpecHashTypeClient.List(ns, clients.ListOpts{})
							for _, sn := range list {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v   ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						}
						buffer.WriteString("********** EXPECTED *********")
						for _, snap := range expectmcshts {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}
						buffer.WriteString("********* UNEXPECTED ***********")
						for _, snap := range unexpectmcshts {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}

						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", buffer.String()))
					}
				}
			}

			mockCustomSpecHashType1a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashType1b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashTypeNotWatched := MockCustomSpecHashTypeList{mockCustomSpecHashType1a, mockCustomSpecHashType1b}

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			mockCustomSpecHashType2a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashType2b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashTypeWatched := MockCustomSpecHashTypeList{mockCustomSpecHashType2a, mockCustomSpecHashType2b}
			assertSnapshotmcshts(mockCustomSpecHashTypeWatched, mockCustomSpecHashTypeNotWatched)

			createNamespaces(ctx, kube, namespace5)
			createNamespaceWithLabel(ctx, kube, namespace6, labels1)

			mockCustomSpecHashType5a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace5, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashType5b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace6, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashTypeNotWatched = append(mockCustomSpecHashTypeNotWatched, mockCustomSpecHashType5a)
			mockCustomSpecHashTypeWatched = append(mockCustomSpecHashTypeWatched, mockCustomSpecHashType5b)
			assertSnapshotmcshts(mockCustomSpecHashTypeWatched, mockCustomSpecHashTypeNotWatched)

			mockCustomSpecHashType7a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace5, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashType7b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace6, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashTypeNotWatched = append(mockCustomSpecHashTypeNotWatched, mockCustomSpecHashType7a)
			mockCustomSpecHashTypeWatched = append(mockCustomSpecHashTypeWatched, mockCustomSpecHashType7b)
			assertSnapshotmcshts(mockCustomSpecHashTypeWatched, mockCustomSpecHashTypeNotWatched)

			for _, r := range mockCustomSpecHashTypeNotWatched {
				err = mockCustomSpecHashTypeClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}

			for _, r := range mockCustomSpecHashTypeWatched {
				err = mockCustomSpecHashTypeClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				mockCustomSpecHashTypeNotWatched = append(mockCustomSpecHashTypeNotWatched, r)
			}
			assertSnapshotmcshts(nil, mockCustomSpecHashTypeNotWatched)

			// clean up environment
			deleteNamespaces(ctx, kube, namespace3, namespace4, namespace5, namespace6)
			getNewNamespaces()

			/*
				Pod
			*/

			assertSnapshotpods := func(expectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList, unexpectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						previous = snap
						for _, expected := range expectpods {
							if _, err := snap.Pods.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectpods {
							if _, err := snap.Pods.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):

						var buffer bytes.Buffer
						if previous != nil {
							for _, sn := range previous.Pods {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						} else {
							buffer.WriteString("****** NO PREVIOUS SNAP ********")
						}
						namespaces := []string{namespace1, namespace2, namespace3, namespace4, namespace5, namespace6}
						for i, ns := range namespaces {
							buffer.WriteString(fmt.Sprintf("*********** %d::%v ***********", i, ns))
							list, _ := podClient.List(ns, clients.ListOpts{})
							for _, sn := range list {
								buffer.WriteString(fmt.Sprintf("namespace: %v name: %v   ", sn.GetMetadata().Namespace, sn.GetMetadata().Name))
								buffer.WriteByte('\n')
							}
						}
						buffer.WriteString("********** EXPECTED *********")
						for _, snap := range expectpods {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}
						buffer.WriteString("********* UNEXPECTED ***********")
						for _, snap := range unexpectpods {
							buffer.WriteString(fmt.Sprintf("namespace: %v name: %v    ", snap.GetMetadata().Namespace, snap.GetMetadata().Name))
						}

						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", buffer.String()))
					}
				}
			}

			pod1a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod1b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			podNotWatched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			pod2a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod2b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			podWatched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2a, pod2b}
			assertSnapshotpods(podWatched, podNotWatched)

			createNamespaces(ctx, kube, namespace5)
			createNamespaceWithLabel(ctx, kube, namespace6, labels1)

			pod5a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace5, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod5b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace6, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			podNotWatched = append(podNotWatched, pod5a)
			podWatched = append(podWatched, pod5b)
			assertSnapshotpods(podWatched, podNotWatched)

			pod7a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace5, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod7b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace6, name4), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			podNotWatched = append(podNotWatched, pod7a)
			podWatched = append(podWatched, pod7b)
			assertSnapshotpods(podWatched, podNotWatched)

			for _, r := range podNotWatched {
				err = podClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
			}

			for _, r := range podWatched {
				err = podClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				podNotWatched = append(podNotWatched, r)
			}
			assertSnapshotpods(nil, podNotWatched)

			// clean up environment
			deleteNamespaces(ctx, kube, namespace3, namespace4, namespace5, namespace6)
			getNewNamespaces()
		})
	})

	Context("Tracking resources on namespaces that are deleted", func() {
		It("Should not contain resources from a deleted namespace", func() {
			ctx := context.Background()
			err := emitter.Register()
			Expect(err).NotTo(HaveOccurred())

			snapshots, errs, err := emitter.Snapshots([]string{""}, clients.WatchOpts{
				Ctx:         ctx,
				RefreshRate: time.Second,
			})
			Expect(err).NotTo(HaveOccurred())

			var snap *TestingSnapshot

			/*
				SimpleMockResource
			*/
			assertSnapshotSimplemocks := func(expectSimplemocks SimpleMockResourceList, unexpectSimplemocks SimpleMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectSimplemocks {
							if _, err := snap.Simplemocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectSimplemocks {
							if _, err := snap.Simplemocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := simpleMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := simpleMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			simpleMockResource1a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource1b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResourceWatched := SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}
			assertSnapshotSimplemocks(simpleMockResourceWatched, nil)
			err = simpleMockResourceClient.Delete(simpleMockResource1a.GetMetadata().Namespace, simpleMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = simpleMockResourceClient.Delete(simpleMockResource1b.GetMetadata().Namespace, simpleMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			simpleMockResourceNotWatched := SimpleMockResourceList{simpleMockResource1a, simpleMockResource1b}
			assertSnapshotSimplemocks(nil, simpleMockResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace1, namespace2)

			getNewNamespaces1and2()
			createNamespaces(ctx, kube, namespace1, namespace2)

			/*
				MockResource
			*/
			assertSnapshotMocks := func(expectMocks MockResourceList, unexpectMocks MockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectMocks {
							if _, err := snap.Mocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectMocks {
							if _, err := snap.Mocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			mockResource1a, err := mockResourceClient.Write(NewMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource1b, err := mockResourceClient.Write(NewMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResourceWatched := MockResourceList{mockResource1a, mockResource1b}
			assertSnapshotMocks(mockResourceWatched, nil)
			err = mockResourceClient.Delete(mockResource1a.GetMetadata().Namespace, mockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockResourceClient.Delete(mockResource1b.GetMetadata().Namespace, mockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			mockResourceNotWatched := MockResourceList{mockResource1a, mockResource1b}
			assertSnapshotMocks(nil, mockResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace1, namespace2)

			getNewNamespaces1and2()
			createNamespaces(ctx, kube, namespace1, namespace2)

			/*
				FakeResource
			*/
			assertSnapshotFakes := func(expectFakes FakeResourceList, unexpectFakes FakeResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectFakes {
							if _, err := snap.Fakes.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectFakes {
							if _, err := snap.Fakes.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := fakeResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := fakeResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			fakeResource1a, err := fakeResourceClient.Write(NewFakeResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource1b, err := fakeResourceClient.Write(NewFakeResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResourceWatched := FakeResourceList{fakeResource1a, fakeResource1b}
			assertSnapshotFakes(fakeResourceWatched, nil)
			err = fakeResourceClient.Delete(fakeResource1a.GetMetadata().Namespace, fakeResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = fakeResourceClient.Delete(fakeResource1b.GetMetadata().Namespace, fakeResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			fakeResourceNotWatched := FakeResourceList{fakeResource1a, fakeResource1b}
			assertSnapshotFakes(nil, fakeResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace1, namespace2)

			getNewNamespaces1and2()
			createNamespaces(ctx, kube, namespace1, namespace2)

			/*
				AnotherMockResource
			*/
			assertSnapshotAnothermockresources := func(expectAnothermockresources AnotherMockResourceList, unexpectAnothermockresources AnotherMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := anotherMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := anotherMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			anotherMockResource1a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource1b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResourceWatched := AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}
			assertSnapshotAnothermockresources(anotherMockResourceWatched, nil)
			err = anotherMockResourceClient.Delete(anotherMockResource1a.GetMetadata().Namespace, anotherMockResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = anotherMockResourceClient.Delete(anotherMockResource1b.GetMetadata().Namespace, anotherMockResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			anotherMockResourceNotWatched := AnotherMockResourceList{anotherMockResource1a, anotherMockResource1b}
			assertSnapshotAnothermockresources(nil, anotherMockResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace1, namespace2)

			getNewNamespaces1and2()
			createNamespaces(ctx, kube, namespace1, namespace2)

			/*
				ClusterResource
			*/
			assertSnapshotClusterresources := func(expectClusterresources ClusterResourceList, unexpectClusterresources ClusterResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectClusterresources {
							if _, err := snap.Clusterresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectClusterresources {
							if _, err := snap.Clusterresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						combined, _ := clusterResourceClient.List(clients.ListOpts{})
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			clusterResource1a, err := clusterResourceClient.Write(NewClusterResource(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			clusterResource1b, err := clusterResourceClient.Write(NewClusterResource(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			clusterResourceWatched := ClusterResourceList{clusterResource1a, clusterResource1b}
			assertSnapshotClusterresources(clusterResourceWatched, nil)
			err = clusterResourceClient.Delete(clusterResource1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = clusterResourceClient.Delete(clusterResource1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			clusterResourceNotWatched := ClusterResourceList{clusterResource1a, clusterResource1b}
			assertSnapshotClusterresources(nil, clusterResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace1, namespace2)

			getNewNamespaces1and2()
			createNamespaces(ctx, kube, namespace1, namespace2)

			/*
				MockCustomType
			*/
			assertSnapshotmcts := func(expectmcts MockCustomTypeList, unexpectmcts MockCustomTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectmcts {
							if _, err := snap.Mcts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcts {
							if _, err := snap.Mcts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockCustomTypeClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockCustomTypeClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			mockCustomType1a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType1b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomTypeWatched := MockCustomTypeList{mockCustomType1a, mockCustomType1b}
			assertSnapshotmcts(mockCustomTypeWatched, nil)
			err = mockCustomTypeClient.Delete(mockCustomType1a.GetMetadata().Namespace, mockCustomType1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomTypeClient.Delete(mockCustomType1b.GetMetadata().Namespace, mockCustomType1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			mockCustomTypeNotWatched := MockCustomTypeList{mockCustomType1a, mockCustomType1b}
			assertSnapshotmcts(nil, mockCustomTypeNotWatched)

			deleteNamespaces(ctx, kube, namespace1, namespace2)

			getNewNamespaces1and2()
			createNamespaces(ctx, kube, namespace1, namespace2)

			/*
				MockCustomSpecHashType
			*/
			assertSnapshotmcshts := func(expectmcshts MockCustomSpecHashTypeList, unexpectmcshts MockCustomSpecHashTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectmcshts {
							if _, err := snap.Mcshts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcshts {
							if _, err := snap.Mcshts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockCustomSpecHashTypeClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockCustomSpecHashTypeClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			mockCustomSpecHashType1a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashType1b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashTypeWatched := MockCustomSpecHashTypeList{mockCustomSpecHashType1a, mockCustomSpecHashType1b}
			assertSnapshotmcshts(mockCustomSpecHashTypeWatched, nil)
			err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType1a.GetMetadata().Namespace, mockCustomSpecHashType1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = mockCustomSpecHashTypeClient.Delete(mockCustomSpecHashType1b.GetMetadata().Namespace, mockCustomSpecHashType1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			mockCustomSpecHashTypeNotWatched := MockCustomSpecHashTypeList{mockCustomSpecHashType1a, mockCustomSpecHashType1b}
			assertSnapshotmcshts(nil, mockCustomSpecHashTypeNotWatched)

			deleteNamespaces(ctx, kube, namespace1, namespace2)

			getNewNamespaces1and2()
			createNamespaces(ctx, kube, namespace1, namespace2)

			/*
				Pod
			*/
			assertSnapshotpods := func(expectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList, unexpectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectpods {
							if _, err := snap.Pods.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectpods {
							if _, err := snap.Pods.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := podClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := podClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			pod1a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace1, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod1b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace2, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			podWatched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}
			assertSnapshotpods(podWatched, nil)
			err = podClient.Delete(pod1a.GetMetadata().Namespace, pod1a.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			err = podClient.Delete(pod1b.GetMetadata().Namespace, pod1b.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())

			podNotWatched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod1a, pod1b}
			assertSnapshotpods(nil, podNotWatched)

			deleteNamespaces(ctx, kube, namespace1, namespace2)

			getNewNamespaces1and2()
			createNamespaces(ctx, kube, namespace1, namespace2)
		})

		It("Should not contain resources from a deleted namespace, that is filtered", func() {
			ctx := context.Background()
			err := emitter.Register()
			Expect(err).NotTo(HaveOccurred())

			snapshots, errs, err := emitter.Snapshots([]string{""}, clients.WatchOpts{
				Ctx:                ctx,
				RefreshRate:        time.Second,
				ExpressionSelector: labelExpression1,
			})
			Expect(err).NotTo(HaveOccurred())

			var snap *TestingSnapshot

			/*
				SimpleMockResource
			*/

			assertSnapshotSimplemocks := func(expectSimplemocks SimpleMockResourceList, unexpectSimplemocks SimpleMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectSimplemocks {
							if _, err := snap.Simplemocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectSimplemocks {
							if _, err := snap.Simplemocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := simpleMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := simpleMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			simpleMockResource2a, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResource2b, err := simpleMockResourceClient.Write(NewSimpleMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			simpleMockResourceNotWatched := SimpleMockResourceList{}
			simpleMockResourceWatched := SimpleMockResourceList{simpleMockResource2a, simpleMockResource2b}
			assertSnapshotSimplemocks(simpleMockResourceWatched, simpleMockResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace3)

			simpleMockResourceWatched = SimpleMockResourceList{simpleMockResource2b}
			simpleMockResourceNotWatched = append(simpleMockResourceNotWatched, simpleMockResource2a)
			assertSnapshotSimplemocks(simpleMockResourceWatched, simpleMockResourceNotWatched)

			for _, r := range simpleMockResourceWatched {
				err = simpleMockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				simpleMockResourceNotWatched = append(simpleMockResourceNotWatched, r)
			}
			assertSnapshotSimplemocks(nil, simpleMockResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace4)
			getNewNamespaces()

			/*
				MockResource
			*/

			assertSnapshotMocks := func(expectMocks MockResourceList, unexpectMocks MockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectMocks {
							if _, err := snap.Mocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectMocks {
							if _, err := snap.Mocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			mockResource2a, err := mockResourceClient.Write(NewMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResource2b, err := mockResourceClient.Write(NewMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockResourceNotWatched := MockResourceList{}
			mockResourceWatched := MockResourceList{mockResource2a, mockResource2b}
			assertSnapshotMocks(mockResourceWatched, mockResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace3)

			mockResourceWatched = MockResourceList{mockResource2b}
			mockResourceNotWatched = append(mockResourceNotWatched, mockResource2a)
			assertSnapshotMocks(mockResourceWatched, mockResourceNotWatched)

			for _, r := range mockResourceWatched {
				err = mockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				mockResourceNotWatched = append(mockResourceNotWatched, r)
			}
			assertSnapshotMocks(nil, mockResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace4)
			getNewNamespaces()

			/*
				FakeResource
			*/

			assertSnapshotFakes := func(expectFakes FakeResourceList, unexpectFakes FakeResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectFakes {
							if _, err := snap.Fakes.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectFakes {
							if _, err := snap.Fakes.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := fakeResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := fakeResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			fakeResource2a, err := fakeResourceClient.Write(NewFakeResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResource2b, err := fakeResourceClient.Write(NewFakeResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			fakeResourceNotWatched := FakeResourceList{}
			fakeResourceWatched := FakeResourceList{fakeResource2a, fakeResource2b}
			assertSnapshotFakes(fakeResourceWatched, fakeResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace3)

			fakeResourceWatched = FakeResourceList{fakeResource2b}
			fakeResourceNotWatched = append(fakeResourceNotWatched, fakeResource2a)
			assertSnapshotFakes(fakeResourceWatched, fakeResourceNotWatched)

			for _, r := range fakeResourceWatched {
				err = fakeResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				fakeResourceNotWatched = append(fakeResourceNotWatched, r)
			}
			assertSnapshotFakes(nil, fakeResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace4)
			getNewNamespaces()

			/*
				AnotherMockResource
			*/

			assertSnapshotAnothermockresources := func(expectAnothermockresources AnotherMockResourceList, unexpectAnothermockresources AnotherMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := anotherMockResourceClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := anotherMockResourceClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			anotherMockResource2a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResource2b, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			anotherMockResourceNotWatched := AnotherMockResourceList{}
			anotherMockResourceWatched := AnotherMockResourceList{anotherMockResource2a, anotherMockResource2b}
			assertSnapshotAnothermockresources(anotherMockResourceWatched, anotherMockResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace3)

			anotherMockResourceWatched = AnotherMockResourceList{anotherMockResource2b}
			anotherMockResourceNotWatched = append(anotherMockResourceNotWatched, anotherMockResource2a)
			assertSnapshotAnothermockresources(anotherMockResourceWatched, anotherMockResourceNotWatched)

			for _, r := range anotherMockResourceWatched {
				err = anotherMockResourceClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				anotherMockResourceNotWatched = append(anotherMockResourceNotWatched, r)
			}
			assertSnapshotAnothermockresources(nil, anotherMockResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace4)
			getNewNamespaces()

			/*
				ClusterResource
			*/

			assertSnapshotClusterresources := func(expectClusterresources ClusterResourceList, unexpectClusterresources ClusterResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectClusterresources {
							if _, err := snap.Clusterresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectClusterresources {
							if _, err := snap.Clusterresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						combined, _ := clusterResourceClient.List(clients.ListOpts{})
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			clusterResource2a, err := clusterResourceClient.Write(NewClusterResource(namespace3, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			clusterResourceNotWatched := ClusterResourceList{}
			clusterResourceWatched := ClusterResourceList{clusterResource2a}
			assertSnapshotClusterresources(clusterResourceWatched, nil)

			deleteNamespaces(ctx, kube, namespace3)

			for _, r := range clusterResourceWatched {
				err = clusterResourceClient.Delete(r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				clusterResourceNotWatched = append(clusterResourceNotWatched, r)
			}
			assertSnapshotClusterresources(nil, clusterResourceNotWatched)

			deleteNamespaces(ctx, kube, namespace4)
			getNewNamespaces()

			/*
				MockCustomType
			*/

			assertSnapshotmcts := func(expectmcts MockCustomTypeList, unexpectmcts MockCustomTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectmcts {
							if _, err := snap.Mcts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcts {
							if _, err := snap.Mcts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockCustomTypeClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockCustomTypeClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			mockCustomType2a, err := mockCustomTypeClient.Write(NewMockCustomType(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomType2b, err := mockCustomTypeClient.Write(NewMockCustomType(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomTypeNotWatched := MockCustomTypeList{}
			mockCustomTypeWatched := MockCustomTypeList{mockCustomType2a, mockCustomType2b}
			assertSnapshotmcts(mockCustomTypeWatched, mockCustomTypeNotWatched)

			deleteNamespaces(ctx, kube, namespace3)

			mockCustomTypeWatched = MockCustomTypeList{mockCustomType2b}
			mockCustomTypeNotWatched = append(mockCustomTypeNotWatched, mockCustomType2a)
			assertSnapshotmcts(mockCustomTypeWatched, mockCustomTypeNotWatched)

			for _, r := range mockCustomTypeWatched {
				err = mockCustomTypeClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				mockCustomTypeNotWatched = append(mockCustomTypeNotWatched, r)
			}
			assertSnapshotmcts(nil, mockCustomTypeNotWatched)

			deleteNamespaces(ctx, kube, namespace4)
			getNewNamespaces()

			/*
				MockCustomSpecHashType
			*/

			assertSnapshotmcshts := func(expectmcshts MockCustomSpecHashTypeList, unexpectmcshts MockCustomSpecHashTypeList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectmcshts {
							if _, err := snap.Mcshts.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectmcshts {
							if _, err := snap.Mcshts.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := mockCustomSpecHashTypeClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := mockCustomSpecHashTypeClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			mockCustomSpecHashType2a, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashType2b, err := mockCustomSpecHashTypeClient.Write(NewMockCustomSpecHashType(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			mockCustomSpecHashTypeNotWatched := MockCustomSpecHashTypeList{}
			mockCustomSpecHashTypeWatched := MockCustomSpecHashTypeList{mockCustomSpecHashType2a, mockCustomSpecHashType2b}
			assertSnapshotmcshts(mockCustomSpecHashTypeWatched, mockCustomSpecHashTypeNotWatched)

			deleteNamespaces(ctx, kube, namespace3)

			mockCustomSpecHashTypeWatched = MockCustomSpecHashTypeList{mockCustomSpecHashType2b}
			mockCustomSpecHashTypeNotWatched = append(mockCustomSpecHashTypeNotWatched, mockCustomSpecHashType2a)
			assertSnapshotmcshts(mockCustomSpecHashTypeWatched, mockCustomSpecHashTypeNotWatched)

			for _, r := range mockCustomSpecHashTypeWatched {
				err = mockCustomSpecHashTypeClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				mockCustomSpecHashTypeNotWatched = append(mockCustomSpecHashTypeNotWatched, r)
			}
			assertSnapshotmcshts(nil, mockCustomSpecHashTypeNotWatched)

			deleteNamespaces(ctx, kube, namespace4)
			getNewNamespaces()

			/*
				Pod
			*/

			assertSnapshotpods := func(expectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList, unexpectpods github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						for _, expected := range expectpods {
							if _, err := snap.Pods.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectpods {
							if _, err := snap.Pods.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						nsList1, _ := podClient.List(namespace1, clients.ListOpts{})
						nsList2, _ := podClient.List(namespace2, clients.ListOpts{})
						combined := append(nsList1, nsList2...)
						Fail("expected final snapshot before 10 seconds. expected " + log.Sprintf("%v", combined))
					}
				}
			}

			// create namespaces
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)
			createNamespaceWithLabel(ctx, kube, namespace4, labels1)

			pod2a, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			pod2b, err := podClient.Write(github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.NewPod(namespace4, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			podNotWatched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{}
			podWatched := github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2a, pod2b}
			assertSnapshotpods(podWatched, podNotWatched)

			deleteNamespaces(ctx, kube, namespace3)

			podWatched = github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.PodList{pod2b}
			podNotWatched = append(podNotWatched, pod2a)
			assertSnapshotpods(podWatched, podNotWatched)

			for _, r := range podWatched {
				err = podClient.Delete(r.GetMetadata().Namespace, r.GetMetadata().Name, clients.DeleteOpts{Ctx: ctx})
				Expect(err).NotTo(HaveOccurred())
				podNotWatched = append(podNotWatched, r)
			}
			assertSnapshotpods(nil, podNotWatched)

			deleteNamespaces(ctx, kube, namespace4)
			getNewNamespaces()
		})

		It("should be able to return a resource from a deleted namespace, after the namespace is re-created", func() {
			ctx := context.Background()
			err := emitter.Register()
			Expect(err).NotTo(HaveOccurred())

			snapshots, errs, err := emitter.Snapshots([]string{""}, clients.WatchOpts{
				Ctx:                ctx,
				RefreshRate:        time.Second,
				ExpressionSelector: labelExpression1,
			})
			Expect(err).NotTo(HaveOccurred())

			var snap *TestingSnapshot
			var previous *TestingSnapshot

			/*
				MockResource
			*/
			assertSnapshotMocks := func(expectMocks MockResourceList, unexpectMocks MockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						previous = snap
						for _, expected := range expectMocks {
							if _, err := snap.Mocks.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectMocks {
							if _, err := snap.Mocks.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						var expectedResources map[string][]string
						var unexpectedResource map[string][]string

						if previous != nil {
							expectedResources = findNonMatchingResources(convertMocksToMetadataGetter(expectMocks), convertMocksToMetadataGetter(previous.Mocks))
							unexpectedResource = findMatchingResources(convertMocksToMetadataGetter(unexpectMocks), convertMocksToMetadataGetter(previous.Mocks))
						} else {
							expectedResources = getMapOfResources(convertMocksToMetadataGetter(expectMocks))
							unexpectedResource = getMapOfResources(convertMocksToMetadataGetter(unexpectMocks))
						}
						getList := func(ns string) ([]metadataGetter, error) {
							l, err := mockResourceClient.List(ns, clients.ListOpts{})
							return convertMocksToMetadataGetter(l), err
						}
						namespaceResources := getMapOfNamespaceResources(getList)
						Fail(fmt.Sprintf("expected final snapshot before 10 seconds. expected \nExpected:\n%#v\n\nUnexpected:\n%#v\n\nnamespaces:\n%#v", expectedResources, unexpectedResource, namespaceResources))
					}
				}
			}

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)

			mockResource1a, err := mockResourceClient.Write(NewMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotMocks(MockResourceList{mockResource1a}, nil)

			deleteNamespaces(ctx, kube, namespace3)
			Eventually(func() bool {
				_, err = kube.CoreV1().Namespaces().Get(ctx, namespace3, metav1.GetOptions{})
				return apierrors.IsNotFound(err)
			}, 10*time.Second, 1*time.Second).Should(BeTrue())
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)

			mockResource2a, err := mockResourceClient.Write(NewMockResource(namespace3, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotMocks(MockResourceList{mockResource2a}, MockResourceList{mockResource1a})

			deleteNamespaces(ctx, kube, namespace3)
			Eventually(func() bool {
				_, err = kube.CoreV1().Namespaces().Get(ctx, namespace3, metav1.GetOptions{})
				return apierrors.IsNotFound(err)
			}, 10*time.Second, 1*time.Second).Should(BeTrue())

			/*
				AnotherMockResource
			*/
			assertSnapshotAnothermockresources := func(expectAnothermockresources AnotherMockResourceList, unexpectAnothermockresources AnotherMockResourceList) {
			drain:
				for {
					select {
					case snap = <-snapshots:
						previous = snap
						for _, expected := range expectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(expected.GetMetadata().Ref().Strings()); err != nil {
								continue drain
							}
						}
						for _, unexpected := range unexpectAnothermockresources {
							if _, err := snap.Anothermockresources.Find(unexpected.GetMetadata().Ref().Strings()); err == nil {
								continue drain
							}
						}
						break drain
					case err := <-errs:
						Expect(err).NotTo(HaveOccurred())
					case <-time.After(time.Second * 10):
						var expectedResources map[string][]string
						var unexpectedResource map[string][]string

						if previous != nil {
							expectedResources = findNonMatchingResources(convertAnothermockresourcesToMetadataGetter(expectAnothermockresources), convertAnothermockresourcesToMetadataGetter(previous.Anothermockresources))
							unexpectedResource = findMatchingResources(convertAnothermockresourcesToMetadataGetter(unexpectAnothermockresources), convertAnothermockresourcesToMetadataGetter(previous.Anothermockresources))
						} else {
							expectedResources = getMapOfResources(convertAnothermockresourcesToMetadataGetter(expectAnothermockresources))
							unexpectedResource = getMapOfResources(convertAnothermockresourcesToMetadataGetter(unexpectAnothermockresources))
						}
						getList := func(ns string) ([]metadataGetter, error) {
							l, err := anotherMockResourceClient.List(ns, clients.ListOpts{})
							return convertAnothermockresourcesToMetadataGetter(l), err
						}
						namespaceResources := getMapOfNamespaceResources(getList)
						Fail(fmt.Sprintf("expected final snapshot before 10 seconds. expected \nExpected:\n%#v\n\nUnexpected:\n%#v\n\nnamespaces:\n%#v", expectedResources, unexpectedResource, namespaceResources))
					}
				}
			}

			createNamespaceWithLabel(ctx, kube, namespace3, labels1)

			anotherMockResource1a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace3, name1), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource1a}, nil)

			deleteNamespaces(ctx, kube, namespace3)
			Eventually(func() bool {
				_, err = kube.CoreV1().Namespaces().Get(ctx, namespace3, metav1.GetOptions{})
				return apierrors.IsNotFound(err)
			}, 10*time.Second, 1*time.Second).Should(BeTrue())
			createNamespaceWithLabel(ctx, kube, namespace3, labels1)

			anotherMockResource2a, err := anotherMockResourceClient.Write(NewAnotherMockResource(namespace3, name2), clients.WriteOpts{Ctx: ctx})
			Expect(err).NotTo(HaveOccurred())
			assertSnapshotAnothermockresources(AnotherMockResourceList{anotherMockResource2a}, AnotherMockResourceList{anotherMockResource1a})

			deleteNamespaces(ctx, kube, namespace3)
			Eventually(func() bool {
				_, err = kube.CoreV1().Namespaces().Get(ctx, namespace3, metav1.GetOptions{})
				return apierrors.IsNotFound(err)
			}, 10*time.Second, 1*time.Second).Should(BeTrue())

		})
	})

	Context("use different resource namespace listers", func() {
		BeforeEach(func() {
			resourceNamespaceLister = namespace.NewKubeClientResourceNamespaceLister(kube)
			emitter = NewTestingEmitter(simpleMockResourceClient, mockResourceClient, fakeResourceClient, anotherMockResourceClient, clusterResourceClient, mockCustomTypeClient, mockCustomSpecHashTypeClient, podClient, resourceNamespaceLister)
		})

		It("Should work with the Kube Client Namespace Lister", func() {
			runNamespacedSelectorsWithWatchNamespaces()
		})
	})

})
