// Code generated by solo-kit. DO NOT EDIT.

package v1alpha1

import (
	"log"
	"os"
	"sort"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewMockResource(namespace, name string) *MockResource {
	mockresource := &MockResource{}
	mockresource.SetMetadata(&core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return mockresource
}

func (r *MockResource) SetMetadata(meta *core.Metadata) {
	r.Metadata = meta
}

func (r *MockResource) SetStatus(status *core.Status) {
	r.StatusOneof = &MockResource_Status{Status: status}
}

func (r *MockResource) SetReporterStatus(status *core.ReporterStatus) {
	r.StatusOneof = &MockResource_ReporterStatus{ReporterStatus: status}
}

// AddToReporterStatus inserts the specified status into the ReporterStatus.Statuses map for the
// controller specified by status.ReportedBy.  If the resource does not yet have a ReporterStatus,
// one will be created.
// Note: POD_NAMESPACE environment variable must be set for this function to behave as expected.
func (r *MockResource) AddToReporterStatus(status *core.Status) {
	podNamespace := os.Getenv("POD_NAMESPACE")
	if podNamespace != "" {
		if r.GetReporterStatus() == nil {
			r.SetReporterStatus(&core.ReporterStatus{})
		}
		if r.GetReporterStatus().Statuses == nil {
			r.GetReporterStatus().Statuses = make(map[string]*core.Status)
		}
		key := podNamespace + ":" + status.GetReportedBy()
		r.GetReporterStatus().Statuses[key] = status
	}
}

// GetStatusForReporter returns the status stored in the ReporterStatus.Statuses map for the
// controller specified by reportedBy, or nil if no status exists for that controller.
// Note: POD_NAMESPACE environment variable must be set for this function to behave as expected.
func (r *MockResource) GetStatusForReporter(reportedBy string) *core.Status {
	podNamespace := os.Getenv("POD_NAMESPACE")
	if podNamespace != "" {
		key := podNamespace + ":" + reportedBy
		if r.GetReporterStatus() == nil {
			return nil
		}
		if r.GetReporterStatus().Statuses == nil {
			return nil
		}
		return r.GetReporterStatus().Statuses[key]
	}
	return nil
}

func (r *MockResource) HasReporterStatus() bool {
	switch r.StatusOneof.(type) {
	case *MockResource_ReporterStatus:
		return true
	default:
		return false
	}
}

func (r *MockResource) HasStatus() bool {
	switch r.StatusOneof.(type) {
	case *MockResource_Status:
		return true
	default:
		return false
	}
}

func (r *MockResource) MustHash() uint64 {
	hashVal, err := r.Hash(nil)
	if err != nil {
		log.Panicf("error while hashing: (%s) this should never happen", err)
	}
	return hashVal
}

func (r *MockResource) GroupVersionKind() schema.GroupVersionKind {
	return MockResourceGVK
}

type MockResourceList []*MockResource

func (list MockResourceList) Find(namespace, name string) (*MockResource, error) {
	for _, mockResource := range list {
		if mockResource.GetMetadata().Name == name && mockResource.GetMetadata().Namespace == namespace {
			return mockResource, nil
		}
	}
	return nil, errors.Errorf("list did not find mockResource %v.%v", namespace, name)
}

func (list MockResourceList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, mockResource := range list {
		ress = append(ress, mockResource)
	}
	return ress
}

func (list MockResourceList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, mockResource := range list {
		ress = append(ress, mockResource)
	}
	return ress
}

func (list MockResourceList) Names() []string {
	var names []string
	for _, mockResource := range list {
		names = append(names, mockResource.GetMetadata().Name)
	}
	return names
}

func (list MockResourceList) NamespacesDotNames() []string {
	var names []string
	for _, mockResource := range list {
		names = append(names, mockResource.GetMetadata().Namespace+"."+mockResource.GetMetadata().Name)
	}
	return names
}

func (list MockResourceList) Sort() MockResourceList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list MockResourceList) Clone() MockResourceList {
	var mockResourceList MockResourceList
	for _, mockResource := range list {
		mockResourceList = append(mockResourceList, resources.Clone(mockResource).(*MockResource))
	}
	return mockResourceList
}

func (list MockResourceList) Each(f func(element *MockResource)) {
	for _, mockResource := range list {
		f(mockResource)
	}
}

func (list MockResourceList) EachResource(f func(element resources.Resource)) {
	for _, mockResource := range list {
		f(mockResource)
	}
}

func (list MockResourceList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *MockResource) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for MockResource

func (o *MockResource) GetObjectKind() schema.ObjectKind {
	t := MockResourceCrd.TypeMeta()
	return &t
}

func (o *MockResource) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*MockResource)
}

func (o *MockResource) DeepCopyInto(out *MockResource) {
	clone := resources.Clone(o).(*MockResource)
	*out = *clone
}

var (
	MockResourceCrd = crd.NewCrd(
		"mocks",
		MockResourceGVK.Group,
		MockResourceGVK.Version,
		MockResourceGVK.Kind,
		"mk",
		false,
		&MockResource{})
)

var (
	MockResourceGVK = schema.GroupVersionKind{
		Version: "v1alpha1",
		Group:   "crds.testing.solo.io",
		Kind:    "MockResource",
	}
)
